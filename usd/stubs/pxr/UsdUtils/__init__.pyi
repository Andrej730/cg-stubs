import Boost.Python
import pxr.UsdUtils.complianceChecker as complianceChecker
import pxr.UsdUtils.constantsGroup as constantsGroup
import pxr.UsdUtils.fixBrokenPixarSchemas as fixBrokenPixarSchemas
import pxr.Sdf
import std
import pxr.UsdUtils.toolPaths as toolPaths
import pxr.UsdUtils.updateSchemaWithSdrNode as updateSchemaWithSdrNode
import pxr.UsdUtils.usdzUtils as usdzUtils
from pxr.UsdUtils.complianceChecker import ComplianceChecker as ComplianceChecker
from pxr.UsdUtils.fixBrokenPixarSchemas import FixBrokenPixarSchemas as FixBrokenPixarSchemas
from pxr.UsdUtils.updateSchemaWithSdrNode import PropertyDefiningKeys as PropertyDefiningKeys, SchemaDefiningKeys as SchemaDefiningKeys, SchemaDefiningMiscConstants as SchemaDefiningMiscConstants, UpdateSchemaWithSdrNode as UpdateSchemaWithSdrNode
from pxr.UsdUtils.usdzUtils import CheckUsdzCompliance as CheckUsdzCompliance, CreateUsdzPackage as CreateUsdzPackage, ExtractUsdzPackage as ExtractUsdzPackage, UsdzAssetIterator as UsdzAssetIterator
from typing import Any, ClassVar, overload

class CoalescingDiagnosticDelegate(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def DumpCoalescedDiagnosticsToStderr(self) -> None: ...
    def DumpCoalescedDiagnosticsToStdout(self) -> None: ...
    @overload
    def DumpUncoalescedDiagnostics(self) -> None: ...
    @overload
    def DumpUncoalescedDiagnostics(self) -> None: ...
    def TakeCoalescedDiagnostics(self) -> list[CoalescingDiagnosticDelegate]: ...
    def TakeUncoalescedDiagnostics(self) -> list[std.unique_ptr[pxr.Tf.DiagnosticBase]]: ...
    def __reduce__(self) -> Any: ...

class CoalescingDiagnosticDelegateItem(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def sharedItem(self) -> Any: ...
    @property
    def unsharedItems(self) -> Any: ...

class CoalescingDiagnosticDelegateSharedItem(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def sourceFileName(self) -> Any: ...
    @property
    def sourceFunction(self) -> Any: ...
    @property
    def sourceLineNumber(self) -> Any: ...

class CoalescingDiagnosticDelegateUnsharedItem(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def commentary(self) -> Any: ...
    @property
    def context(self) -> Any: ...

class ConditionalAbortDiagnosticDelegate(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: ConditionalAbortDiagnosticDelegateErrorFilters, arg3: ConditionalAbortDiagnosticDelegateErrorFilters) -> None: ...
    def __reduce__(self) -> Any: ...

class ConditionalAbortDiagnosticDelegateErrorFilters(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def GetCodePathFilters(self) -> list[str]: ...
    def GetStringFilters(self) -> list[str]: ...
    def SetCodePathFilters(self, codePathFilters: list[str]) -> None: ...
    def SetStringFilters(self, stringFilters: list[str]) -> None: ...
    def __reduce__(self) -> Any: ...

class RegisteredVariantSet(Boost.Python.instance):
    class SelectionExportPolicy(Boost.Python.enum):
        Always: ClassVar[RegisteredVariantSet.SelectionExportPolicy] = ...
        IfAuthored: ClassVar[RegisteredVariantSet.SelectionExportPolicy] = ...
        Never: ClassVar[RegisteredVariantSet.SelectionExportPolicy] = ...
        names: ClassVar[dict] = ...
        values: ClassVar[dict] = ...
        __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def name(self) -> Any: ...
    @property
    def selectionExportPolicy(self) -> Any: ...

class SparseAttrValueWriter(Boost.Python.instance):
    def __init__(self, attr: pxr.Usd.Attribute, defaultValue: object = ...) -> None: ...
    def SetTimeSample(self, value: object, time: TimeCode) -> bool: ...
    def __reduce__(self) -> Any: ...

class SparseValueWriter(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def GetSparseAttrValueWriters(self) -> list[SparseAttrValueWriter]: ...
    def SetAttribute(self, attr: pxr.Usd.Attribute, value: object, time: TimeCode = ...) -> bool: ...
    def __reduce__(self) -> Any: ...

class StageCache(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    @classmethod
    def Get(cls) -> StageCache: ...
    @classmethod
    def GetSessionLayerForVariantSelections(cls, arg1: str, arg2: list[tuple[str, str]]) -> pxr.Sdf.Layer: ...
    def __reduce__(self) -> Any: ...

class TimeCodeRange(Boost.Python.instance):
    class Tokens(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __reduce__(self) -> Any: ...
        @property
        def EmptyTimeCodeRange(self) -> Any: ...
        @property
        def RangeSeparator(self) -> Any: ...
        @property
        def StrideSeparator(self) -> Any: ...
    class _Iterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> _Iterator: ...
        def __next__(self) -> TimeCode: ...
        def __reduce__(self) -> Any: ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, timeCode: TimeCode) -> None: ...
    @overload
    def __init__(self, startTimeCode: TimeCode, endTimeCode: TimeCode) -> None: ...
    @overload
    def __init__(self, startTimeCode: TimeCode, endTimeCode: TimeCode, stride: float) -> None: ...
    @classmethod
    def CreateFromFrameSpec(cls, arg1: str) -> TimeCodeRange: ...
    def IsValid(self) -> bool: ...
    def empty(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __iter__(self) -> _Iterator: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def endTimeCode(self) -> type: ...
    @property
    def frameSpec(self) -> Any: ...
    @property
    def startTimeCode(self) -> type: ...
    @property
    def stride(self) -> type: ...

class UsdStageStatsKeys(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def activePrimCount(self) -> Any: ...
    @property
    def approxMemoryInMb(self) -> Any: ...
    @property
    def assetCount(self) -> Any: ...
    @property
    def inactivePrimCount(self) -> Any: ...
    @property
    def instanceCount(self) -> Any: ...
    @property
    def instancedModelCount(self) -> Any: ...
    @property
    def modelCount(self) -> Any: ...
    @property
    def primCounts(self) -> Any: ...
    @property
    def primCountsByType(self) -> Any: ...
    @property
    def primary(self) -> Any: ...
    @property
    def prototypeCount(self) -> Any: ...
    @property
    def prototypes(self) -> Any: ...
    @property
    def pureOverCount(self) -> Any: ...
    @property
    def totalInstanceCount(self) -> Any: ...
    @property
    def totalPrimCount(self) -> Any: ...
    @property
    def untyped(self) -> Any: ...
    @property
    def usedLayerCount(self) -> Any: ...

def AuthorCollection(collectionName: str, usdPrim: pxr.Usd.Prim, pathsToInclude: list[pxr.Sdf.Path], pathsToExclude: list[pxr.Sdf.Path] = ...) -> pxr.Usd.CollectionAPI: ...
def ComputeAllDependencies(assetPath: pxr.Sdf.AssetPath) -> tuple: ...
def ComputeCollectionIncludesAndExcludes(includedRootPaths: pxr.Sdf.PathSet, usdStage: pxr.Usd.Stage, minInclusionRatio: float = ..., maxNumExcludesBelowInclude: int = ..., minIncludeExcludeCollectionSize: int = ..., pathsToIgnore: PathHashSet = ...) -> bool: ...
@overload
def ComputeUsdStageStats(arg1: str) -> pxr.Usd.Stage: ...
@overload
def ComputeUsdStageStats(arg1: pxr.Usd.Stage) -> int: ...
def CopyLayerMetadata(source: pxr.Sdf.Layer, destination: pxr.Sdf.Layer, skipSublayers: bool = ..., bakeUnauthoredFallbacks: bool = ...) -> bool: ...
def CreateCollections(assignments: list[tuple[str, pxr.Sdf.PathSet]], usdPrim: pxr.Usd.Prim, minInclusionRatio: float = ..., maxNumExcludesBelowInclude: int = ..., minIncludeExcludeCollectionSize: int = ...) -> list[pxr.Usd.CollectionAPI]: ...
def CreateNewARKitUsdzPackage(assetPath: pxr.Sdf.AssetPath, usdzFilePath: str, firstLayerName: str = ...) -> bool: ...
def CreateNewUsdzPackage(assetPath: pxr.Sdf.AssetPath, usdzFilePath: str, firstLayerName: str = ...) -> bool: ...
def ExtractExternalReferences(filePath: str) -> tuple: ...
@overload
def FlattenLayerStack(stage: pxr.Usd.Stage, tag: str = ...) -> pxr.Sdf.Layer: ...
@overload
def FlattenLayerStack(stage: pxr.Usd.Stage, resolveAssetPathFn: ResolveAssetPathFn, tag: str = ...) -> pxr.Sdf.Layer: ...
def FlattenLayerStackResolveAssetPath(sourceLayer: pxr.Sdf.Layer, assetPath: str) -> str: ...
def GenerateClipManifestName(rootLayerName: str) -> str: ...
def GenerateClipTopologyName(rootLayerName: str) -> str: ...
def GetAlphaAttributeNameForColor(colorAttrName: str) -> str: ...
def GetDirtyLayers(stage: pxr.Usd.Stage, includeClipLayers: bool = ...) -> list[pxr.Sdf.Layer]: ...
def GetMaterialsScopeName(forceDefault: bool = ...) -> str: ...
def GetModelNameFromRootLayer(arg1: pxr.Sdf.Layer) -> str: ...
def GetPrefName() -> str: ...
def GetPrimAtPathWithForwarding(stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> pxr.Usd.Prim: ...
def GetPrimaryCameraName(forceDefault: bool = ...) -> str: ...
def GetPrimaryUVSetName() -> str: ...
def GetRegisteredVariantSets() -> list[RegisteredVariantSet]: ...
def ModifyAssetPaths(layer: pxr.Sdf.Layer, modifyFn: ModifyAssetPathFn) -> None: ...
def StitchClips(resultLayer: pxr.Sdf.Layer, clipLayerFiles: list[str], clipPath: pxr.Sdf.Path, startFrame: float = ..., endFrame: float = ..., interpolateMissingClipValues: bool = ..., clipSet: str = ...) -> bool: ...
def StitchClipsManifest(manifestLayer: pxr.Sdf.Layer, topologyLayer: pxr.Sdf.Layer, clipPath: list[str], clipLayerFiles: pxr.Sdf.Path) -> bool: ...
def StitchClipsTemplate(resultLayer: pxr.Sdf.Layer, topologyLayer: pxr.Sdf.Layer, manifestLayer: pxr.Sdf.Layer, clipPath: pxr.Sdf.Path, templatePath: str, startTimeCode: float, endTimeCode: float, stride: float, activeOffset: float = ..., interpolateMissingClipValues: bool = ..., clipSet: str = ...) -> bool: ...
def StitchClipsTopology(topologyLayer: pxr.Sdf.Layer, clipLayerFiles: list[str]) -> bool: ...
def StitchInfo(strongObj: pxr.Sdf.Spec, weakObj: pxr.Sdf.Spec) -> None: ...
def StitchLayers(strongLayer: pxr.Sdf.Layer, weakLayer: pxr.Sdf.Layer) -> None: ...
def UninstancePrimAtPath(stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> pxr.Usd.Prim: ...