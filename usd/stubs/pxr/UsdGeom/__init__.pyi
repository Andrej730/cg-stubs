import Boost.Python
import pxr.Tf
from typing import Any, ClassVar, overload

class BBoxCache(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg1: object, time: TimeCode, includedPurposes: object, useExtentsHint: bool, ignoreVisibility: bool) -> None: ...
    def Clear(self, arg1: BBoxCache) -> None: ...
    def ClearBaseTime(self, arg1: BBoxCache) -> None: ...
    def ComputeLocalBound(self, arg1: BBoxCache, prim: Prim) -> BBox3d: ...
    def ComputePointInstanceLocalBound(self, arg1: BBoxCache, instancer: PointInstancer, instanceId: int) -> BBox3d: ...
    def ComputePointInstanceLocalBounds(self, arg1: BBoxCache, instancer: PointInstancer, instanceIds: object) -> object: ...
    def ComputePointInstanceRelativeBound(self, arg1: BBoxCache, instancer: PointInstancer, instanceId: int, relativeToAncestorPrim: Prim) -> BBox3d: ...
    def ComputePointInstanceRelativeBounds(self, arg1: BBoxCache, instancer: PointInstancer, instanceIds: object, relativeToAncestorPrim: Prim) -> object: ...
    def ComputePointInstanceUntransformedBound(self, arg1: BBoxCache, instancer: PointInstancer, instanceId: int) -> BBox3d: ...
    def ComputePointInstanceUntransformedBounds(self, arg1: BBoxCache, instancer: PointInstancer, instanceIds: object) -> object: ...
    def ComputePointInstanceWorldBound(self, arg1: BBoxCache, instancer: PointInstancer, instanceId: int) -> BBox3d: ...
    def ComputePointInstanceWorldBounds(self, arg1: BBoxCache, instancer: PointInstancer, instanceIds: object) -> object: ...
    def ComputeRelativeBound(self, arg1: BBoxCache, prim: Prim, relativeRootPrim: Prim) -> BBox3d: ...
    @overload
    def ComputeUntransformedBound(self, arg1: BBoxCache, prim: Prim) -> BBox3d: ...
    @overload
    def ComputeUntransformedBound(self, arg1: BBoxCache, prim: Prim, pathsToSkip: object, ctmOverrides: object) -> BBox3d: ...
    def ComputeWorldBound(self, arg1: BBoxCache, prim: Prim) -> BBox3d: ...
    def ComputeWorldBoundWithOverrides(self, arg1: BBoxCache, prim: Prim, pathsToSkip: object, primOverride: Matrix4d, ctmOverrides: object) -> BBox3d: ...
    def GetBaseTime(self, arg1: BBoxCache) -> TimeCode: ...
    def GetIncludedPurposes(self, arg1: BBoxCache) -> list: ...
    def GetTime(self, arg1: BBoxCache) -> TimeCode: ...
    def GetUseExtentsHint(self, arg1: BBoxCache) -> bool: ...
    def HasBaseTime(self, arg1: BBoxCache) -> bool: ...
    def SetBaseTime(self, arg1: BBoxCache, time: TimeCode) -> None: ...
    def SetIncludedPurposes(self, arg1: BBoxCache, includedPurposes: object) -> None: ...
    def SetTime(self, arg1: BBoxCache, time: TimeCode) -> None: ...
    def __reduce__(self) -> Any: ...

class BasisCurves(Curves):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def ComputeInterpolationForSize(self, arg1: BasisCurves, arg2: int, arg3: TimeCode) -> object: ...
    def ComputeUniformDataSize(self, arg1: BasisCurves, arg2: TimeCode) -> int: ...
    def ComputeVaryingDataSize(self, arg1: BasisCurves, arg2: TimeCode) -> int: ...
    def ComputeVertexDataSize(self, arg1: BasisCurves, arg2: TimeCode) -> int: ...
    def CreateBasisAttr(self, arg1: BasisCurves, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateTypeAttr(self, arg1: BasisCurves, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateWrapAttr(self, arg1: BasisCurves, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> BasisCurves: ...
    def Get(self, stage: Stage, path: Path) -> BasisCurves: ...
    def GetBasisAttr(self, arg1: BasisCurves) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetTypeAttr(self, arg1: BasisCurves) -> Attribute: ...
    def GetWrapAttr(self, arg1: BasisCurves) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: BasisCurves) -> object: ...
    def __reduce__(self) -> Any: ...

class Boundable(Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def ComputeExtent(self, arg1: Boundable, time: TimeCode) -> object: ...
    @overload
    def ComputeExtentFromPlugins(self, boundable: Boundable, time: TimeCode) -> object: ...
    @overload
    def ComputeExtentFromPlugins(self, boundable: Boundable, time: TimeCode, transform: Matrix4d) -> object: ...
    def CreateExtentAttr(self, arg1: Boundable, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> Boundable: ...
    def GetExtentAttr(self, arg1: Boundable) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Boundable) -> object: ...
    def __reduce__(self) -> Any: ...

class Camera(Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateClippingPlanesAttr(self, arg1: Camera, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateClippingRangeAttr(self, arg1: Camera, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateExposureAttr(self, arg1: Camera, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateFStopAttr(self, arg1: Camera, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateFocalLengthAttr(self, arg1: Camera, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateFocusDistanceAttr(self, arg1: Camera, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateHorizontalApertureAttr(self, arg1: Camera, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateHorizontalApertureOffsetAttr(self, arg1: Camera, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateProjectionAttr(self, arg1: Camera, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateShutterCloseAttr(self, arg1: Camera, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateShutterOpenAttr(self, arg1: Camera, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateStereoRoleAttr(self, arg1: Camera, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVerticalApertureAttr(self, arg1: Camera, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVerticalApertureOffsetAttr(self, arg1: Camera, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> Camera: ...
    def Get(self, stage: Stage, path: Path) -> Camera: ...
    def GetCamera(self, arg1: Camera, time: TimeCode = ...) -> Camera: ...
    def GetClippingPlanesAttr(self, arg1: Camera) -> Attribute: ...
    def GetClippingRangeAttr(self, arg1: Camera) -> Attribute: ...
    def GetExposureAttr(self, arg1: Camera) -> Attribute: ...
    def GetFStopAttr(self, arg1: Camera) -> Attribute: ...
    def GetFocalLengthAttr(self, arg1: Camera) -> Attribute: ...
    def GetFocusDistanceAttr(self, arg1: Camera) -> Attribute: ...
    def GetHorizontalApertureAttr(self, arg1: Camera) -> Attribute: ...
    def GetHorizontalApertureOffsetAttr(self, arg1: Camera) -> Attribute: ...
    def GetProjectionAttr(self, arg1: Camera) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetShutterCloseAttr(self, arg1: Camera) -> Attribute: ...
    def GetShutterOpenAttr(self, arg1: Camera) -> Attribute: ...
    def GetStereoRoleAttr(self, arg1: Camera) -> Attribute: ...
    def GetVerticalApertureAttr(self, arg1: Camera) -> Attribute: ...
    def GetVerticalApertureOffsetAttr(self, arg1: Camera) -> Attribute: ...
    def SetFromCamera(self, arg1: Camera, camera: Camera, time: TimeCode = ...) -> None: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Camera) -> object: ...
    def __reduce__(self) -> Any: ...

class Capsule(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateAxisAttr(self, arg1: Capsule, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateExtentAttr(self, arg1: Capsule, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateHeightAttr(self, arg1: Capsule, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateRadiusAttr(self, arg1: Capsule, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> Capsule: ...
    def Get(self, stage: Stage, path: Path) -> Capsule: ...
    def GetAxisAttr(self, arg1: Capsule) -> Attribute: ...
    def GetExtentAttr(self, arg1: Capsule) -> Attribute: ...
    def GetHeightAttr(self, arg1: Capsule) -> Attribute: ...
    def GetRadiusAttr(self, arg1: Capsule) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Capsule) -> object: ...
    def __reduce__(self) -> Any: ...

class Cone(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateAxisAttr(self, arg1: Cone, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateExtentAttr(self, arg1: Cone, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateHeightAttr(self, arg1: Cone, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateRadiusAttr(self, arg1: Cone, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> Cone: ...
    def Get(self, stage: Stage, path: Path) -> Cone: ...
    def GetAxisAttr(self, arg1: Cone) -> Attribute: ...
    def GetExtentAttr(self, arg1: Cone) -> Attribute: ...
    def GetHeightAttr(self, arg1: Cone) -> Attribute: ...
    def GetRadiusAttr(self, arg1: Cone) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Cone) -> object: ...
    def __reduce__(self) -> Any: ...

class ConstraintTarget(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, attr: Attribute) -> None: ...
    def ComputeInWorldSpace(self, arg1: ConstraintTarget, time: TimeCode = ...) -> Matrix4d: ...
    def Get(self, arg1: ConstraintTarget, arg2: Matrix4d, time: TimeCode = ...) -> bool: ...
    def GetAttr(self, arg1: ConstraintTarget) -> Attribute: ...
    def GetConstraintAttrName(self, arg1: object) -> object: ...
    def GetIdentifier(self, arg1: ConstraintTarget) -> object: ...
    def IsDefined(self, arg1: ConstraintTarget) -> bool: ...
    def IsValid(self, arg1: Attribute) -> bool: ...
    def Set(self, arg1: ConstraintTarget, value: Matrix4d, time: TimeCode = ...) -> bool: ...
    def SetIdentifier(self, arg1: ConstraintTarget, identifier: object) -> None: ...
    def __bool__(self, arg1: ConstraintTarget) -> object: ...
    def __reduce__(self) -> Any: ...

class Cube(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateExtentAttr(self, arg1: Cube, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateSizeAttr(self, arg1: Cube, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> Cube: ...
    def Get(self, stage: Stage, path: Path) -> Cube: ...
    def GetExtentAttr(self, arg1: Cube) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetSizeAttr(self, arg1: Cube) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Cube) -> object: ...
    def __reduce__(self) -> Any: ...

class Curves(PointBased):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def ComputeExtent(self, points: object, widths: object) -> object: ...
    def CreateCurveVertexCountsAttr(self, arg1: Curves, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateWidthsAttr(self, arg1: Curves, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> Curves: ...
    def GetCurveCount(self, arg1: Curves, timeCode: TimeCode = ...) -> int: ...
    def GetCurveVertexCountsAttr(self, arg1: Curves) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetWidthsAttr(self, arg1: Curves) -> Attribute: ...
    def GetWidthsInterpolation(self, arg1: Curves) -> object: ...
    def SetWidthsInterpolation(self, arg1: Curves, interpolation: object) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Curves) -> object: ...
    def __reduce__(self) -> Any: ...

class Cylinder(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateAxisAttr(self, arg1: Cylinder, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateExtentAttr(self, arg1: Cylinder, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateHeightAttr(self, arg1: Cylinder, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateRadiusAttr(self, arg1: Cylinder, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> Cylinder: ...
    def Get(self, stage: Stage, path: Path) -> Cylinder: ...
    def GetAxisAttr(self, arg1: Cylinder) -> Attribute: ...
    def GetExtentAttr(self, arg1: Cylinder) -> Attribute: ...
    def GetHeightAttr(self, arg1: Cylinder) -> Attribute: ...
    def GetRadiusAttr(self, arg1: Cylinder) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Cylinder) -> object: ...
    def __reduce__(self) -> Any: ...

class Gprim(Boundable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateDisplayColorAttr(self, arg1: Gprim, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateDisplayColorPrimvar(self, arg1: Gprim, interpolation: object = ..., elementSize: int = ...) -> Primvar: ...
    def CreateDisplayOpacityAttr(self, arg1: Gprim, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateDisplayOpacityPrimvar(self, arg1: Gprim, interpolation: object = ..., elementSize: int = ...) -> Primvar: ...
    def CreateDoubleSidedAttr(self, arg1: Gprim, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateOrientationAttr(self, arg1: Gprim, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> Gprim: ...
    def GetDisplayColorAttr(self, arg1: Gprim) -> Attribute: ...
    def GetDisplayColorPrimvar(self, arg1: Gprim) -> Primvar: ...
    def GetDisplayOpacityAttr(self, arg1: Gprim) -> Attribute: ...
    def GetDisplayOpacityPrimvar(self, arg1: Gprim) -> Primvar: ...
    def GetDoubleSidedAttr(self, arg1: Gprim) -> Attribute: ...
    def GetOrientationAttr(self, arg1: Gprim) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Gprim) -> object: ...
    def __reduce__(self) -> Any: ...

class HermiteCurves(Curves):
    class PointAndTangentArrays(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        @overload
        def __init__(self, arg1: object) -> None: ...
        @overload
        def __init__(self, arg1: object, arg2: Vec3fArray, arg3: Vec3fArray) -> None: ...
        def GetPoints(self, arg1: PointAndTangentArrays) -> Vec3fArray: ...
        def GetTangents(self, arg1: PointAndTangentArrays) -> Vec3fArray: ...
        def Interleave(self, arg1: PointAndTangentArrays) -> Vec3fArray: ...
        def IsEmpty(self, arg1: PointAndTangentArrays) -> bool: ...
        def Separate(self, arg1: Vec3fArray) -> PointAndTangentArrays: ...
        def __bool__(self, arg1: PointAndTangentArrays) -> object: ...
        def __eq__(self, arg1: PointAndTangentArrays, arg2: PointAndTangentArrays) -> object: ...
        def __ne__(self, arg1: PointAndTangentArrays, arg2: PointAndTangentArrays) -> object: ...
        def __reduce__(self) -> Any: ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateTangentsAttr(self, arg1: HermiteCurves, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> HermiteCurves: ...
    def Get(self, stage: Stage, path: Path) -> HermiteCurves: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetTangentsAttr(self, arg1: HermiteCurves) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: HermiteCurves) -> object: ...
    def __reduce__(self) -> Any: ...

class Imageable(pxr.Usd.Typed):
    class PurposeInfo(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        isInheritable: Any
        purpose: Any
        @overload
        def __init__(self, arg1: object) -> None: ...
        @overload
        def __init__(self, arg1: object) -> None: ...
        @overload
        def __init__(self, arg1: object, arg2: object, arg3: bool) -> None: ...
        def GetInheritablePurpose(self, arg1: PurposeInfo) -> object: ...
        def __bool__(self, arg1: PurposeInfo) -> bool: ...
        def __eq__(self, arg1: PurposeInfo, arg2: PurposeInfo) -> object: ...
        def __ne__(self, arg1: PurposeInfo, arg2: PurposeInfo) -> object: ...
        def __reduce__(self) -> Any: ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def ComputeEffectiveVisibility(self, arg1: Imageable, purpose: object = ..., time: TimeCode = ...) -> object: ...
    def ComputeLocalBound(self, arg1: Imageable, time: TimeCode, purpose1: object = ..., purpose2: object = ..., purpose3: object = ..., purpose4: object = ...) -> BBox3d: ...
    def ComputeLocalToWorldTransform(self, arg1: Imageable, time: TimeCode) -> Matrix4d: ...
    def ComputeParentToWorldTransform(self, arg1: Imageable, time: TimeCode) -> Matrix4d: ...
    def ComputeProxyPrim(self, *args, **kwargs) -> Any: ...
    def ComputePurpose(self, arg1: Imageable) -> object: ...
    @overload
    def ComputePurposeInfo(self, arg1: Imageable) -> PurposeInfo: ...
    @overload
    def ComputePurposeInfo(self, arg1: Imageable, parentPurposeInfo: PurposeInfo) -> PurposeInfo: ...
    def ComputeUntransformedBound(self, arg1: Imageable, time: TimeCode, purpose1: object = ..., purpose2: object = ..., purpose3: object = ..., purpose4: object = ...) -> BBox3d: ...
    def ComputeVisibility(self, arg1: Imageable, time: TimeCode = ...) -> object: ...
    def ComputeWorldBound(self, arg1: Imageable, time: TimeCode, purpose1: object = ..., purpose2: object = ..., purpose3: object = ..., purpose4: object = ...) -> BBox3d: ...
    def CreateProxyPrimRel(self, arg1: Imageable) -> Relationship: ...
    def CreatePurposeAttr(self, arg1: Imageable, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVisibilityAttr(self, arg1: Imageable, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> Imageable: ...
    def GetOrderedPurposeTokens(self) -> list: ...
    def GetProxyPrimRel(self, arg1: Imageable) -> Relationship: ...
    def GetPurposeAttr(self, arg1: Imageable) -> Attribute: ...
    def GetPurposeVisibilityAttr(self, arg1: Imageable, purpose: object = ...) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetVisibilityAttr(self, arg1: Imageable) -> Attribute: ...
    def MakeInvisible(self, arg1: Imageable, time: TimeCode = ...) -> None: ...
    def MakeVisible(self, arg1: Imageable, time: TimeCode = ...) -> None: ...
    @overload
    def SetProxyPrim(self, arg1: Imageable, proxy: Prim) -> bool: ...
    @overload
    def SetProxyPrim(self, arg1: Imageable, proxy: SchemaBase) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Imageable) -> object: ...
    def __reduce__(self) -> Any: ...

class LinearUnits(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def centimeters(self) -> Any: ...
    @property
    def feet(self) -> Any: ...
    @property
    def inches(self) -> Any: ...
    @property
    def kilometers(self) -> Any: ...
    @property
    def lightYears(self) -> Any: ...
    @property
    def meters(self) -> Any: ...
    @property
    def micrometers(self) -> Any: ...
    @property
    def miles(self) -> Any: ...
    @property
    def millimeters(self) -> Any: ...
    @property
    def nanometers(self) -> Any: ...
    @property
    def yards(self) -> Any: ...

class Mesh(PointBased):
    SHARPNESS_INFINITE: ClassVar[float] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateCornerIndicesAttr(self, arg1: Mesh, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateCornerSharpnessesAttr(self, arg1: Mesh, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateCreaseIndicesAttr(self, arg1: Mesh, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateCreaseLengthsAttr(self, arg1: Mesh, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateCreaseSharpnessesAttr(self, arg1: Mesh, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateFaceVaryingLinearInterpolationAttr(self, arg1: Mesh, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateFaceVertexCountsAttr(self, arg1: Mesh, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateFaceVertexIndicesAttr(self, arg1: Mesh, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateHoleIndicesAttr(self, arg1: Mesh, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateInterpolateBoundaryAttr(self, arg1: Mesh, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateSubdivisionSchemeAttr(self, arg1: Mesh, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateTriangleSubdivisionRuleAttr(self, arg1: Mesh, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> Mesh: ...
    def Get(self, stage: Stage, path: Path) -> Mesh: ...
    def GetCornerIndicesAttr(self, arg1: Mesh) -> Attribute: ...
    def GetCornerSharpnessesAttr(self, arg1: Mesh) -> Attribute: ...
    def GetCreaseIndicesAttr(self, arg1: Mesh) -> Attribute: ...
    def GetCreaseLengthsAttr(self, arg1: Mesh) -> Attribute: ...
    def GetCreaseSharpnessesAttr(self, arg1: Mesh) -> Attribute: ...
    def GetFaceCount(self, arg1: Mesh, timeCode: TimeCode = ...) -> int: ...
    def GetFaceVaryingLinearInterpolationAttr(self, arg1: Mesh) -> Attribute: ...
    def GetFaceVertexCountsAttr(self, arg1: Mesh) -> Attribute: ...
    def GetFaceVertexIndicesAttr(self, arg1: Mesh) -> Attribute: ...
    def GetHoleIndicesAttr(self, arg1: Mesh) -> Attribute: ...
    def GetInterpolateBoundaryAttr(self, arg1: Mesh) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetSubdivisionSchemeAttr(self, arg1: Mesh) -> Attribute: ...
    def GetTriangleSubdivisionRuleAttr(self, arg1: Mesh) -> Attribute: ...
    def ValidateTopology(self, faceVertexIndices: IntArray, faceVertexCounts: IntArray, numPoints: int) -> tuple: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Mesh) -> object: ...
    def __reduce__(self) -> Any: ...

class ModelAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> ModelAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def ComputeExtentsHint(self, arg1: ModelAPI, bboxCache: BBoxCache) -> Vec3fArray: ...
    def ComputeModelDrawMode(self, arg1: ModelAPI, parentDrawMode: object = ...) -> object: ...
    def CreateConstraintTarget(self, arg1: ModelAPI, arg2: object) -> ConstraintTarget: ...
    def CreateModelApplyDrawModeAttr(self, arg1: ModelAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateModelCardGeometryAttr(self, arg1: ModelAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateModelCardTextureXNegAttr(self, arg1: ModelAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateModelCardTextureXPosAttr(self, arg1: ModelAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateModelCardTextureYNegAttr(self, arg1: ModelAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateModelCardTextureYPosAttr(self, arg1: ModelAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateModelCardTextureZNegAttr(self, arg1: ModelAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateModelCardTextureZPosAttr(self, arg1: ModelAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateModelDrawModeAttr(self, arg1: ModelAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateModelDrawModeColorAttr(self, arg1: ModelAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> ModelAPI: ...
    def GetConstraintTarget(self, arg1: ModelAPI, arg2: object) -> ConstraintTarget: ...
    def GetConstraintTargets(self, arg1: ModelAPI) -> list: ...
    def GetExtentsHint(self, arg1: ModelAPI, time: TimeCode = ...) -> object: ...
    def GetExtentsHintAttr(self, arg1: ModelAPI) -> Attribute: ...
    def GetModelApplyDrawModeAttr(self, arg1: ModelAPI) -> Attribute: ...
    def GetModelCardGeometryAttr(self, arg1: ModelAPI) -> Attribute: ...
    def GetModelCardTextureXNegAttr(self, arg1: ModelAPI) -> Attribute: ...
    def GetModelCardTextureXPosAttr(self, arg1: ModelAPI) -> Attribute: ...
    def GetModelCardTextureYNegAttr(self, arg1: ModelAPI) -> Attribute: ...
    def GetModelCardTextureYPosAttr(self, arg1: ModelAPI) -> Attribute: ...
    def GetModelCardTextureZNegAttr(self, arg1: ModelAPI) -> Attribute: ...
    def GetModelCardTextureZPosAttr(self, arg1: ModelAPI) -> Attribute: ...
    def GetModelDrawModeAttr(self, arg1: ModelAPI) -> Attribute: ...
    def GetModelDrawModeColorAttr(self, arg1: ModelAPI) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def SetExtentsHint(self, arg1: ModelAPI, extents: object, time: TimeCode = ...) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: ModelAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class MotionAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> MotionAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def ComputeMotionBlurScale(self, arg1: MotionAPI, time: TimeCode = ...) -> float: ...
    def ComputeNonlinearSampleCount(self, arg1: MotionAPI, time: TimeCode = ...) -> int: ...
    def ComputeVelocityScale(self, arg1: MotionAPI, time: TimeCode = ...) -> float: ...
    def CreateMotionBlurScaleAttr(self, arg1: MotionAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateNonlinearSampleCountAttr(self, arg1: MotionAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVelocityScaleAttr(self, arg1: MotionAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> MotionAPI: ...
    def GetMotionBlurScaleAttr(self, arg1: MotionAPI) -> Attribute: ...
    def GetNonlinearSampleCountAttr(self, arg1: MotionAPI) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetVelocityScaleAttr(self, arg1: MotionAPI) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: MotionAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class NurbsCurves(Curves):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateKnotsAttr(self, arg1: NurbsCurves, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateOrderAttr(self, arg1: NurbsCurves, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreatePointWeightsAttr(self, arg1: NurbsCurves, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateRangesAttr(self, arg1: NurbsCurves, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> NurbsCurves: ...
    def Get(self, stage: Stage, path: Path) -> NurbsCurves: ...
    def GetKnotsAttr(self, arg1: NurbsCurves) -> Attribute: ...
    def GetOrderAttr(self, arg1: NurbsCurves) -> Attribute: ...
    def GetPointWeightsAttr(self, arg1: NurbsCurves) -> Attribute: ...
    def GetRangesAttr(self, arg1: NurbsCurves) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: NurbsCurves) -> object: ...
    def __reduce__(self) -> Any: ...

class NurbsPatch(PointBased):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreatePointWeightsAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateTrimCurveCountsAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateTrimCurveKnotsAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateTrimCurveOrdersAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateTrimCurvePointsAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateTrimCurveRangesAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateTrimCurveVertexCountsAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateUFormAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateUKnotsAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateUOrderAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateURangeAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateUVertexCountAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVFormAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVKnotsAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVOrderAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVRangeAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVVertexCountAttr(self, arg1: NurbsPatch, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> NurbsPatch: ...
    def Get(self, stage: Stage, path: Path) -> NurbsPatch: ...
    def GetPointWeightsAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetTrimCurveCountsAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetTrimCurveKnotsAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetTrimCurveOrdersAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetTrimCurvePointsAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetTrimCurveRangesAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetTrimCurveVertexCountsAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetUFormAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetUKnotsAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetUOrderAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetURangeAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetUVertexCountAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetVFormAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetVKnotsAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetVOrderAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetVRangeAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def GetVVertexCountAttr(self, arg1: NurbsPatch) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: NurbsPatch) -> object: ...
    def __reduce__(self) -> Any: ...

class Plane(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateAxisAttr(self, arg1: Plane, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateDoubleSidedAttr(self, arg1: Plane, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateExtentAttr(self, arg1: Plane, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateLengthAttr(self, arg1: Plane, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateWidthAttr(self, arg1: Plane, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> Plane: ...
    def Get(self, stage: Stage, path: Path) -> Plane: ...
    def GetAxisAttr(self, arg1: Plane) -> Attribute: ...
    def GetDoubleSidedAttr(self, arg1: Plane) -> Attribute: ...
    def GetExtentAttr(self, arg1: Plane) -> Attribute: ...
    def GetLengthAttr(self, arg1: Plane) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetWidthAttr(self, arg1: Plane) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Plane) -> object: ...
    def __reduce__(self) -> Any: ...

class PointBased(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def ComputeExtent(self, points: object) -> object: ...
    def ComputePointsAtTime(self, arg1: PointBased, time: TimeCode, baseTime: TimeCode) -> Vec3fArray: ...
    def ComputePointsAtTimes(self, arg1: PointBased, times: object, baseTime: TimeCode) -> object: ...
    def CreateAccelerationsAttr(self, arg1: PointBased, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateNormalsAttr(self, arg1: PointBased, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreatePointsAttr(self, arg1: PointBased, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVelocitiesAttr(self, arg1: PointBased, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> PointBased: ...
    def GetAccelerationsAttr(self, arg1: PointBased) -> Attribute: ...
    def GetNormalsAttr(self, arg1: PointBased) -> Attribute: ...
    def GetNormalsInterpolation(self, arg1: PointBased) -> object: ...
    def GetPointsAttr(self, arg1: PointBased) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetVelocitiesAttr(self, arg1: PointBased) -> Attribute: ...
    def SetNormalsInterpolation(self, arg1: PointBased, interpolation: object) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: PointBased) -> object: ...
    def __reduce__(self) -> Any: ...

class PointInstancer(Boundable):
    class MaskApplication(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> object: ...
        def __reduce__(self) -> Any: ...
    class ProtoXformInclusion(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> object: ...
        def __reduce__(self) -> Any: ...
    ApplyMask: ClassVar[MaskApplication] = ...
    ExcludeProtoXform: ClassVar[ProtoXformInclusion] = ...
    IgnoreMask: ClassVar[MaskApplication] = ...
    IncludeProtoXform: ClassVar[ProtoXformInclusion] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def ActivateAllIds(self, arg1: PointInstancer) -> bool: ...
    def ActivateId(self, arg1: PointInstancer, id: int) -> bool: ...
    def ActivateIds(self, arg1: PointInstancer, ids: Int64Array) -> bool: ...
    def ComputeExtentAtTime(self, arg1: PointInstancer, time: TimeCode, baseTime: TimeCode) -> Vec3fArray: ...
    def ComputeExtentAtTimes(self, arg1: PointInstancer, times: object, baseTime: TimeCode) -> object: ...
    def ComputeInstanceTransformsAtTime(self, arg1: PointInstancer, time: TimeCode, baseTime: TimeCode, doProtoXforms: object = ..., applyMask: object = ...) -> Matrix4dArray: ...
    def ComputeInstanceTransformsAtTimes(self, arg1: PointInstancer, times: object, baseTime: TimeCode, doProtoXforms: object = ..., applyMask: object = ...) -> object: ...
    def ComputeMaskAtTime(self, arg1: PointInstancer, time: TimeCode) -> list: ...
    def CreateAccelerationsAttr(self, arg1: PointInstancer, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateAngularVelocitiesAttr(self, arg1: PointInstancer, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateIdsAttr(self, arg1: PointInstancer, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateInvisibleIdsAttr(self, arg1: PointInstancer, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateOrientationsAttr(self, arg1: PointInstancer, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreatePositionsAttr(self, arg1: PointInstancer, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateProtoIndicesAttr(self, arg1: PointInstancer, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreatePrototypesRel(self, arg1: PointInstancer) -> Relationship: ...
    def CreateScalesAttr(self, arg1: PointInstancer, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVelocitiesAttr(self, arg1: PointInstancer, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def DeactivateId(self, arg1: PointInstancer, id: int) -> bool: ...
    def DeactivateIds(self, arg1: PointInstancer, ids: Int64Array) -> bool: ...
    def Define(self, stage: Stage, path: Path) -> PointInstancer: ...
    def Get(self, stage: Stage, path: Path) -> PointInstancer: ...
    def GetAccelerationsAttr(self, arg1: PointInstancer) -> Attribute: ...
    def GetAngularVelocitiesAttr(self, arg1: PointInstancer) -> Attribute: ...
    def GetIdsAttr(self, arg1: PointInstancer) -> Attribute: ...
    def GetInstanceCount(self, arg1: PointInstancer, timeCode: TimeCode = ...) -> int: ...
    def GetInvisibleIdsAttr(self, arg1: PointInstancer) -> Attribute: ...
    def GetOrientationsAttr(self, arg1: PointInstancer) -> Attribute: ...
    def GetPositionsAttr(self, arg1: PointInstancer) -> Attribute: ...
    def GetProtoIndicesAttr(self, arg1: PointInstancer) -> Attribute: ...
    def GetPrototypesRel(self, arg1: PointInstancer) -> Relationship: ...
    def GetScalesAttr(self, arg1: PointInstancer) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetVelocitiesAttr(self, arg1: PointInstancer) -> Attribute: ...
    def InvisId(self, arg1: PointInstancer, id: int, time: TimeCode) -> bool: ...
    def InvisIds(self, arg1: PointInstancer, ids: Int64Array, time: TimeCode) -> bool: ...
    def VisAllIds(self, arg1: PointInstancer, time: TimeCode) -> bool: ...
    def VisId(self, arg1: PointInstancer, id: int, time: TimeCode) -> bool: ...
    def VisIds(self, arg1: PointInstancer, ids: Int64Array, time: TimeCode) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: PointInstancer) -> object: ...
    def __reduce__(self) -> Any: ...

class Points(PointBased):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def ComputeExtent(self, points: object, widths: object) -> object: ...
    def CreateIdsAttr(self, arg1: Points, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateWidthsAttr(self, arg1: Points, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> Points: ...
    def Get(self, stage: Stage, path: Path) -> Points: ...
    def GetIdsAttr(self, arg1: Points) -> Attribute: ...
    def GetPointCount(self, arg1: Points, timeCode: TimeCode = ...) -> int: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetWidthsAttr(self, arg1: Points) -> Attribute: ...
    def GetWidthsInterpolation(self, arg1: Points) -> object: ...
    def SetWidthsInterpolation(self, arg1: Points, interpolation: object) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Points) -> object: ...
    def __reduce__(self) -> Any: ...

class Primvar(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, attr: Attribute) -> None: ...
    def BlockIndices(self, arg1: Primvar) -> None: ...
    def ComputeFlattened(self, arg1: Primvar, time: TimeCode = ...) -> object: ...
    def CreateIndicesAttr(self, arg1: Primvar) -> Attribute: ...
    def Get(self, arg1: Primvar, time: TimeCode = ...) -> object: ...
    def GetAttr(self, arg1: Primvar) -> Attribute: ...
    def GetBaseName(self, arg1: Primvar) -> object: ...
    def GetDeclarationInfo(self, arg1: Primvar) -> tuple: ...
    def GetElementSize(self, arg1: Primvar) -> int: ...
    def GetIndices(self, arg1: Primvar, time: TimeCode = ...) -> IntArray: ...
    def GetIndicesAttr(self, arg1: Primvar) -> Attribute: ...
    def GetInterpolation(self, arg1: Primvar) -> object: ...
    def GetName(self, arg1: Primvar) -> object: ...
    def GetNamespace(self, arg1: Primvar) -> object: ...
    def GetPrimvarName(self, arg1: Primvar) -> object: ...
    def GetTimeSamples(self, arg1: Primvar) -> object: ...
    def GetTimeSamplesInInterval(self, arg1: Primvar, arg2: Interval) -> object: ...
    def GetTypeName(self, arg1: Primvar) -> ValueTypeName: ...
    def GetUnauthoredValuesIndex(self, arg1: Primvar) -> int: ...
    def HasAuthoredElementSize(self, arg1: Primvar) -> bool: ...
    def HasAuthoredInterpolation(self, arg1: Primvar) -> bool: ...
    def HasAuthoredValue(self, arg1: Primvar) -> bool: ...
    def HasValue(self, arg1: Primvar) -> bool: ...
    def IsDefined(self, arg1: Primvar) -> bool: ...
    def IsIdTarget(self, arg1: Primvar) -> bool: ...
    def IsIndexed(self, arg1: Primvar) -> bool: ...
    def IsPrimvar(self, attr: Attribute) -> bool: ...
    def IsValidInterpolation(self, interpolation: object) -> bool: ...
    def IsValidPrimvarName(self, name: object) -> bool: ...
    def NameContainsNamespaces(self, arg1: Primvar) -> bool: ...
    def Set(self, arg1: Primvar, value: object, time: TimeCode = ...) -> bool: ...
    def SetElementSize(self, arg1: Primvar, eltSize: int) -> bool: ...
    def SetIdTarget(self, arg1: Primvar, arg2: Path) -> bool: ...
    def SetIndices(self, arg1: Primvar, indices: IntArray, time: TimeCode = ...) -> bool: ...
    def SetInterpolation(self, arg1: Primvar, interpolation: object) -> bool: ...
    def SetUnauthoredValuesIndex(self, arg1: Primvar, unauthoredValuesIndex: int) -> bool: ...
    def SplitName(self, arg1: Primvar) -> list: ...
    def StripPrimvarsName(self, name: object) -> object: ...
    def ValueMightBeTimeVarying(self, arg1: Primvar) -> bool: ...
    def __bool__(self, arg1: Primvar) -> object: ...
    def __eq__(self, arg1: Primvar, arg2: Primvar) -> object: ...
    def __hash__(self, arg1: Primvar) -> int: ...
    def __ne__(self, arg1: Primvar, arg2: Primvar) -> object: ...
    def __reduce__(self) -> Any: ...

class PrimvarsAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def BlockPrimvar(self, arg1: PrimvarsAPI, name: object) -> None: ...
    def CanContainPropertyName(self, name: object) -> bool: ...
    def CreateIndexedPrimvar(self, arg1: PrimvarsAPI, name: object, typeName: ValueTypeName, value: object, indices: IntArray, interpolation: object = ..., elementSize: int = ..., time: TimeCode = ...) -> Primvar: ...
    def CreateNonIndexedPrimvar(self, arg1: PrimvarsAPI, name: object, typeName: ValueTypeName, value: object, interpolation: object = ..., elementSize: int = ..., time: TimeCode = ...) -> Primvar: ...
    def CreatePrimvar(self, arg1: PrimvarsAPI, name: object, typeName: ValueTypeName, interpolation: object = ..., elementSize: int = ...) -> Primvar: ...
    def FindIncrementallyInheritablePrimvars(self, arg1: PrimvarsAPI, inheritedFromAncestors: object) -> list: ...
    def FindInheritablePrimvars(self, arg1: PrimvarsAPI) -> list: ...
    @overload
    def FindPrimvarWithInheritance(self, arg1: PrimvarsAPI, name: object) -> Primvar: ...
    @overload
    def FindPrimvarWithInheritance(self, arg1: PrimvarsAPI, name: object, inheritedFromAncestors: object) -> Primvar: ...
    @overload
    def FindPrimvarsWithInheritance(self, arg1: PrimvarsAPI) -> list: ...
    @overload
    def FindPrimvarsWithInheritance(self, arg1: PrimvarsAPI, inheritedFromAncestors: object) -> list: ...
    def Get(self, stage: Stage, path: Path) -> PrimvarsAPI: ...
    def GetAuthoredPrimvars(self, arg1: PrimvarsAPI) -> list: ...
    def GetPrimvar(self, arg1: PrimvarsAPI, name: object) -> Primvar: ...
    def GetPrimvars(self, arg1: PrimvarsAPI) -> list: ...
    def GetPrimvarsWithAuthoredValues(self, arg1: PrimvarsAPI) -> list: ...
    def GetPrimvarsWithValues(self, arg1: PrimvarsAPI) -> list: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def HasPossiblyInheritedPrimvar(self, arg1: PrimvarsAPI, name: object) -> bool: ...
    def HasPrimvar(self, arg1: PrimvarsAPI, name: object) -> bool: ...
    def RemovePrimvar(self, arg1: PrimvarsAPI, name: object) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: PrimvarsAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class Scope(Imageable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Define(self, stage: Stage, path: Path) -> Scope: ...
    def Get(self, stage: Stage, path: Path) -> Scope: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Scope) -> object: ...
    def __reduce__(self) -> Any: ...

class Sphere(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateExtentAttr(self, arg1: Sphere, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateRadiusAttr(self, arg1: Sphere, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> Sphere: ...
    def Get(self, stage: Stage, path: Path) -> Sphere: ...
    def GetExtentAttr(self, arg1: Sphere) -> Attribute: ...
    def GetRadiusAttr(self, arg1: Sphere) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Sphere) -> object: ...
    def __reduce__(self) -> Any: ...

class Subset(pxr.Usd.Typed):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateElementTypeAttr(self, arg1: Subset, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateFamilyNameAttr(self, arg1: Subset, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateGeomSubset(self, geom: Imageable, subsetName: object, elementType: object, indices: IntArray, familyName: object = ..., familyType: object = ...) -> Subset: ...
    def CreateIndicesAttr(self, arg1: Subset, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateUniqueGeomSubset(self, geom: Imageable, subsetName: object, elementType: object, indices: IntArray, familyName: object = ..., familyType: object = ...) -> Subset: ...
    def Define(self, stage: Stage, path: Path) -> Subset: ...
    def Get(self, stage: Stage, path: Path) -> Subset: ...
    def GetAllGeomSubsetFamilyNames(self, geom: Imageable) -> list: ...
    def GetAllGeomSubsets(self, geom: Imageable) -> list: ...
    def GetElementTypeAttr(self, arg1: Subset) -> Attribute: ...
    def GetFamilyNameAttr(self, arg1: Subset) -> Attribute: ...
    def GetFamilyType(self, geom: Imageable, familyName: object) -> object: ...
    def GetGeomSubsets(self, geom: Imageable, elementType: object = ..., familyName: object = ...) -> list: ...
    def GetIndicesAttr(self, arg1: Subset) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetUnassignedIndices(self, subsets: object, elementCount: int, time: TimeCode = ...) -> IntArray: ...
    def SetFamilyType(self, geom: Imageable, familyName: object, familyType: object) -> bool: ...
    def ValidateFamily(self, geom: Imageable, elementType: object = ..., familyName: object = ...) -> object: ...
    def ValidateSubsets(self, subsets: object, elementCount: int, familyType: object) -> object: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Subset) -> object: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def BasisCurves(self) -> Any: ...
    @property
    def Boundable(self) -> Any: ...
    @property
    def Camera(self) -> Any: ...
    @property
    def Capsule(self) -> Any: ...
    @property
    def Cone(self) -> Any: ...
    @property
    def Cube(self) -> Any: ...
    @property
    def Curves(self) -> Any: ...
    @property
    def Cylinder(self) -> Any: ...
    @property
    def GeomModelAPI(self) -> Any: ...
    @property
    def GeomSubset(self) -> Any: ...
    @property
    def Gprim(self) -> Any: ...
    @property
    def HermiteCurves(self) -> Any: ...
    @property
    def Imageable(self) -> Any: ...
    @property
    def Mesh(self) -> Any: ...
    @property
    def MotionAPI(self) -> Any: ...
    @property
    def NurbsCurves(self) -> Any: ...
    @property
    def NurbsPatch(self) -> Any: ...
    @property
    def Plane(self) -> Any: ...
    @property
    def PointBased(self) -> Any: ...
    @property
    def PointInstancer(self) -> Any: ...
    @property
    def Points(self) -> Any: ...
    @property
    def PrimvarsAPI(self) -> Any: ...
    @property
    def Scope(self) -> Any: ...
    @property
    def Sphere(self) -> Any: ...
    @property
    def VisibilityAPI(self) -> Any: ...
    @property
    def Xform(self) -> Any: ...
    @property
    def XformCommonAPI(self) -> Any: ...
    @property
    def Xformable(self) -> Any: ...
    @property
    def accelerations(self) -> Any: ...
    @property
    def all(self) -> Any: ...
    @property
    def angularVelocities(self) -> Any: ...
    @property
    def axis(self) -> Any: ...
    @property
    def basis(self) -> Any: ...
    @property
    def bezier(self) -> Any: ...
    @property
    def bilinear(self) -> Any: ...
    @property
    def boundaries(self) -> Any: ...
    @property
    def bounds(self) -> Any: ...
    @property
    def box(self) -> Any: ...
    @property
    def bspline(self) -> Any: ...
    @property
    def cards(self) -> Any: ...
    @property
    def catmullClark(self) -> Any: ...
    @property
    def catmullRom(self) -> Any: ...
    @property
    def clippingPlanes(self) -> Any: ...
    @property
    def clippingRange(self) -> Any: ...
    @property
    def closed(self) -> Any: ...
    @property
    def constant(self) -> Any: ...
    @property
    def cornerIndices(self) -> Any: ...
    @property
    def cornerSharpnesses(self) -> Any: ...
    @property
    def cornersOnly(self) -> Any: ...
    @property
    def cornersPlus1(self) -> Any: ...
    @property
    def cornersPlus2(self) -> Any: ...
    @property
    def creaseIndices(self) -> Any: ...
    @property
    def creaseLengths(self) -> Any: ...
    @property
    def creaseSharpnesses(self) -> Any: ...
    @property
    def cross(self) -> Any: ...
    @property
    def cubic(self) -> Any: ...
    @property
    def curveVertexCounts(self) -> Any: ...
    @property
    def default_(self) -> Any: ...
    @property
    def doubleSided(self) -> Any: ...
    @property
    def edgeAndCorner(self) -> Any: ...
    @property
    def edgeOnly(self) -> Any: ...
    @property
    def elementSize(self) -> Any: ...
    @property
    def elementType(self) -> Any: ...
    @property
    def exposure(self) -> Any: ...
    @property
    def extent(self) -> Any: ...
    @property
    def extentsHint(self) -> Any: ...
    @property
    def fStop(self) -> Any: ...
    @property
    def face(self) -> Any: ...
    @property
    def faceVarying(self) -> Any: ...
    @property
    def faceVaryingLinearInterpolation(self) -> Any: ...
    @property
    def faceVertexCounts(self) -> Any: ...
    @property
    def faceVertexIndices(self) -> Any: ...
    @property
    def familyName(self) -> Any: ...
    @property
    def focalLength(self) -> Any: ...
    @property
    def focusDistance(self) -> Any: ...
    @property
    def fromTexture(self) -> Any: ...
    @property
    def guide(self) -> Any: ...
    @property
    def guideVisibility(self) -> Any: ...
    @property
    def height(self) -> Any: ...
    @property
    def hermite(self) -> Any: ...
    @property
    def holeIndices(self) -> Any: ...
    @property
    def horizontalAperture(self) -> Any: ...
    @property
    def horizontalApertureOffset(self) -> Any: ...
    @property
    def ids(self) -> Any: ...
    @property
    def inactiveIds(self) -> Any: ...
    @property
    def indices(self) -> Any: ...
    @property
    def inherited(self) -> Any: ...
    @property
    def interpolateBoundary(self) -> Any: ...
    @property
    def interpolation(self) -> Any: ...
    @property
    def invisible(self) -> Any: ...
    @property
    def invisibleIds(self) -> Any: ...
    @property
    def knots(self) -> Any: ...
    @property
    def left(self) -> Any: ...
    @property
    def leftHanded(self) -> Any: ...
    @property
    def length(self) -> Any: ...
    @property
    def linear(self) -> Any: ...
    @property
    def loop(self) -> Any: ...
    @property
    def metersPerUnit(self) -> Any: ...
    @property
    def modelApplyDrawMode(self) -> Any: ...
    @property
    def modelCardGeometry(self) -> Any: ...
    @property
    def modelCardTextureXNeg(self) -> Any: ...
    @property
    def modelCardTextureXPos(self) -> Any: ...
    @property
    def modelCardTextureYNeg(self) -> Any: ...
    @property
    def modelCardTextureYPos(self) -> Any: ...
    @property
    def modelCardTextureZNeg(self) -> Any: ...
    @property
    def modelCardTextureZPos(self) -> Any: ...
    @property
    def modelDrawMode(self) -> Any: ...
    @property
    def modelDrawModeColor(self) -> Any: ...
    @property
    def mono(self) -> Any: ...
    @property
    def motionBlurScale(self) -> Any: ...
    @property
    def motionNonlinearSampleCount(self) -> Any: ...
    @property
    def motionVelocityScale(self) -> Any: ...
    @property
    def nonOverlapping(self) -> Any: ...
    @property
    def none(self) -> Any: ...
    @property
    def nonperiodic(self) -> Any: ...
    @property
    def normals(self) -> Any: ...
    @property
    def open(self) -> Any: ...
    @property
    def order(self) -> Any: ...
    @property
    def orientation(self) -> Any: ...
    @property
    def orientations(self) -> Any: ...
    @property
    def origin(self) -> Any: ...
    @property
    def orthographic(self) -> Any: ...
    @property
    def partition(self) -> Any: ...
    @property
    def periodic(self) -> Any: ...
    @property
    def perspective(self) -> Any: ...
    @property
    def pinned(self) -> Any: ...
    @property
    def pivot(self) -> Any: ...
    @property
    def pointWeights(self) -> Any: ...
    @property
    def points(self) -> Any: ...
    @property
    def positions(self) -> Any: ...
    @property
    def power(self) -> Any: ...
    @property
    def primvarsDisplayColor(self) -> Any: ...
    @property
    def primvarsDisplayOpacity(self) -> Any: ...
    @property
    def projection(self) -> Any: ...
    @property
    def protoIndices(self) -> Any: ...
    @property
    def prototypes(self) -> Any: ...
    @property
    def proxy(self) -> Any: ...
    @property
    def proxyPrim(self) -> Any: ...
    @property
    def proxyVisibility(self) -> Any: ...
    @property
    def purpose(self) -> Any: ...
    @property
    def radius(self) -> Any: ...
    @property
    def ranges(self) -> Any: ...
    @property
    def render(self) -> Any: ...
    @property
    def renderVisibility(self) -> Any: ...
    @property
    def right(self) -> Any: ...
    @property
    def rightHanded(self) -> Any: ...
    @property
    def scales(self) -> Any: ...
    @property
    def shutterClose(self) -> Any: ...
    @property
    def shutterOpen(self) -> Any: ...
    @property
    def size(self) -> Any: ...
    @property
    def smooth(self) -> Any: ...
    @property
    def stereoRole(self) -> Any: ...
    @property
    def subdivisionScheme(self) -> Any: ...
    @property
    def tangents(self) -> Any: ...
    @property
    def triangleSubdivisionRule(self) -> Any: ...
    @property
    def trimCurveCounts(self) -> Any: ...
    @property
    def trimCurveKnots(self) -> Any: ...
    @property
    def trimCurveOrders(self) -> Any: ...
    @property
    def trimCurvePoints(self) -> Any: ...
    @property
    def trimCurveRanges(self) -> Any: ...
    @property
    def trimCurveVertexCounts(self) -> Any: ...
    @property
    def type(self) -> Any: ...
    @property
    def uForm(self) -> Any: ...
    @property
    def uKnots(self) -> Any: ...
    @property
    def uOrder(self) -> Any: ...
    @property
    def uRange(self) -> Any: ...
    @property
    def uVertexCount(self) -> Any: ...
    @property
    def unauthoredValuesIndex(self) -> Any: ...
    @property
    def uniform(self) -> Any: ...
    @property
    def unrestricted(self) -> Any: ...
    @property
    def upAxis(self) -> Any: ...
    @property
    def vForm(self) -> Any: ...
    @property
    def vKnots(self) -> Any: ...
    @property
    def vOrder(self) -> Any: ...
    @property
    def vRange(self) -> Any: ...
    @property
    def vVertexCount(self) -> Any: ...
    @property
    def varying(self) -> Any: ...
    @property
    def velocities(self) -> Any: ...
    @property
    def vertex(self) -> Any: ...
    @property
    def verticalAperture(self) -> Any: ...
    @property
    def verticalApertureOffset(self) -> Any: ...
    @property
    def visibility(self) -> Any: ...
    @property
    def visible(self) -> Any: ...
    @property
    def width(self) -> Any: ...
    @property
    def widths(self) -> Any: ...
    @property
    def wrap(self) -> Any: ...
    @property
    def x(self) -> Any: ...
    @property
    def xformOpOrder(self) -> Any: ...
    @property
    def y(self) -> Any: ...
    @property
    def z(self) -> Any: ...

class VisibilityAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> VisibilityAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def CreateGuideVisibilityAttr(self, arg1: VisibilityAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateProxyVisibilityAttr(self, arg1: VisibilityAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateRenderVisibilityAttr(self, arg1: VisibilityAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> VisibilityAPI: ...
    def GetGuideVisibilityAttr(self, arg1: VisibilityAPI) -> Attribute: ...
    def GetProxyVisibilityAttr(self, arg1: VisibilityAPI) -> Attribute: ...
    def GetPurposeVisibilityAttr(self, arg1: VisibilityAPI, purpose: object) -> Attribute: ...
    def GetRenderVisibilityAttr(self, arg1: VisibilityAPI) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: VisibilityAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class Xform(Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Define(self, stage: Stage, path: Path) -> Xform: ...
    def Get(self, stage: Stage, path: Path) -> Xform: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Xform) -> object: ...
    def __reduce__(self) -> Any: ...

class XformCache(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, time: TimeCode) -> None: ...
    def Clear(self, arg1: XformCache) -> None: ...
    def ComputeRelativeTransform(self, arg1: XformCache, prim: Prim, ancestor: Prim) -> tuple: ...
    def GetLocalToWorldTransform(self, arg1: XformCache, prim: Prim) -> Matrix4d: ...
    def GetLocalTransformation(self, arg1: XformCache, prim: Prim) -> tuple: ...
    def GetParentToWorldTransform(self, arg1: XformCache, prim: Prim) -> Matrix4d: ...
    def GetTime(self, arg1: XformCache) -> TimeCode: ...
    def SetTime(self, arg1: XformCache, time: TimeCode) -> None: ...
    def Swap(self, arg1: XformCache, other: XformCache) -> None: ...
    def __reduce__(self) -> Any: ...

class XformCommonAPI(pxr.Usd.APISchemaBase):
    class OpFlags(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> object: ...
        def __reduce__(self) -> Any: ...
    class RotationOrder(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> object: ...
        def __reduce__(self) -> Any: ...
    OpPivot: ClassVar[OpFlags] = ...
    OpRotate: ClassVar[OpFlags] = ...
    OpScale: ClassVar[OpFlags] = ...
    OpTranslate: ClassVar[OpFlags] = ...
    RotationOrderXYZ: ClassVar[RotationOrder] = ...
    RotationOrderXZY: ClassVar[RotationOrder] = ...
    RotationOrderYXZ: ClassVar[RotationOrder] = ...
    RotationOrderYZX: ClassVar[RotationOrder] = ...
    RotationOrderZXY: ClassVar[RotationOrder] = ...
    RotationOrderZYX: ClassVar[RotationOrder] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CanConvertOpTypeToRotationOrder(self, opType: object) -> bool: ...
    def ConvertOpTypeToRotationOrder(self, opType: object) -> object: ...
    def ConvertRotationOrderToOpType(self, rotationOrder: object) -> object: ...
    @overload
    def CreateXformOps(self, arg1: XformCommonAPI, rotationOrder: object, op1: object = ..., op2: object = ..., op3: object = ..., op4: object = ...) -> tuple: ...
    @overload
    def CreateXformOps(self, arg1: XformCommonAPI, op1: object = ..., op2: object = ..., op3: object = ..., op4: object = ...) -> tuple: ...
    def Get(self, stage: Stage, path: Path) -> XformCommonAPI: ...
    def GetResetXformStack(self, arg1: XformCommonAPI) -> bool: ...
    def GetRotationTransform(self, rotation: Vec3f, rotationOrder: object) -> Matrix4d: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetXformVectors(self, arg1: XformCommonAPI, time: TimeCode) -> tuple: ...
    def GetXformVectorsByAccumulation(self, arg1: XformCommonAPI, time: TimeCode) -> tuple: ...
    def SetPivot(self, arg1: XformCommonAPI, pivot: Vec3f, time: TimeCode = ...) -> bool: ...
    def SetResetXformStack(self, arg1: XformCommonAPI, resetXformStack: bool) -> bool: ...
    def SetRotate(self, arg1: XformCommonAPI, rotation: Vec3f, rotationOrder: object = ..., time: TimeCode = ...) -> bool: ...
    def SetScale(self, arg1: XformCommonAPI, scale: Vec3f, time: TimeCode = ...) -> bool: ...
    def SetTranslate(self, arg1: XformCommonAPI, translation: Vec3d, time: TimeCode = ...) -> bool: ...
    def SetXformVectors(self, arg1: XformCommonAPI, translation: Vec3d, rotation: Vec3f, scale: Vec3f, pivot: Vec3f, rotationOrder: object, time: TimeCode) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: XformCommonAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class XformOp(Boost.Python.instance):
    class Precision(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> object: ...
        def __reduce__(self) -> Any: ...
    class Type(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> object: ...
        def __reduce__(self) -> Any: ...
    PrecisionDouble: ClassVar[Precision] = ...
    PrecisionFloat: ClassVar[Precision] = ...
    PrecisionHalf: ClassVar[Precision] = ...
    TypeInvalid: ClassVar[Type] = ...
    TypeOrient: ClassVar[Type] = ...
    TypeRotateX: ClassVar[Type] = ...
    TypeRotateXYZ: ClassVar[Type] = ...
    TypeRotateXZY: ClassVar[Type] = ...
    TypeRotateY: ClassVar[Type] = ...
    TypeRotateYXZ: ClassVar[Type] = ...
    TypeRotateYZX: ClassVar[Type] = ...
    TypeRotateZ: ClassVar[Type] = ...
    TypeRotateZXY: ClassVar[Type] = ...
    TypeRotateZYX: ClassVar[Type] = ...
    TypeScale: ClassVar[Type] = ...
    TypeTransform: ClassVar[Type] = ...
    TypeTranslate: ClassVar[Type] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, attr: Attribute, isInverseOp: bool = ...) -> None: ...
    def Get(self, arg1: XformOp, time: TimeCode = ...) -> object: ...
    def GetAttr(self, arg1: XformOp) -> Attribute: ...
    def GetBaseName(self, arg1: XformOp) -> object: ...
    def GetName(self, arg1: XformOp) -> object: ...
    def GetNamespace(self, arg1: XformOp) -> object: ...
    def GetNumTimeSamples(self, arg1: XformOp) -> int: ...
    def GetOpName(self, arg1: XformOp) -> object: ...
    def GetOpTransform(self, arg1: XformOp, arg2: TimeCode) -> Matrix4d: ...
    def GetOpType(self, arg1: XformOp) -> object: ...
    def GetOpTypeEnum(self, arg1: object) -> object: ...
    def GetOpTypeToken(self, arg1: object) -> object: ...
    def GetPrecision(self, arg1: XformOp) -> object: ...
    def GetTimeSamples(self, arg1: XformOp) -> list: ...
    def GetTimeSamplesInInterval(self, arg1: XformOp, arg2: Interval) -> list: ...
    def GetTypeName(self, arg1: XformOp) -> ValueTypeName: ...
    def IsDefined(self, arg1: XformOp) -> bool: ...
    def IsInverseOp(self, arg1: XformOp) -> bool: ...
    def MightBeTimeVarying(self, arg1: XformOp) -> bool: ...
    def Set(self, arg1: XformOp, value: object, time: TimeCode = ...) -> bool: ...
    def SplitName(self, arg1: XformOp) -> list: ...
    def __bool__(self, arg1: XformOp) -> object: ...
    def __eq__(self, arg1: XformOp, arg2: XformOp) -> object: ...
    def __ne__(self, arg1: XformOp, arg2: XformOp) -> object: ...
    def __reduce__(self) -> Any: ...

class XformOpTypes(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def orient(self) -> Any: ...
    @property
    def resetXformStack(self) -> Any: ...
    @property
    def rotateX(self) -> Any: ...
    @property
    def rotateXYZ(self) -> Any: ...
    @property
    def rotateXZY(self) -> Any: ...
    @property
    def rotateY(self) -> Any: ...
    @property
    def rotateYXZ(self) -> Any: ...
    @property
    def rotateYZX(self) -> Any: ...
    @property
    def rotateZ(self) -> Any: ...
    @property
    def rotateZXY(self) -> Any: ...
    @property
    def rotateZYX(self) -> Any: ...
    @property
    def scale(self) -> Any: ...
    @property
    def transform(self) -> Any: ...
    @property
    def translate(self) -> Any: ...

class Xformable(Imageable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def AddOrientOp(self, arg1: Xformable, precision: object = ..., opSuffix: object = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateXOp(self, arg1: Xformable, precision: object = ..., opSuffix: object = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateXYZOp(self, arg1: Xformable, precision: object = ..., opSuffix: object = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateXZYOp(self, arg1: Xformable, precision: object = ..., opSuffix: object = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateYOp(self, arg1: Xformable, precision: object = ..., opSuffix: object = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateYXZOp(self, arg1: Xformable, precision: object = ..., opSuffix: object = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateYZXOp(self, arg1: Xformable, precision: object = ..., opSuffix: object = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateZOp(self, arg1: Xformable, precision: object = ..., opSuffix: object = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateZXYOp(self, arg1: Xformable, precision: object = ..., opSuffix: object = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateZYXOp(self, arg1: Xformable, precision: object = ..., opSuffix: object = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddScaleOp(self, arg1: Xformable, precision: object = ..., opSuffix: object = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddTransformOp(self, arg1: Xformable, precision: object = ..., opSuffix: object = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddTranslateOp(self, arg1: Xformable, precision: object = ..., opSuffix: object = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddXformOp(self, arg1: Xformable, opType: object, precision: object = ..., opSuffix: object = ..., isInverseOp: bool = ...) -> XformOp: ...
    def ClearXformOpOrder(self, arg1: Xformable) -> bool: ...
    def CreateXformOpOrderAttr(self, arg1: Xformable, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> Xformable: ...
    def GetLocalTransformation(self, *args, **kwargs) -> Any: ...
    def GetOrderedXformOps(self, *args, **kwargs) -> Any: ...
    def GetResetXformStack(self, arg1: Xformable) -> bool: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetTimeSamples(self, arg1: Xformable) -> list: ...
    def GetTimeSamplesInInterval(self, arg1: Xformable, arg2: Interval) -> list: ...
    def GetXformOpOrderAttr(self, arg1: Xformable) -> Attribute: ...
    def IsTransformationAffectedByAttrNamed(self, arg1: object) -> bool: ...
    def MakeMatrixXform(self, arg1: Xformable) -> XformOp: ...
    def SetResetXformStack(self, arg1: Xformable, resetXform: bool) -> bool: ...
    def SetXformOpOrder(self, arg1: Xformable, orderedXformOps: object, resetXformStack: bool = ...) -> bool: ...
    @overload
    def TransformMightBeTimeVarying(self, arg1: Xformable) -> bool: ...
    @overload
    def TransformMightBeTimeVarying(self, arg1: Xformable, arg2: object) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Xformable) -> object: ...
    def __reduce__(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg1: object, arg2: bool, arg3: object) -> None: ...
    def __bool__(self, arg1: _CanApplyResult) -> bool: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __getitem__(self, arg1: _CanApplyResult, arg2: int) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...

def GetFallbackUpAxis() -> object: ...
def GetStageMetersPerUnit(stage: Stage) -> float: ...
def GetStageUpAxis(stage: Stage) -> object: ...
def LinearUnitsAre(authoredUnits: float, standardUnits: float, epsilon: float = ...) -> bool: ...
def SetStageMetersPerUnit(stage: Stage, metersPerUnit: float) -> bool: ...
def SetStageUpAxis(stage: Stage, upAxis: object) -> bool: ...
def StageHasAuthoredMetersPerUnit(stage: Stage) -> bool: ...