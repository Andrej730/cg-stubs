import Boost.Python
import pxr.Gf
from typing import Any, ClassVar, overload

class AnimMapper(Boost.Python.instance):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    @overload
    def __init__(self, sourceOrder: TokenArray, targetOrder: TokenArray) -> None: ...
    def IsIdentity(self) -> bool: ...
    def IsNull(self) -> bool: ...
    def IsSparse(self) -> bool: ...
    def Remap(self, source: object, target: object = ..., elementSize: int = ..., defaultValue: object = ...) -> Any: ...
    @overload
    def RemapTransforms(self, source: Matrix4dArray, target: Matrix4dArray, elementSize: int = ...) -> Matrix4dArray: ...
    @overload
    def RemapTransforms(self, source: Matrix4fArray, target: Matrix4fArray, elementSize: int = ...) -> Matrix4fArray: ...
    def __len__(self) -> int: ...
    def __reduce__(self) -> Any: ...

class AnimQuery(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def BlendShapeWeightsMightBeTimeVarying(self) -> bool: ...
    def ComputeBlendShapeWeights(self, time: TimeCode = ...) -> FloatArray: ...
    def ComputeJointLocalTransformComponents(self, time: TimeCode = ...) -> tuple: ...
    def ComputeJointLocalTransforms(self, time: TimeCode = ...) -> Matrix4dArray: ...
    def GetBlendShapeOrder(self) -> TokenArray: ...
    def GetBlendShapeWeightTimeSamples(self) -> bool: ...
    def GetBlendShapeWeightTimeSamplesInInterval(self, interval: pxr.Gf.Interval) -> bool: ...
    def GetJointOrder(self) -> TokenArray: ...
    def GetJointTransformTimeSamples(self) -> bool: ...
    def GetJointTransformTimeSamplesInInterval(self, interval: pxr.Gf.Interval) -> bool: ...
    def GetPrim(self) -> pxr.Usd.Prim: ...
    def JointTransformsMightBeTimeVarying(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class Animation(pxr.Usd.Typed):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    def CreateBlendShapeWeightsAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateBlendShapesAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateJointsAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRotationsAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateScalesAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTranslationsAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> Animation: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> Animation: ...
    def GetBlendShapeWeightsAttr(self) -> pxr.Usd.Attribute: ...
    def GetBlendShapesAttr(self) -> pxr.Usd.Attribute: ...
    def GetJointsAttr(self) -> pxr.Usd.Attribute: ...
    def GetRotationsAttr(self) -> pxr.Usd.Attribute: ...
    def GetScalesAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetTransforms(self, time: TimeCode = ...) -> Matrix4dArray: ...
    def GetTranslationsAttr(self) -> pxr.Usd.Attribute: ...
    def SetTransforms(self, xforms: Matrix4dArray, time: TimeCode = ...) -> bool: ...
    @classmethod
    def _GetStaticTfType(cls) -> Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class Binding(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: Skeleton, arg3: list) -> None: ...
    def GetSkeleton(self) -> Skeleton: ...
    def GetSkinningTargets(self) -> list: ...
    def __reduce__(self) -> Any: ...

class BindingAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> BindingAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def CreateAnimationSourceRel(self) -> pxr.Usd.Relationship: ...
    def CreateBlendShapeTargetsRel(self) -> pxr.Usd.Relationship: ...
    def CreateBlendShapesAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateGeomBindTransformAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateJointIndicesAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateJointIndicesPrimvar(self, constant: bool, elementSize: int = ...) -> pxr.UsdGeom.Primvar: ...
    def CreateJointWeightsAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateJointWeightsPrimvar(self, constant: bool, elementSize: int = ...) -> pxr.UsdGeom.Primvar: ...
    def CreateJointsAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateSkeletonRel(self) -> pxr.Usd.Relationship: ...
    def CreateSkinningMethodAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> BindingAPI: ...
    def GetAnimationSource(self) -> bool: ...
    def GetAnimationSourceRel(self) -> pxr.Usd.Relationship: ...
    def GetBlendShapeTargetsRel(self) -> pxr.Usd.Relationship: ...
    def GetBlendShapesAttr(self) -> pxr.Usd.Attribute: ...
    def GetGeomBindTransformAttr(self) -> pxr.Usd.Attribute: ...
    def GetInheritedAnimationSource(self) -> pxr.Usd.Prim: ...
    def GetInheritedSkeleton(self) -> Skeleton: ...
    def GetJointIndicesAttr(self) -> pxr.Usd.Attribute: ...
    def GetJointIndicesPrimvar(self) -> pxr.UsdGeom.Primvar: ...
    def GetJointWeightsAttr(self) -> pxr.Usd.Attribute: ...
    def GetJointWeightsPrimvar(self) -> pxr.UsdGeom.Primvar: ...
    def GetJointsAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetSkeleton(self) -> bool: ...
    def GetSkeletonRel(self) -> pxr.Usd.Relationship: ...
    def GetSkinningMethodAttr(self) -> pxr.Usd.Attribute: ...
    def SetRigidJointInfluence(self, jointIndex: int, weight: float = ...) -> bool: ...
    @classmethod
    def ValidateJointIndices(cls, jointIndices: IntArray, numJoints: int) -> tuple: ...
    @classmethod
    def _GetStaticTfType(cls) -> Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class BlendShape(pxr.Usd.Typed):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    def CreateInbetween(self, name: str) -> InbetweenShape: ...
    def CreateNormalOffsetsAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateOffsetsAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreatePointIndicesAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> BlendShape: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> BlendShape: ...
    def GetAuthoredInbetweens(self) -> list[InbetweenShape]: ...
    def GetInbetween(self, name: str) -> InbetweenShape: ...
    def GetInbetweens(self) -> list[InbetweenShape]: ...
    def GetNormalOffsetsAttr(self) -> pxr.Usd.Attribute: ...
    def GetOffsetsAttr(self) -> pxr.Usd.Attribute: ...
    def GetPointIndicesAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def HasInbetween(self, name: str) -> bool: ...
    @classmethod
    def ValidatePointIndices(cls, pointIndices: IntArray, numPoints: int) -> tuple: ...
    @classmethod
    def _GetStaticTfType(cls) -> Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class BlendShapeQuery(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: BindingAPI) -> None: ...
    def ComputeBlendShapePointIndices(self) -> list[pxr.Vt.IntArray]: ...
    def ComputeDeformedPoints(self, subShapeWeights: FloatArray, blendShapeIndices: UIntArray, subShapeIndices: UIntArray, blendShapePointIndices: list[pxr.Vt.IntArray], subShapePointOffset: list[pxr.Vt.Vec3fArray], points: Vec3fArray) -> bool: ...
    def ComputeSubShapePointOffsets(self) -> list[pxr.Vt.Vec3fArray]: ...
    def ComputeSubShapeWeights(self, arg2: FloatArray) -> tuple: ...
    def GetBlendShape(self, arg2: int) -> BlendShape: ...
    def GetBlendShapeIndex(self, arg2: int) -> int: ...
    def GetInbetween(self, arg2: int) -> InbetweenShape: ...
    def GetNumBlendShapes(self) -> int: ...
    def GetNumSubShapes(self) -> int: ...
    def __reduce__(self) -> Any: ...

class Cache(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def Clear(self) -> None: ...
    def ComputeSkelBinding(self, skelRoot: Root, skel: Skeleton, predicate: _PrimFlagsPredicate) -> Binding: ...
    def ComputeSkelBindings(self, skelRoot: Root, predicate: _PrimFlagsPredicate) -> list: ...
    @overload
    def GetAnimQuery(self, anim: Animation) -> AnimQuery: ...
    @overload
    def GetAnimQuery(self, prim: pxr.Usd.Prim) -> AnimQuery: ...
    def GetSkelQuery(self, arg2: Skeleton) -> SkeletonQuery: ...
    def GetSkinningQuery(self, arg2: pxr.Usd.Prim) -> SkinningQuery: ...
    def Populate(self, skelRoot: Root, predicate: _PrimFlagsPredicate) -> bool: ...
    def __reduce__(self) -> Any: ...

class InbetweenShape(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, attr: pxr.Usd.Attribute) -> None: ...
    def CreateNormalOffsetsAttr(self, arg2: pxr.Vt.Value) -> pxr.Usd.Attribute: ...
    def GetAttr(self) -> pxr.Usd.Attribute: ...
    def GetNormalOffsets(self) -> Vec3fArray: ...
    def GetNormalOffsetsAttr(self) -> pxr.Usd.Attribute: ...
    def GetOffsets(self) -> Vec3fArray: ...
    def GetWeight(self) -> bool: ...
    def HasAuthoredWeight(self) -> bool: ...
    def IsDefined(self) -> bool: ...
    @classmethod
    def IsInbetween(cls, attr: pxr.Usd.Attribute) -> bool: ...
    def SetNormalOffsets(self, offsets: pxr.Vt.Vec3fArray) -> bool: ...
    def SetOffsets(self, offsets: pxr.Vt.Vec3fArray) -> bool: ...
    def SetWeight(self, weight: float) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class PackedJointAnimation(Animation):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> PackedJointAnimation: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> PackedJointAnimation: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class Root(pxr.UsdGeom.Boundable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> Root: ...
    @classmethod
    def Find(cls, arg1: pxr.Usd.Prim) -> Root: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> Root: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class Skeleton(pxr.UsdGeom.Boundable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    def CreateBindTransformsAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateJointNamesAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateJointsAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRestTransformsAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> Skeleton: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> Skeleton: ...
    def GetBindTransformsAttr(self) -> pxr.Usd.Attribute: ...
    def GetJointNamesAttr(self) -> pxr.Usd.Attribute: ...
    def GetJointsAttr(self) -> pxr.Usd.Attribute: ...
    def GetRestTransformsAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class SkeletonQuery(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def ComputeJointLocalTransforms(self, time: TimeCode = ..., atRest: bool = ...) -> Matrix4dArray: ...
    def ComputeJointRestRelativeTransforms(self, time: TimeCode = ...) -> Matrix4dArray: ...
    def ComputeJointSkelTransforms(self, time: TimeCode = ..., atRest: bool = ...) -> Matrix4dArray: ...
    def ComputeJointWorldTransforms(self, time: pxr.UsdGeom.XformCache = ..., atRest: bool = ...) -> Matrix4dArray: ...
    def ComputeSkinningTransforms(self, time: TimeCode = ...) -> Matrix4dArray: ...
    def GetAnimQuery(self) -> AnimQuery: ...
    def GetJointOrder(self) -> TokenArray: ...
    def GetJointWorldBindTransforms(self) -> Matrix4dArray: ...
    def GetMapper(self) -> AnimMapper: ...
    def GetPrim(self) -> pxr.Usd.Prim: ...
    def GetSkeleton(self) -> Skeleton: ...
    def GetTopology(self) -> Topology: ...
    def HasBindPose(self) -> bool: ...
    def HasRestPose(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class SkinningQuery(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    @overload
    def ComputeExtentsPadding(self, skelRestXforms: SkinningQuery, boundable: Matrix4dArray, time: pxr.UsdGeom.Boundable = ...) -> float: ...
    @overload
    def ComputeExtentsPadding(self, skelRestXforms: SkinningQuery, boundable: Matrix4fArray, time: pxr.UsdGeom.Boundable = ...) -> float: ...
    def ComputeJointInfluences(self, time: TimeCode = ...) -> bool: ...
    @overload
    def ComputeSkinnedPoints(self, xforms: Matrix4dArray, points: Vec3fArray, time: TimeCode = ...) -> bool: ...
    @overload
    def ComputeSkinnedPoints(self, xforms: Matrix4fArray, points: Vec3fArray, time: TimeCode = ...) -> bool: ...
    @overload
    def ComputeSkinnedTransform(self, xforms: Matrix4dArray, time: TimeCode = ...) -> pxr.Gf.Matrix4d: ...
    @overload
    def ComputeSkinnedTransform(self, xforms: Matrix4fArray, time: TimeCode = ...) -> pxr.Gf.Matrix4f: ...
    def ComputeVaryingJointInfluences(self, numPoints: int, time: TimeCode = ...) -> bool: ...
    def GetBlendShapeMapper(self) -> AnimMapper: ...
    def GetBlendShapeOrder(self) -> bool: ...
    def GetBlendShapeTargetsRel(self) -> pxr.Usd.Relationship: ...
    def GetBlendShapesAttr(self) -> pxr.Usd.Attribute: ...
    def GetGeomBindTransform(self, time: TimeCode = ...) -> pxr.Gf.Matrix4d: ...
    def GetGeomBindTransformAttr(self) -> pxr.Usd.Attribute: ...
    def GetInterpolation(self) -> str: ...
    def GetJointIndicesPrimvar(self) -> pxr.UsdGeom.Primvar: ...
    def GetJointMapper(self) -> AnimMapper: ...
    def GetJointOrder(self) -> bool: ...
    def GetJointWeightsPrimvar(self) -> pxr.UsdGeom.Primvar: ...
    def GetMapper(self) -> AnimMapper: ...
    def GetNumInfluencesPerComponent(self) -> int: ...
    def GetPrim(self) -> pxr.Usd.Prim: ...
    def GetSkinningMethod(self) -> str: ...
    def GetSkinningMethodAttr(self) -> pxr.Usd.Attribute: ...
    def GetTimeSamples(self) -> bool: ...
    def GetTimeSamplesInInterval(self, arg2: pxr.Gf.Interval) -> bool: ...
    def HasBlendShapes(self) -> bool: ...
    def HasJointInfluences(self) -> bool: ...
    def IsRigidlyDeformed(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def BlendShape(self) -> Any: ...
    @property
    def PackedJointAnimation(self) -> Any: ...
    @property
    def SkelAnimation(self) -> Any: ...
    @property
    def SkelBindingAPI(self) -> Any: ...
    @property
    def SkelRoot(self) -> Any: ...
    @property
    def Skeleton(self) -> Any: ...
    @property
    def bindTransforms(self) -> Any: ...
    @property
    def blendShapeWeights(self) -> Any: ...
    @property
    def blendShapes(self) -> Any: ...
    @property
    def classicLinear(self) -> Any: ...
    @property
    def dualQuaternion(self) -> Any: ...
    @property
    def jointNames(self) -> Any: ...
    @property
    def joints(self) -> Any: ...
    @property
    def normalOffsets(self) -> Any: ...
    @property
    def offsets(self) -> Any: ...
    @property
    def pointIndices(self) -> Any: ...
    @property
    def primvarsSkelGeomBindTransform(self) -> Any: ...
    @property
    def primvarsSkelJointIndices(self) -> Any: ...
    @property
    def primvarsSkelJointWeights(self) -> Any: ...
    @property
    def primvarsSkelSkinningMethod(self) -> Any: ...
    @property
    def restTransforms(self) -> Any: ...
    @property
    def rotations(self) -> Any: ...
    @property
    def scales(self) -> Any: ...
    @property
    def skelAnimationSource(self) -> Any: ...
    @property
    def skelBlendShapeTargets(self) -> Any: ...
    @property
    def skelBlendShapes(self) -> Any: ...
    @property
    def skelJoints(self) -> Any: ...
    @property
    def skelSkeleton(self) -> Any: ...
    @property
    def translations(self) -> Any: ...
    @property
    def weight(self) -> Any: ...

class Topology(Boost.Python.instance):
    @overload
    def __init__(self, arg2: object) -> None: ...
    @overload
    def __init__(self, arg2: TokenArray) -> None: ...
    @overload
    def __init__(self, arg2: IntArray) -> None: ...
    def GetNumJoints(self) -> int: ...
    def GetParent(self, arg2: int) -> int: ...
    def GetParentIndices(self) -> IntArray: ...
    def IsRoot(self, arg2: int) -> bool: ...
    def Validate(self) -> tuple: ...
    def __len__(self) -> int: ...
    def __reduce__(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: bool, arg3: object) -> None: ...
    def __bool__(self) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool: ...
    def __getitem__(self, arg2: int) -> Any: ...
    @overload
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...

def ApplyBlendShape(weight: float, offsets: Vec3fArray, indices: IntArray, points: Vec3fArray) -> bool: ...
@overload
def BakeSkinning(root: Root, interval: pxr.Gf.Interval = ...) -> bool: ...
@overload
def BakeSkinning(range: object, interval: pxr.Gf.Interval = ...) -> bool: ...
@overload
def ComputeJointLocalTransforms(topology: Topology, xforms: Matrix4dArray, inverseXforms: Matrix4dArray, jointLocalXforms: Matrix4dArray, rootInverseXform: pxr.Gf.Matrix4d = ...) -> bool: ...
@overload
def ComputeJointLocalTransforms(topology: Topology, xforms: Matrix4dArray, jointLocalXforms: Matrix4dArray, rootInverseXform: pxr.Gf.Matrix4d = ...) -> bool: ...
@overload
def ComputeJointLocalTransforms(topology: Topology, xforms: Matrix4fArray, inverseXforms: Matrix4fArray, jointLocalXforms: Matrix4fArray, rootInverseXform: pxr.Gf.Matrix4f = ...) -> bool: ...
@overload
def ComputeJointLocalTransforms(topology: Topology, xforms: Matrix4fArray, jointLocalXforms: Matrix4fArray, rootInverseXform: pxr.Gf.Matrix4f = ...) -> bool: ...
@overload
def ComputeJointLocalTransforms(topology: Topology, xforms: Matrix4dArray, inverseXforms: Matrix4dArray, rootInverseXform: pxr.Gf.Matrix4d = ...) -> Matrix4dArray: ...
@overload
def ComputeJointLocalTransforms(topology: Topology, xforms: Matrix4dArray, rootInverseXform: pxr.Gf.Matrix4d = ...) -> Matrix4dArray: ...
@overload
def ComputeJointsExtent(xforms: Matrix4dArray, pad: float = ..., rootXform: pxr.Gf.Matrix4d = ...) -> pxr.Gf.Range3f: ...
@overload
def ComputeJointsExtent(xforms: Matrix4fArray, pad: float = ..., rootXform: pxr.Gf.Matrix4f = ...) -> pxr.Gf.Range3f: ...
@overload
def ConcatJointTransforms(arg1: Topology, topology: Matrix4dArray, jointLocalXforms: Matrix4dArray, rootXform: pxr.Gf.Matrix4d = ...) -> bool: ...
@overload
def ConcatJointTransforms(arg1: Topology, topology: Matrix4fArray, jointLocalXforms: Matrix4fArray, rootXform: pxr.Gf.Matrix4f = ...) -> bool: ...
@overload
def ConcatJointTransforms(topology: Topology, jointLocalXforms: Matrix4dArray, rootXform: pxr.Gf.Matrix4d = ...) -> Matrix4dArray: ...
def DecomposeTransform(*args, **kwargs) -> Any: ...
def DecomposeTransforms(*args, **kwargs) -> Any: ...
@overload
def ExpandConstantInfluencesToVarying(array: IntArray, size: int) -> bool: ...
@overload
def ExpandConstantInfluencesToVarying(array: FloatArray, size: int) -> bool: ...
def InterleaveInfluences(indices: IntArray, weights: FloatArray, interleavedInfluences: Vec2fArray) -> bool: ...
def IsSkelAnimationPrim(prim: pxr.Usd.Prim) -> bool: ...
def IsSkinnablePrim(prim: pxr.Usd.Prim) -> bool: ...
def MakeTransform(translate: pxr.Gf.Vec3f, rotate: pxr.Gf.Quatf, scale: pxr.Gf.Vec3h) -> pxr.Gf.Matrix4d: ...
def MakeTransforms(translations: Vec3fArray, rotations: QuatfArray, scales: Vec3hArray) -> Matrix4dArray: ...
def NormalizeWeights(weights: FloatArray, numInfluencesPerComponent: int, eps: float = ...) -> bool: ...
@overload
def ResizeInfluences(array: IntArray, srcNumInfluencesPerComponent: int, newNumInfluencesPerComponent: int) -> bool: ...
@overload
def ResizeInfluences(array: FloatArray, srcNumInfluencesPerComponent: int, newNumInfluencesPerComponent: int) -> bool: ...
@overload
def SkinNormals(skinningMethod: str, geomBindTransform: pxr.Gf.Matrix3d, jointXforms: Matrix3dArray, influences: Vec2fArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinNormals(skinningMethod: str, geomBindTransform: pxr.Gf.Matrix3f, jointXforms: Matrix3fArray, influences: Vec2fArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinNormals(skinningMethod: str, geomBindTransform: pxr.Gf.Matrix3d, jointXforms: Matrix3dArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinNormals(skinningMethod: str, geomBindTransform: pxr.Gf.Matrix3f, jointXforms: Matrix3fArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinNormalsLBS(geomBindTransform: pxr.Gf.Matrix3d, jointXforms: Matrix3dArray, influences: Vec2fArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinNormalsLBS(geomBindTransform: pxr.Gf.Matrix3f, jointXforms: Matrix3fArray, influences: Vec2fArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinNormalsLBS(geomBindTransform: pxr.Gf.Matrix3d, jointXforms: Matrix3dArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinNormalsLBS(geomBindTransform: pxr.Gf.Matrix3f, jointXforms: Matrix3fArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPoints(skinningMethod: object, geomBindTransform: pxr.Gf.Matrix4d, jointXforms: Matrix4dArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPoints(skinningMethod: object, geomBindTransform: pxr.Gf.Matrix4d, jointXforms: Matrix4dArray, influences: Vec2fArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPoints(skinningMethod: object, geomBindTransform: pxr.Gf.Matrix4f, jointXforms: Matrix4fArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPoints(skinningMethod: object, geomBindTransform: pxr.Gf.Matrix4f, jointXforms: Matrix4fArray, influences: Vec2fArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPointsLBS(geomBindTransform: pxr.Gf.Matrix4d, jointXforms: Matrix4dArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPointsLBS(geomBindTransform: pxr.Gf.Matrix4d, jointXforms: Matrix4dArray, influences: Vec2fArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPointsLBS(geomBindTransform: pxr.Gf.Matrix4f, jointXforms: Matrix4fArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPointsLBS(geomBindTransform: pxr.Gf.Matrix4f, jointXforms: Matrix4fArray, influences: Vec2fArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinTransform(skinningMethod: object, geomBindTransform: pxr.Gf.Matrix4d, jointXforms: Matrix4dArray, influences: Vec2fArray) -> pxr.Gf.Matrix4d: ...
@overload
def SkinTransform(skinningMethod: object, geomBindTransform: pxr.Gf.Matrix4d, jointXforms: Matrix4dArray, jointIndices: IntArray, jointWeights: FloatArray) -> pxr.Gf.Matrix4d: ...
@overload
def SkinTransform(skinningMethod: object, geomBindTransform: pxr.Gf.Matrix4f, jointXforms: Matrix4fArray, influences: Vec2fArray) -> pxr.Gf.Matrix4f: ...
@overload
def SkinTransform(skinningMethod: object, geomBindTransform: pxr.Gf.Matrix4f, jointXforms: Matrix4fArray, jointIndices: IntArray, jointWeights: FloatArray) -> pxr.Gf.Matrix4f: ...
@overload
def SkinTransformLBS(geomBindTransform: pxr.Gf.Matrix4d, jointXforms: Matrix4dArray, influences: Vec2fArray) -> pxr.Gf.Matrix4d: ...
@overload
def SkinTransformLBS(geomBindTransform: pxr.Gf.Matrix4d, jointXforms: Matrix4dArray, jointIndices: IntArray, jointWeights: FloatArray) -> pxr.Gf.Matrix4d: ...
@overload
def SkinTransformLBS(geomBindTransform: pxr.Gf.Matrix4f, jointXforms: Matrix4fArray, influences: Vec2fArray) -> pxr.Gf.Matrix4f: ...
@overload
def SkinTransformLBS(geomBindTransform: pxr.Gf.Matrix4f, jointXforms: Matrix4fArray, jointIndices: IntArray, jointWeights: FloatArray) -> pxr.Gf.Matrix4f: ...
def SortInfluences(indices: IntArray, weights: FloatArray, numInfluencesPerComponent: int) -> bool: ...