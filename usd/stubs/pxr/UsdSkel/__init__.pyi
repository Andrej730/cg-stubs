import Boost.Python
import pxr.UsdGeom
from typing import Any, ClassVar, overload

class AnimMapper(Boost.Python.instance):
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, arg2: int) -> None: ...
    @overload
    def __init__(self, arg1: object, sourceOrder: TokenArray, targetOrder: TokenArray) -> None: ...
    def IsIdentity(self, arg1: AnimMapper) -> bool: ...
    def IsNull(self, arg1: AnimMapper) -> bool: ...
    def IsSparse(self, arg1: AnimMapper) -> bool: ...
    def Remap(self, arg1: AnimMapper, source: object, target: object = ..., elementSize: int = ..., defaultValue: object = ...) -> object: ...
    @overload
    def RemapTransforms(self, arg1: AnimMapper, source: Matrix4dArray, target: Matrix4dArray, elementSize: int = ...) -> Matrix4dArray: ...
    @overload
    def RemapTransforms(self, arg1: AnimMapper, source: Matrix4fArray, target: Matrix4fArray, elementSize: int = ...) -> Matrix4fArray: ...
    def __len__(self, arg1: AnimMapper) -> int: ...
    def __reduce__(self) -> Any: ...

class AnimQuery(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def BlendShapeWeightsMightBeTimeVarying(self, arg1: AnimQuery) -> bool: ...
    def ComputeBlendShapeWeights(self, arg1: AnimQuery, time: TimeCode = ...) -> FloatArray: ...
    def ComputeJointLocalTransformComponents(self, arg1: AnimQuery, time: TimeCode = ...) -> tuple: ...
    def ComputeJointLocalTransforms(self, arg1: AnimQuery, time: TimeCode = ...) -> Matrix4dArray: ...
    def GetBlendShapeOrder(self, arg1: AnimQuery) -> TokenArray: ...
    def GetBlendShapeWeightTimeSamples(self, arg1: AnimQuery) -> object: ...
    def GetBlendShapeWeightTimeSamplesInInterval(self, arg1: AnimQuery, interval: Interval) -> object: ...
    def GetJointOrder(self, arg1: AnimQuery) -> TokenArray: ...
    def GetJointTransformTimeSamples(self, arg1: AnimQuery) -> object: ...
    def GetJointTransformTimeSamplesInInterval(self, arg1: AnimQuery, interval: Interval) -> object: ...
    def GetPrim(self, arg1: AnimQuery) -> Prim: ...
    def JointTransformsMightBeTimeVarying(self, arg1: AnimQuery) -> bool: ...
    def __bool__(self, arg1: AnimQuery) -> object: ...
    def __eq__(self, arg1: AnimQuery, arg2: AnimQuery) -> object: ...
    def __ne__(self, arg1: AnimQuery, arg2: AnimQuery) -> object: ...
    def __reduce__(self) -> Any: ...

class Animation(pxr.Usd.Typed):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateBlendShapeWeightsAttr(self, arg1: Animation, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateBlendShapesAttr(self, arg1: Animation, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateJointsAttr(self, arg1: Animation, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateRotationsAttr(self, arg1: Animation, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateScalesAttr(self, arg1: Animation, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateTranslationsAttr(self, arg1: Animation, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> Animation: ...
    def Get(self, stage: Stage, path: Path) -> Animation: ...
    def GetBlendShapeWeightsAttr(self, arg1: Animation) -> Attribute: ...
    def GetBlendShapesAttr(self, arg1: Animation) -> Attribute: ...
    def GetJointsAttr(self, arg1: Animation) -> Attribute: ...
    def GetRotationsAttr(self, arg1: Animation) -> Attribute: ...
    def GetScalesAttr(self, arg1: Animation) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetTransforms(self, arg1: Animation, time: TimeCode = ...) -> Matrix4dArray: ...
    def GetTranslationsAttr(self, arg1: Animation) -> Attribute: ...
    def SetTransforms(self, arg1: Animation, xforms: Matrix4dArray, time: TimeCode = ...) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Animation) -> object: ...
    def __reduce__(self) -> Any: ...

class Binding(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, arg2: Skeleton, arg3: list) -> object: ...
    def GetSkeleton(self, arg1: Binding) -> Skeleton: ...
    def GetSkinningTargets(self, arg1: Binding) -> list: ...
    def __reduce__(self) -> Any: ...

class BindingAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> BindingAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def CreateAnimationSourceRel(self, arg1: BindingAPI) -> Relationship: ...
    def CreateBlendShapeTargetsRel(self, arg1: BindingAPI) -> Relationship: ...
    def CreateBlendShapesAttr(self, arg1: BindingAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateGeomBindTransformAttr(self, arg1: BindingAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateJointIndicesAttr(self, arg1: BindingAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateJointIndicesPrimvar(self, arg1: BindingAPI, constant: bool, elementSize: int = ...) -> Primvar: ...
    def CreateJointWeightsAttr(self, arg1: BindingAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateJointWeightsPrimvar(self, arg1: BindingAPI, constant: bool, elementSize: int = ...) -> Primvar: ...
    def CreateJointsAttr(self, arg1: BindingAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateSkeletonRel(self, arg1: BindingAPI) -> Relationship: ...
    def CreateSkinningMethodAttr(self, arg1: BindingAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> BindingAPI: ...
    def GetAnimationSource(self, arg1: BindingAPI) -> object: ...
    def GetAnimationSourceRel(self, arg1: BindingAPI) -> Relationship: ...
    def GetBlendShapeTargetsRel(self, arg1: BindingAPI) -> Relationship: ...
    def GetBlendShapesAttr(self, arg1: BindingAPI) -> Attribute: ...
    def GetGeomBindTransformAttr(self, arg1: BindingAPI) -> Attribute: ...
    def GetInheritedAnimationSource(self, arg1: BindingAPI) -> Prim: ...
    def GetInheritedSkeleton(self, arg1: BindingAPI) -> Skeleton: ...
    def GetJointIndicesAttr(self, arg1: BindingAPI) -> Attribute: ...
    def GetJointIndicesPrimvar(self, arg1: BindingAPI) -> Primvar: ...
    def GetJointWeightsAttr(self, arg1: BindingAPI) -> Attribute: ...
    def GetJointWeightsPrimvar(self, arg1: BindingAPI) -> Primvar: ...
    def GetJointsAttr(self, arg1: BindingAPI) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetSkeleton(self, arg1: BindingAPI) -> object: ...
    def GetSkeletonRel(self, arg1: BindingAPI) -> Relationship: ...
    def GetSkinningMethodAttr(self, arg1: BindingAPI) -> Attribute: ...
    def SetRigidJointInfluence(self, arg1: BindingAPI, jointIndex: int, weight: float = ...) -> bool: ...
    def ValidateJointIndices(self, jointIndices: IntArray, numJoints: int) -> tuple: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: BindingAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class BlendShape(pxr.Usd.Typed):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateInbetween(self, arg1: BlendShape, name: object) -> InbetweenShape: ...
    def CreateNormalOffsetsAttr(self, arg1: BlendShape, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateOffsetsAttr(self, arg1: BlendShape, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreatePointIndicesAttr(self, arg1: BlendShape, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> BlendShape: ...
    def Get(self, stage: Stage, path: Path) -> BlendShape: ...
    def GetAuthoredInbetweens(self, arg1: BlendShape) -> list: ...
    def GetInbetween(self, arg1: BlendShape, name: object) -> InbetweenShape: ...
    def GetInbetweens(self, arg1: BlendShape) -> list: ...
    def GetNormalOffsetsAttr(self, arg1: BlendShape) -> Attribute: ...
    def GetOffsetsAttr(self, arg1: BlendShape) -> Attribute: ...
    def GetPointIndicesAttr(self, arg1: BlendShape) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def HasInbetween(self, arg1: BlendShape, name: object) -> bool: ...
    def ValidatePointIndices(self, pointIndices: IntArray, numPoints: int) -> tuple: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: BlendShape) -> object: ...
    def __reduce__(self) -> Any: ...

class BlendShapeQuery(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, arg2: BindingAPI) -> None: ...
    def ComputeBlendShapePointIndices(self, arg1: BlendShapeQuery) -> list: ...
    def ComputeDeformedPoints(self, arg1: BlendShapeQuery, subShapeWeights: FloatArray, blendShapeIndices: UIntArray, subShapeIndices: UIntArray, blendShapePointIndices: list, subShapePointOffset: list, points: Vec3fArray) -> bool: ...
    def ComputeSubShapePointOffsets(self, arg1: BlendShapeQuery) -> list: ...
    def ComputeSubShapeWeights(self, arg1: BlendShapeQuery, arg2: FloatArray) -> tuple: ...
    def GetBlendShape(self, arg1: BlendShapeQuery, arg2: int) -> BlendShape: ...
    def GetBlendShapeIndex(self, arg1: BlendShapeQuery, arg2: int) -> int: ...
    def GetInbetween(self, arg1: BlendShapeQuery, arg2: int) -> InbetweenShape: ...
    def GetNumBlendShapes(self, arg1: BlendShapeQuery) -> int: ...
    def GetNumSubShapes(self, arg1: BlendShapeQuery) -> int: ...
    def __reduce__(self) -> Any: ...

class Cache(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg1: object) -> None: ...
    def Clear(self, arg1: Cache) -> None: ...
    def ComputeSkelBinding(self, arg1: Cache, skelRoot: Root, skel: Skeleton, predicate: _PrimFlagsPredicate) -> Binding: ...
    def ComputeSkelBindings(self, arg1: Cache, skelRoot: Root, predicate: _PrimFlagsPredicate) -> list: ...
    @overload
    def GetAnimQuery(self, arg1: Cache, prim: Prim) -> AnimQuery: ...
    @overload
    def GetAnimQuery(self, arg1: Cache, anim: Animation) -> AnimQuery: ...
    def GetSkelQuery(self, arg1: Cache, arg2: Skeleton) -> SkeletonQuery: ...
    def GetSkinningQuery(self, arg1: Cache, arg2: Prim) -> SkinningQuery: ...
    def Populate(self, arg1: Cache, skelRoot: Root, predicate: _PrimFlagsPredicate) -> bool: ...
    def __reduce__(self) -> Any: ...

class InbetweenShape(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, attr: Attribute) -> None: ...
    def CreateNormalOffsetsAttr(self, arg1: InbetweenShape, arg2: object) -> Attribute: ...
    def GetAttr(self, arg1: InbetweenShape) -> Attribute: ...
    def GetNormalOffsets(self, arg1: InbetweenShape) -> Vec3fArray: ...
    def GetNormalOffsetsAttr(self, arg1: InbetweenShape) -> Attribute: ...
    def GetOffsets(self, arg1: InbetweenShape) -> Vec3fArray: ...
    def GetWeight(self, arg1: InbetweenShape) -> object: ...
    def HasAuthoredWeight(self, arg1: InbetweenShape) -> bool: ...
    def IsDefined(self, arg1: InbetweenShape) -> bool: ...
    def IsInbetween(self, attr: Attribute) -> bool: ...
    def SetNormalOffsets(self, arg1: InbetweenShape, offsets: object) -> bool: ...
    def SetOffsets(self, arg1: InbetweenShape, offsets: object) -> bool: ...
    def SetWeight(self, arg1: InbetweenShape, weight: float) -> bool: ...
    def __bool__(self, arg1: InbetweenShape) -> object: ...
    def __eq__(self, arg1: InbetweenShape, arg2: InbetweenShape) -> object: ...
    def __reduce__(self) -> Any: ...

class PackedJointAnimation(Animation):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Define(self, stage: Stage, path: Path) -> PackedJointAnimation: ...
    def Get(self, stage: Stage, path: Path) -> PackedJointAnimation: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: PackedJointAnimation) -> object: ...
    def __reduce__(self) -> Any: ...

class Root(pxr.UsdGeom.Boundable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Define(self, stage: Stage, path: Path) -> Root: ...
    def Find(self, arg1: Prim) -> Root: ...
    def Get(self, stage: Stage, path: Path) -> Root: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Root) -> object: ...
    def __reduce__(self) -> Any: ...

class Skeleton(pxr.UsdGeom.Boundable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateBindTransformsAttr(self, arg1: Skeleton, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateJointNamesAttr(self, arg1: Skeleton, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateJointsAttr(self, arg1: Skeleton, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateRestTransformsAttr(self, arg1: Skeleton, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> Skeleton: ...
    def Get(self, stage: Stage, path: Path) -> Skeleton: ...
    def GetBindTransformsAttr(self, arg1: Skeleton) -> Attribute: ...
    def GetJointNamesAttr(self, arg1: Skeleton) -> Attribute: ...
    def GetJointsAttr(self, arg1: Skeleton) -> Attribute: ...
    def GetRestTransformsAttr(self, arg1: Skeleton) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Skeleton) -> object: ...
    def __reduce__(self) -> Any: ...

class SkeletonQuery(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def ComputeJointLocalTransforms(self, arg1: SkeletonQuery, time: TimeCode = ..., atRest: bool = ...) -> Matrix4dArray: ...
    def ComputeJointRestRelativeTransforms(self, arg1: SkeletonQuery, time: TimeCode = ...) -> Matrix4dArray: ...
    def ComputeJointSkelTransforms(self, arg1: SkeletonQuery, time: TimeCode = ..., atRest: bool = ...) -> Matrix4dArray: ...
    def ComputeJointWorldTransforms(self, arg1: SkeletonQuery, time: XformCache = ..., atRest: bool = ...) -> Matrix4dArray: ...
    def ComputeSkinningTransforms(self, arg1: SkeletonQuery, time: TimeCode = ...) -> Matrix4dArray: ...
    def GetAnimQuery(self, arg1: SkeletonQuery) -> AnimQuery: ...
    def GetJointOrder(self, arg1: SkeletonQuery) -> TokenArray: ...
    def GetJointWorldBindTransforms(self, arg1: SkeletonQuery) -> Matrix4dArray: ...
    def GetMapper(self, arg1: SkeletonQuery) -> AnimMapper: ...
    def GetPrim(self, arg1: SkeletonQuery) -> Prim: ...
    def GetSkeleton(self, arg1: SkeletonQuery) -> Skeleton: ...
    def GetTopology(self, arg1: SkeletonQuery) -> Topology: ...
    def HasBindPose(self, arg1: SkeletonQuery) -> bool: ...
    def HasRestPose(self, arg1: SkeletonQuery) -> bool: ...
    def __bool__(self, arg1: SkeletonQuery) -> object: ...
    def __eq__(self, arg1: SkeletonQuery, arg2: SkeletonQuery) -> object: ...
    def __hash__(self, arg1: SkeletonQuery) -> int: ...
    def __ne__(self, arg1: SkeletonQuery, arg2: SkeletonQuery) -> object: ...
    def __reduce__(self) -> Any: ...

class SkinningQuery(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg1: object) -> None: ...
    @overload
    def ComputeExtentsPadding(self, skelRestXforms: SkinningQuery, boundable: Matrix4dArray, time: Boundable = ...) -> float: ...
    @overload
    def ComputeExtentsPadding(self, skelRestXforms: SkinningQuery, boundable: Matrix4fArray, time: Boundable = ...) -> float: ...
    def ComputeJointInfluences(self, arg1: SkinningQuery, time: TimeCode = ...) -> object: ...
    @overload
    def ComputeSkinnedPoints(self, arg1: SkinningQuery, xforms: Matrix4dArray, points: Vec3fArray, time: TimeCode = ...) -> bool: ...
    @overload
    def ComputeSkinnedPoints(self, arg1: SkinningQuery, xforms: Matrix4fArray, points: Vec3fArray, time: TimeCode = ...) -> bool: ...
    @overload
    def ComputeSkinnedTransform(self, arg1: SkinningQuery, xforms: Matrix4dArray, time: TimeCode = ...) -> Matrix4d: ...
    @overload
    def ComputeSkinnedTransform(self, arg1: SkinningQuery, xforms: Matrix4fArray, time: TimeCode = ...) -> Matrix4f: ...
    def ComputeVaryingJointInfluences(self, arg1: SkinningQuery, numPoints: int, time: TimeCode = ...) -> object: ...
    def GetBlendShapeMapper(self, arg1: SkinningQuery) -> AnimMapper: ...
    def GetBlendShapeOrder(self, arg1: SkinningQuery) -> object: ...
    def GetBlendShapeTargetsRel(self, arg1: SkinningQuery) -> Relationship: ...
    def GetBlendShapesAttr(self, arg1: SkinningQuery) -> Attribute: ...
    def GetGeomBindTransform(self, arg1: SkinningQuery, time: TimeCode = ...) -> Matrix4d: ...
    def GetGeomBindTransformAttr(self, arg1: SkinningQuery) -> Attribute: ...
    def GetInterpolation(self, arg1: SkinningQuery) -> object: ...
    def GetJointIndicesPrimvar(self, arg1: SkinningQuery) -> Primvar: ...
    def GetJointMapper(self, arg1: SkinningQuery) -> AnimMapper: ...
    def GetJointOrder(self, arg1: SkinningQuery) -> object: ...
    def GetJointWeightsPrimvar(self, arg1: SkinningQuery) -> Primvar: ...
    def GetMapper(self, arg1: SkinningQuery) -> AnimMapper: ...
    def GetNumInfluencesPerComponent(self, arg1: SkinningQuery) -> int: ...
    def GetPrim(self, arg1: SkinningQuery) -> Prim: ...
    def GetSkinningMethod(self, arg1: SkinningQuery) -> object: ...
    def GetSkinningMethodAttr(self, arg1: SkinningQuery) -> Attribute: ...
    def GetTimeSamples(self, arg1: SkinningQuery) -> object: ...
    def GetTimeSamplesInInterval(self, arg1: SkinningQuery, arg2: Interval) -> object: ...
    def HasBlendShapes(self, arg1: SkinningQuery) -> bool: ...
    def HasJointInfluences(self, arg1: SkinningQuery) -> bool: ...
    def IsRigidlyDeformed(self, arg1: SkinningQuery) -> bool: ...
    def __bool__(self, arg1: SkinningQuery) -> object: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def BlendShape(self) -> Any: ...
    @property
    def PackedJointAnimation(self) -> Any: ...
    @property
    def SkelAnimation(self) -> Any: ...
    @property
    def SkelBindingAPI(self) -> Any: ...
    @property
    def SkelRoot(self) -> Any: ...
    @property
    def Skeleton(self) -> Any: ...
    @property
    def bindTransforms(self) -> Any: ...
    @property
    def blendShapeWeights(self) -> Any: ...
    @property
    def blendShapes(self) -> Any: ...
    @property
    def classicLinear(self) -> Any: ...
    @property
    def dualQuaternion(self) -> Any: ...
    @property
    def jointNames(self) -> Any: ...
    @property
    def joints(self) -> Any: ...
    @property
    def normalOffsets(self) -> Any: ...
    @property
    def offsets(self) -> Any: ...
    @property
    def pointIndices(self) -> Any: ...
    @property
    def primvarsSkelGeomBindTransform(self) -> Any: ...
    @property
    def primvarsSkelJointIndices(self) -> Any: ...
    @property
    def primvarsSkelJointWeights(self) -> Any: ...
    @property
    def primvarsSkelSkinningMethod(self) -> Any: ...
    @property
    def restTransforms(self) -> Any: ...
    @property
    def rotations(self) -> Any: ...
    @property
    def scales(self) -> Any: ...
    @property
    def skelAnimationSource(self) -> Any: ...
    @property
    def skelBlendShapeTargets(self) -> Any: ...
    @property
    def skelBlendShapes(self) -> Any: ...
    @property
    def skelJoints(self) -> Any: ...
    @property
    def skelSkeleton(self) -> Any: ...
    @property
    def translations(self) -> Any: ...
    @property
    def weight(self) -> Any: ...

class Topology(Boost.Python.instance):
    @overload
    def __init__(self, arg1: object, arg2: object) -> None: ...
    @overload
    def __init__(self, arg1: object, arg2: TokenArray) -> None: ...
    @overload
    def __init__(self, arg1: object, arg2: IntArray) -> None: ...
    def GetNumJoints(self, arg1: Topology) -> int: ...
    def GetParent(self, arg1: Topology, arg2: int) -> int: ...
    def GetParentIndices(self, arg1: Topology) -> IntArray: ...
    def IsRoot(self, arg1: Topology, arg2: int) -> bool: ...
    def Validate(self, arg1: Topology) -> tuple: ...
    def __len__(self, arg1: Topology) -> int: ...
    def __reduce__(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg1: object, arg2: bool, arg3: object) -> None: ...
    def __bool__(self, arg1: _CanApplyResult) -> bool: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __getitem__(self, arg1: _CanApplyResult, arg2: int) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...

def ApplyBlendShape(weight: float, offsets: Vec3fArray, indices: IntArray, points: Vec3fArray) -> bool: ...
@overload
def BakeSkinning(root: Root, interval: Interval = ...) -> bool: ...
@overload
def BakeSkinning(range: object, interval: Interval = ...) -> bool: ...
@overload
def ComputeJointLocalTransforms(topology: Topology, xforms: Matrix4dArray, inverseXforms: Matrix4dArray, jointLocalXforms: Matrix4dArray, rootInverseXform: Matrix4d = ...) -> bool: ...
@overload
def ComputeJointLocalTransforms(topology: Topology, xforms: Matrix4dArray, jointLocalXforms: Matrix4dArray, rootInverseXform: Matrix4d = ...) -> bool: ...
@overload
def ComputeJointLocalTransforms(topology: Topology, xforms: Matrix4fArray, inverseXforms: Matrix4fArray, jointLocalXforms: Matrix4fArray, rootInverseXform: Matrix4f = ...) -> bool: ...
@overload
def ComputeJointLocalTransforms(topology: Topology, xforms: Matrix4fArray, jointLocalXforms: Matrix4fArray, rootInverseXform: Matrix4f = ...) -> bool: ...
@overload
def ComputeJointLocalTransforms(topology: Topology, xforms: Matrix4dArray, inverseXforms: Matrix4dArray, rootInverseXform: Matrix4d = ...) -> Matrix4dArray: ...
@overload
def ComputeJointLocalTransforms(topology: Topology, xforms: Matrix4dArray, rootInverseXform: Matrix4d = ...) -> Matrix4dArray: ...
@overload
def ComputeJointsExtent(xforms: Matrix4dArray, pad: float = ..., rootXform: Matrix4d = ...) -> Range3f: ...
@overload
def ComputeJointsExtent(xforms: Matrix4fArray, pad: float = ..., rootXform: Matrix4f = ...) -> Range3f: ...
@overload
def ConcatJointTransforms(arg1: Topology, topology: Matrix4dArray, jointLocalXforms: Matrix4dArray, rootXform: Matrix4d = ...) -> bool: ...
@overload
def ConcatJointTransforms(arg1: Topology, topology: Matrix4fArray, jointLocalXforms: Matrix4fArray, rootXform: Matrix4f = ...) -> bool: ...
@overload
def ConcatJointTransforms(topology: Topology, jointLocalXforms: Matrix4dArray, rootXform: Matrix4d = ...) -> Matrix4dArray: ...
def DecomposeTransform(*args, **kwargs) -> Any: ...
def DecomposeTransforms(*args, **kwargs) -> Any: ...
@overload
def ExpandConstantInfluencesToVarying(array: IntArray, size: int) -> bool: ...
@overload
def ExpandConstantInfluencesToVarying(array: FloatArray, size: int) -> bool: ...
def InterleaveInfluences(indices: IntArray, weights: FloatArray, interleavedInfluences: Vec2fArray) -> bool: ...
def IsSkelAnimationPrim(prim: Prim) -> bool: ...
def IsSkinnablePrim(prim: Prim) -> bool: ...
def MakeTransform(translate: Vec3f, rotate: Quatf, scale: Vec3h) -> Matrix4d: ...
def MakeTransforms(translations: Vec3fArray, rotations: QuatfArray, scales: Vec3hArray) -> Matrix4dArray: ...
def NormalizeWeights(weights: FloatArray, numInfluencesPerComponent: int, eps: float = ...) -> bool: ...
@overload
def ResizeInfluences(array: IntArray, srcNumInfluencesPerComponent: int, newNumInfluencesPerComponent: int) -> bool: ...
@overload
def ResizeInfluences(array: FloatArray, srcNumInfluencesPerComponent: int, newNumInfluencesPerComponent: int) -> bool: ...
@overload
def SkinNormals(skinningMethod: object, geomBindTransform: Matrix3d, jointXforms: Matrix3dArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinNormals(skinningMethod: object, geomBindTransform: Matrix3d, jointXforms: Matrix3dArray, influences: Vec2fArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinNormals(skinningMethod: object, geomBindTransform: Matrix3f, jointXforms: Matrix3fArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinNormals(skinningMethod: object, geomBindTransform: Matrix3f, jointXforms: Matrix3fArray, influences: Vec2fArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinNormalsLBS(geomBindTransform: Matrix3d, jointXforms: Matrix3dArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinNormalsLBS(geomBindTransform: Matrix3d, jointXforms: Matrix3dArray, influences: Vec2fArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinNormalsLBS(geomBindTransform: Matrix3f, jointXforms: Matrix3fArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinNormalsLBS(geomBindTransform: Matrix3f, jointXforms: Matrix3fArray, influences: Vec2fArray, numInfluencesPerPoint: int, normals: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPoints(skinningMethod: object, geomBindTransform: Matrix4d, jointXforms: Matrix4dArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPoints(skinningMethod: object, geomBindTransform: Matrix4d, jointXforms: Matrix4dArray, influences: Vec2fArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPoints(skinningMethod: object, geomBindTransform: Matrix4f, jointXforms: Matrix4fArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPoints(skinningMethod: object, geomBindTransform: Matrix4f, jointXforms: Matrix4fArray, influences: Vec2fArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPointsLBS(geomBindTransform: Matrix4d, jointXforms: Matrix4dArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPointsLBS(geomBindTransform: Matrix4d, jointXforms: Matrix4dArray, influences: Vec2fArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPointsLBS(geomBindTransform: Matrix4f, jointXforms: Matrix4fArray, jointIndices: IntArray, jointWeights: FloatArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinPointsLBS(geomBindTransform: Matrix4f, jointXforms: Matrix4fArray, influences: Vec2fArray, numInfluencesPerPoint: int, points: Vec3fArray, inSerial: bool = ...) -> bool: ...
@overload
def SkinTransform(skinningMethod: object, geomBindTransform: Matrix4d, jointXforms: Matrix4dArray, influences: Vec2fArray) -> Matrix4d: ...
@overload
def SkinTransform(skinningMethod: object, geomBindTransform: Matrix4d, jointXforms: Matrix4dArray, jointIndices: IntArray, jointWeights: FloatArray) -> Matrix4d: ...
@overload
def SkinTransform(skinningMethod: object, geomBindTransform: Matrix4f, jointXforms: Matrix4fArray, influences: Vec2fArray) -> Matrix4f: ...
@overload
def SkinTransform(skinningMethod: object, geomBindTransform: Matrix4f, jointXforms: Matrix4fArray, jointIndices: IntArray, jointWeights: FloatArray) -> Matrix4f: ...
@overload
def SkinTransformLBS(geomBindTransform: Matrix4d, jointXforms: Matrix4dArray, influences: Vec2fArray) -> Matrix4d: ...
@overload
def SkinTransformLBS(geomBindTransform: Matrix4d, jointXforms: Matrix4dArray, jointIndices: IntArray, jointWeights: FloatArray) -> Matrix4d: ...
@overload
def SkinTransformLBS(geomBindTransform: Matrix4f, jointXforms: Matrix4fArray, influences: Vec2fArray) -> Matrix4f: ...
@overload
def SkinTransformLBS(geomBindTransform: Matrix4f, jointXforms: Matrix4fArray, jointIndices: IntArray, jointWeights: FloatArray) -> Matrix4f: ...
def SortInfluences(indices: IntArray, weights: FloatArray, numInfluencesPerComponent: int) -> bool: ...