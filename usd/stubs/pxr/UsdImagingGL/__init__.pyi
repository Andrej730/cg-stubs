import Boost.Python
from typing import Any, ClassVar, overload

class CullStyle(Boost.Python.enum):
    CULL_STYLE_BACK: ClassVar[CullStyle] = ...
    CULL_STYLE_BACK_UNLESS_DOUBLE_SIDED: ClassVar[CullStyle] = ...
    CULL_STYLE_FRONT: ClassVar[CullStyle] = ...
    CULL_STYLE_NOTHING: ClassVar[CullStyle] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class DrawMode(Boost.Python.enum):
    DRAW_GEOM_FLAT: ClassVar[DrawMode] = ...
    DRAW_GEOM_ONLY: ClassVar[DrawMode] = ...
    DRAW_GEOM_SMOOTH: ClassVar[DrawMode] = ...
    DRAW_POINTS: ClassVar[DrawMode] = ...
    DRAW_SHADED_FLAT: ClassVar[DrawMode] = ...
    DRAW_SHADED_SMOOTH: ClassVar[DrawMode] = ...
    DRAW_WIREFRAME: ClassVar[DrawMode] = ...
    DRAW_WIREFRAME_ON_SURFACE: ClassVar[DrawMode] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class Engine(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, arg2: Path, arg3: object, arg4: object) -> None: ...
    def AddSelected(self, arg1: Engine, arg2: Path, arg3: int) -> None: ...
    def ClearSelected(self, arg1: Engine) -> None: ...
    def GetCurrentRendererId(self, arg1: Engine) -> object: ...
    def GetRenderStats(self, arg1: Engine) -> object: ...
    def GetRendererAovs(self, arg1: Engine) -> list: ...
    def GetRendererCommandDescriptors(self, arg1: Engine) -> list: ...
    def GetRendererDisplayName(self, arg1: object) -> str: ...
    def GetRendererPlugins(self) -> list: ...
    def GetRendererSetting(self, arg1: Engine, arg2: object) -> object: ...
    def GetRendererSettingsList(self, arg1: Engine) -> list: ...
    def InvokeRendererCommand(self, arg1: Engine, command: object, args: object = ...) -> bool: ...
    def IsColorCorrectionCapable(self) -> bool: ...
    def IsConverged(self, arg1: Engine) -> bool: ...
    def IsPauseRendererSupported(self, arg1: Engine) -> bool: ...
    def IsStopRendererSupported(self, arg1: Engine) -> bool: ...
    def PauseRenderer(self, arg1: Engine) -> bool: ...
    def Render(self, arg1: Engine, arg2: Prim, arg3: RenderParams) -> None: ...
    def RestartRenderer(self, arg1: Engine) -> bool: ...
    def ResumeRenderer(self, arg1: Engine) -> bool: ...
    def SetCameraPath(self, arg1: Engine, arg2: Path) -> None: ...
    def SetCameraState(self, arg1: Engine, arg2: Matrix4d, arg3: Matrix4d) -> None: ...
    def SetColorCorrectionSettings(self, arg1: Engine, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object) -> None: ...
    def SetFraming(self, arg1: Engine, arg2: Framing) -> None: ...
    def SetLightingState(self, arg1: Engine, arg2: object, arg3: SimpleMaterial, arg4: Vec4f) -> None: ...
    def SetOverrideWindowPolicy(self, arg1: Engine, arg2: object) -> None: ...
    def SetRenderBufferSize(self, arg1: Engine, arg2: Vec2i) -> None: ...
    def SetRenderViewport(self, arg1: Engine, arg2: Vec4d) -> None: ...
    def SetRendererAov(self, arg1: Engine, arg2: object) -> bool: ...
    def SetRendererPlugin(self, arg1: Engine, arg2: object) -> bool: ...
    def SetRendererSetting(self, arg1: Engine, arg2: object, arg3: object) -> None: ...
    def SetSelected(self, arg1: Engine, arg2: object) -> None: ...
    def SetSelectionColor(self, arg1: Engine, arg2: Vec4f) -> None: ...
    def SetWindowPolicy(self, arg1: Engine, arg2: object) -> None: ...
    def StopRenderer(self, arg1: Engine) -> bool: ...
    def TestIntersection(self, arg1: Engine, arg2: Matrix4d, arg3: Matrix4d, arg4: Prim, arg5: RenderParams) -> tuple: ...
    def __reduce__(self) -> Any: ...

class RenderParams(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    applyRenderState: Any
    bboxLineColor: Any
    bboxLineDashSize: Any
    bboxes: Any
    clearColor: Any
    clipPlanes: Any
    colorCorrectionMode: Any
    complexity: Any
    cullStyle: Any
    drawMode: Any
    enableIdRender: Any
    enableLighting: Any
    enableSampleAlphaToCoverage: Any
    enableSceneLights: Any
    enableSceneMaterials: Any
    enableUsdDrawModes: Any
    forceRefresh: Any
    frame: Any
    gammaCorrectColors: Any
    highlight: Any
    ocioColorSpace: Any
    ocioDisplay: Any
    ocioLook: Any
    ocioView: Any
    overrideColor: Any
    showGuides: Any
    showProxy: Any
    showRender: Any
    wireframeColor: Any
    def __init__(self, arg1: object) -> None: ...
    def __reduce__(self) -> Any: ...

class RendererCommandArgDescriptor(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def argName(self) -> Any: ...
    @property
    def defaultValue(self) -> Any: ...

class RendererCommandDescriptor(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def commandArgs(self) -> Any: ...
    @property
    def commandDescription(self) -> Any: ...
    @property
    def commandName(self) -> Any: ...

class RendererSetting(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg1: object) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def defValue(self) -> Any: ...
    @property
    def key(self) -> Any: ...
    @property
    def name(self) -> Any: ...
    @property
    def type(self) -> Any: ...

class RendererSettingType(Boost.Python.enum):
    FLAG: ClassVar[RendererSettingType] = ...
    FLOAT: ClassVar[RendererSettingType] = ...
    INT: ClassVar[RendererSettingType] = ...
    STRING: ClassVar[RendererSettingType] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...