import Boost.Python
import pxr.Usd
from typing import Any, ClassVar, overload

class GenerativeProceduralAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> GenerativeProceduralAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def CreateProceduralSystemAttr(self, arg1: GenerativeProceduralAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateProceduralTypeAttr(self, arg1: GenerativeProceduralAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> GenerativeProceduralAPI: ...
    def GetProceduralSystemAttr(self, arg1: GenerativeProceduralAPI) -> Attribute: ...
    def GetProceduralTypeAttr(self, arg1: GenerativeProceduralAPI) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: GenerativeProceduralAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def HwPrimvar_1(self) -> Any: ...
    @property
    def HwPtexTexture_1(self) -> Any: ...
    @property
    def HwUvTexture_1(self) -> Any: ...
    @property
    def HydraGenerativeProceduralAPI(self) -> Any: ...
    @property
    def black(self) -> Any: ...
    @property
    def clamp(self) -> Any: ...
    @property
    def displayLookBxdf(self) -> Any: ...
    @property
    def faceIndex(self) -> Any: ...
    @property
    def faceOffset(self) -> Any: ...
    @property
    def frame(self) -> Any: ...
    @property
    def hydraGenerativeProcedural(self) -> Any: ...
    @property
    def infoFilename(self) -> Any: ...
    @property
    def infoVarname(self) -> Any: ...
    @property
    def linear(self) -> Any: ...
    @property
    def linearMipmapLinear(self) -> Any: ...
    @property
    def linearMipmapNearest(self) -> Any: ...
    @property
    def magFilter(self) -> Any: ...
    @property
    def minFilter(self) -> Any: ...
    @property
    def mirror(self) -> Any: ...
    @property
    def nearest(self) -> Any: ...
    @property
    def nearestMipmapLinear(self) -> Any: ...
    @property
    def nearestMipmapNearest(self) -> Any: ...
    @property
    def primvarsHdGpProceduralType(self) -> Any: ...
    @property
    def proceduralSystem(self) -> Any: ...
    @property
    def repeat(self) -> Any: ...
    @property
    def textureMemory(self) -> Any: ...
    @property
    def useMetadata(self) -> Any: ...
    @property
    def uv(self) -> Any: ...
    @property
    def wrapS(self) -> Any: ...
    @property
    def wrapT(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg1: object, arg2: bool, arg3: object) -> None: ...
    def __bool__(self, arg1: _CanApplyResult) -> bool: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __getitem__(self, arg1: _CanApplyResult, arg2: int) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...