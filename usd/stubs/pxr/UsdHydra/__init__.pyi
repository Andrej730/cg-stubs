import Boost.Python
import pxr.Usd
from typing import Any, ClassVar, overload

class GenerativeProceduralAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> GenerativeProceduralAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def CreateProceduralSystemAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateProceduralTypeAttr(self, defaultValue: pxr.Vt.Value = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> GenerativeProceduralAPI: ...
    def GetProceduralSystemAttr(self) -> pxr.Usd.Attribute: ...
    def GetProceduralTypeAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def HwPrimvar_1(self) -> Any: ...
    @property
    def HwPtexTexture_1(self) -> Any: ...
    @property
    def HwUvTexture_1(self) -> Any: ...
    @property
    def HydraGenerativeProceduralAPI(self) -> Any: ...
    @property
    def black(self) -> Any: ...
    @property
    def clamp(self) -> Any: ...
    @property
    def displayLookBxdf(self) -> Any: ...
    @property
    def faceIndex(self) -> Any: ...
    @property
    def faceOffset(self) -> Any: ...
    @property
    def frame(self) -> Any: ...
    @property
    def hydraGenerativeProcedural(self) -> Any: ...
    @property
    def infoFilename(self) -> Any: ...
    @property
    def infoVarname(self) -> Any: ...
    @property
    def linear(self) -> Any: ...
    @property
    def linearMipmapLinear(self) -> Any: ...
    @property
    def linearMipmapNearest(self) -> Any: ...
    @property
    def magFilter(self) -> Any: ...
    @property
    def minFilter(self) -> Any: ...
    @property
    def mirror(self) -> Any: ...
    @property
    def nearest(self) -> Any: ...
    @property
    def nearestMipmapLinear(self) -> Any: ...
    @property
    def nearestMipmapNearest(self) -> Any: ...
    @property
    def primvarsHdGpProceduralType(self) -> Any: ...
    @property
    def proceduralSystem(self) -> Any: ...
    @property
    def repeat(self) -> Any: ...
    @property
    def textureMemory(self) -> Any: ...
    @property
    def useMetadata(self) -> Any: ...
    @property
    def uv(self) -> Any: ...
    @property
    def wrapS(self) -> Any: ...
    @property
    def wrapT(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: bool, arg3: object) -> None: ...
    def __bool__(self) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool: ...
    def __getitem__(self, arg2: int) -> Any: ...
    @overload
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...