import Boost.Python
import pxr.Tf
from typing import Any, ClassVar, overload

class MeshTopology(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg2: object, arg3: object, arg4: IntArray, arg5: IntArray) -> None: ...
    @overload
    def __init__(self, arg2: object, arg3: object, arg4: IntArray, arg5: IntArray, arg6: IntArray) -> None: ...
    @overload
    def __init__(self, arg2: object, arg3: object, arg4: IntArray, arg5: IntArray, arg6: IntArray, arg7: SubdivTags) -> None: ...
    @overload
    def __init__(self, arg2: object, arg3: object, arg4: IntArray, arg5: IntArray, arg6: SubdivTags) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def ComputeHash(self) -> int: ...
    def GetFaceVertexCounts(self) -> IntArray: ...
    def GetFaceVertexIndices(self) -> IntArray: ...
    def GetHoleIndices(self) -> IntArray: ...
    def GetOrientation(self) -> Any: ...
    def GetScheme(self) -> Any: ...
    def GetSubdivTags(self) -> SubdivTags: ...
    def Validate(self) -> MeshTopologyValidation: ...
    def WithHoleIndices(self, arg2: IntArray) -> MeshTopology: ...
    def WithScheme(self, arg2: object) -> MeshTopology: ...
    def WithSubdivTags(self, arg2: SubdivTags) -> MeshTopology: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class MeshTopologyValidation(Boost.Python.instance):
    class Code(pxr.Tf.Tf_PyEnumWrapper):
        InvalidCornerIndicesElement: ClassVar[Code] = ...
        InvalidCornerWeightsSize: ClassVar[Code] = ...
        InvalidCreaseIndicesElement: ClassVar[Code] = ...
        InvalidCreaseIndicesSize: ClassVar[Code] = ...
        InvalidCreaseLengthElement: ClassVar[Code] = ...
        InvalidCreaseMethod: ClassVar[Code] = ...
        InvalidCreaseWeightsSize: ClassVar[Code] = ...
        InvalidFaceVaryingInterpolationRule: ClassVar[Code] = ...
        InvalidFaceVertexCountsElement: ClassVar[Code] = ...
        InvalidFaceVertexIndicesElement: ClassVar[Code] = ...
        InvalidFaceVertexIndicesSize: ClassVar[Code] = ...
        InvalidOrientation: ClassVar[Code] = ...
        InvalidScheme: ClassVar[Code] = ...
        InvalidTriangleSubdivision: ClassVar[Code] = ...
        InvalidVertexInterpolationRule: ClassVar[Code] = ...
        NegativeCornerWeights: ClassVar[Code] = ...
        NegativeCreaseWeights: ClassVar[Code] = ...
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> Any: ...
        def __reduce__(self) -> Any: ...
    class Invalidation(Boost.Python.instance):
        code: Any
        message: Any
        def __init__(self, arg2: object) -> None: ...
        def __reduce__(self) -> Any: ...
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def __bool__(self) -> bool: ...
    def __iter__(self) -> Any: ...
    def __reduce__(self) -> Any: ...

class OpenSubdivTokens(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def all(self) -> Any: ...
    @property
    def bilinear(self) -> Any: ...
    @property
    def boundaries(self) -> Any: ...
    @property
    def catmullClark(self) -> Any: ...
    @property
    def chaikin(self) -> Any: ...
    @property
    def cornersOnly(self) -> Any: ...
    @property
    def cornersPlus1(self) -> Any: ...
    @property
    def cornersPlus2(self) -> Any: ...
    @property
    def edgeAndCorner(self) -> Any: ...
    @property
    def edgeOnly(self) -> Any: ...
    @property
    def leftHanded(self) -> Any: ...
    @property
    def loop(self) -> Any: ...
    @property
    def none(self) -> Any: ...
    @property
    def rightHanded(self) -> Any: ...
    @property
    def smooth(self) -> Any: ...
    @property
    def uniform(self) -> Any: ...

class SubdivTags(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: object, arg3: object, arg4: object, arg5: object, arg6: IntArray, arg7: IntArray, arg8: FloatArray, arg9: IntArray, arg10: FloatArray) -> None: ...
    def ComputeHash(self) -> int: ...
    def GetCornerIndices(self) -> IntArray: ...
    def GetCornerWeights(self) -> FloatArray: ...
    def GetCreaseIndices(self) -> IntArray: ...
    def GetCreaseLengths(self) -> IntArray: ...
    def GetCreaseMethod(self) -> Any: ...
    def GetCreaseWeights(self) -> FloatArray: ...
    def GetFaceVaryingInterpolationRule(self) -> Any: ...
    def GetTriangleSubdivision(self) -> Any: ...
    def GetVertexInterpolationRule(self) -> Any: ...
    def SetCornerIndices(self, arg2: IntArray) -> None: ...
    def SetCornerWeights(self, arg2: FloatArray) -> None: ...
    def SetCreaseIndices(self, arg2: IntArray) -> None: ...
    def SetCreaseLengths(self, arg2: IntArray) -> None: ...
    def SetCreaseMethod(self, arg2: object) -> None: ...
    def SetCreaseWeights(self, arg2: FloatArray) -> None: ...
    def SetFaceVaryingInterpolationRule(self, arg2: object) -> None: ...
    def SetTriangleSubdivision(self, arg2: object) -> None: ...
    def SetVertexInterpolationRule(self, arg2: object) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...