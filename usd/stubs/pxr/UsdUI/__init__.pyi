import Boost.Python
import pxr.Usd
from typing import Any, ClassVar, overload

class Backdrop(pxr.Usd.Typed):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateDescriptionAttr(self, arg1: Backdrop, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> Backdrop: ...
    def Get(self, stage: Stage, path: Path) -> Backdrop: ...
    def GetDescriptionAttr(self, arg1: Backdrop) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Backdrop) -> object: ...
    def __reduce__(self) -> Any: ...

class NodeGraphNodeAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> NodeGraphNodeAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def CreateDisplayColorAttr(self, arg1: NodeGraphNodeAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateExpansionStateAttr(self, arg1: NodeGraphNodeAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateIconAttr(self, arg1: NodeGraphNodeAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreatePosAttr(self, arg1: NodeGraphNodeAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateSizeAttr(self, arg1: NodeGraphNodeAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateStackingOrderAttr(self, arg1: NodeGraphNodeAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> NodeGraphNodeAPI: ...
    def GetDisplayColorAttr(self, arg1: NodeGraphNodeAPI) -> Attribute: ...
    def GetExpansionStateAttr(self, arg1: NodeGraphNodeAPI) -> Attribute: ...
    def GetIconAttr(self, arg1: NodeGraphNodeAPI) -> Attribute: ...
    def GetPosAttr(self, arg1: NodeGraphNodeAPI) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetSizeAttr(self, arg1: NodeGraphNodeAPI) -> Attribute: ...
    def GetStackingOrderAttr(self, arg1: NodeGraphNodeAPI) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: NodeGraphNodeAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class SceneGraphPrimAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> SceneGraphPrimAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def CreateDisplayGroupAttr(self, arg1: SceneGraphPrimAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateDisplayNameAttr(self, arg1: SceneGraphPrimAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> SceneGraphPrimAPI: ...
    def GetDisplayGroupAttr(self, arg1: SceneGraphPrimAPI) -> Attribute: ...
    def GetDisplayNameAttr(self, arg1: SceneGraphPrimAPI) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: SceneGraphPrimAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def Backdrop(self) -> Any: ...
    @property
    def NodeGraphNodeAPI(self) -> Any: ...
    @property
    def SceneGraphPrimAPI(self) -> Any: ...
    @property
    def closed(self) -> Any: ...
    @property
    def minimized(self) -> Any: ...
    @property
    def open(self) -> Any: ...
    @property
    def uiDescription(self) -> Any: ...
    @property
    def uiDisplayGroup(self) -> Any: ...
    @property
    def uiDisplayName(self) -> Any: ...
    @property
    def uiNodegraphNodeDisplayColor(self) -> Any: ...
    @property
    def uiNodegraphNodeExpansionState(self) -> Any: ...
    @property
    def uiNodegraphNodeIcon(self) -> Any: ...
    @property
    def uiNodegraphNodePos(self) -> Any: ...
    @property
    def uiNodegraphNodeSize(self) -> Any: ...
    @property
    def uiNodegraphNodeStackingOrder(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg1: object, arg2: bool, arg3: object) -> None: ...
    def __bool__(self, arg1: _CanApplyResult) -> bool: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __getitem__(self, arg1: _CanApplyResult, arg2: int) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...