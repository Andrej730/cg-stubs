import Boost.Python
import pxr.Usd
from typing import Any, ClassVar, overload

class AttributeType(Boost.Python.enum):
    Input: ClassVar[AttributeType] = ...
    Invalid: ClassVar[AttributeType] = ...
    Output: ClassVar[AttributeType] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class ConnectableAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    @overload
    def CanConnect(self, input: Input, source: Attribute) -> bool: ...
    @overload
    def CanConnect(self, output: Output, source: Attribute = ...) -> bool: ...
    def ClearSource(self, shadingAttr: Attribute) -> bool: ...
    def ClearSources(self, shadingAttr: Attribute) -> bool: ...
    @overload
    def ConnectToSource(self, shadingAttr: Attribute, source: ConnectableAPI, sourceName: object, sourceType: AttributeType = ..., typeName: ValueTypeName = ...) -> bool: ...
    @overload
    def ConnectToSource(self, shadingAttr: Attribute, sourcePath: Path) -> bool: ...
    @overload
    def ConnectToSource(self, shadingAttr: Attribute, input: Input) -> bool: ...
    @overload
    def ConnectToSource(self, shadingAttr: Attribute, output: Output) -> bool: ...
    @overload
    def ConnectToSource(self, shadingAttr: Attribute, source: ConnectionSourceInfo, mod: ConnectionModification = ...) -> bool: ...
    def CreateInput(self, arg1: ConnectableAPI, name: object, type: ValueTypeName) -> Input: ...
    def CreateOutput(self, arg1: ConnectableAPI, name: object, type: ValueTypeName) -> Output: ...
    def DisconnectSource(self, shadingAttr: Attribute, sourceAttr: Attribute = ...) -> bool: ...
    def Get(self, stage: Stage, path: Path) -> ConnectableAPI: ...
    def GetConnectedSource(self, shadingAttr: Attribute) -> object: ...
    def GetConnectedSources(self, shadingAttr: Attribute) -> object: ...
    def GetInput(self, arg1: ConnectableAPI, name: object) -> Input: ...
    def GetInputs(self, arg1: ConnectableAPI, onlyAuthored: bool = ...) -> list: ...
    def GetOutput(self, arg1: ConnectableAPI, name: object) -> Output: ...
    def GetOutputs(self, arg1: ConnectableAPI, onlyAuthored: bool = ...) -> list: ...
    def GetRawConnectedSourcePaths(self, shadingAttr: Attribute) -> list: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def HasConnectableAPI(self, schemaType: Type) -> bool: ...
    def HasConnectedSource(self, shadingAttr: Attribute) -> bool: ...
    def IsContainer(self, arg1: ConnectableAPI) -> bool: ...
    def IsSourceConnectionFromBaseMaterial(self, shadingAttr: Attribute) -> bool: ...
    def RequiresEncapsulation(self, arg1: ConnectableAPI) -> bool: ...
    def SetConnectedSources(self, arg1: Attribute, arg2: object) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: ConnectableAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class ConnectionModification(Boost.Python.enum):
    Append: ClassVar[ConnectionModification] = ...
    Prepend: ClassVar[ConnectionModification] = ...
    Replace: ClassVar[ConnectionModification] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class ConnectionSourceInfo(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    source: Any
    sourceName: Any
    sourceType: Any
    typeName: Any
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, source: ConnectableAPI, sourceName: object, sourceType: AttributeType, typeName: ValueTypeName = ...) -> None: ...
    @overload
    def __init__(self, arg1: object, input: Input) -> None: ...
    @overload
    def __init__(self, arg1: object, output: Output) -> None: ...
    @overload
    def __init__(self, arg1: object, arg2: Stage, arg3: Path) -> None: ...
    def IsValid(self, arg1: ConnectionSourceInfo) -> bool: ...
    def __bool__(self, arg1: ConnectionSourceInfo) -> bool: ...
    def __eq__(self, arg1: ConnectionSourceInfo, arg2: ConnectionSourceInfo) -> bool: ...
    def __ne__(self, arg1: ConnectionSourceInfo, arg2: ConnectionSourceInfo) -> bool: ...
    def __reduce__(self) -> Any: ...

class CoordSysAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, arg2: Prim, arg3: object) -> None: ...
    @overload
    def __init__(self, arg1: object, arg2: SchemaBase, arg3: object) -> None: ...
    def Apply(self, prim: Prim, name: object) -> CoordSysAPI: ...
    def ApplyAndBind(self, arg1: CoordSysAPI, name: object, path: Path) -> bool: ...
    @overload
    def Bind(self, arg1: CoordSysAPI, name: object, path: Path) -> bool: ...
    @overload
    def Bind(self, arg1: CoordSysAPI, path: Path) -> bool: ...
    def BlockBinding(self, arg1: CoordSysAPI, name: object) -> bool: ...
    def CanApply(self, prim: Prim, name: object) -> _CanApplyResult: ...
    def CanContainPropertyName(self, name: object) -> bool: ...
    @overload
    def ClearBinding(self, arg1: CoordSysAPI, name: object, removeSpec: bool) -> bool: ...
    @overload
    def ClearBinding(self, arg1: CoordSysAPI, removeSpec: bool) -> bool: ...
    def CreateBindingRel(self, arg1: CoordSysAPI) -> Relationship: ...
    def FindBindingWithInheritance(self, arg1: CoordSysAPI) -> object: ...
    def FindBindingsWithInheritance(self, arg1: CoordSysAPI) -> list: ...
    def FindBindingsWithInheritanceForPrim(self, arg1: Prim) -> list: ...
    @overload
    def Get(self, stage: Stage, path: Path) -> CoordSysAPI: ...
    @overload
    def Get(self, prim: Prim, name: object) -> CoordSysAPI: ...
    def GetAll(self, prim: Prim) -> list: ...
    def GetBindingRel(self, arg1: CoordSysAPI) -> Relationship: ...
    def GetCoordSysRelationshipName(self, coordSysName: object) -> object: ...
    def GetLocalBinding(self, arg1: CoordSysAPI) -> object: ...
    def GetLocalBindings(self, arg1: CoordSysAPI) -> list: ...
    def GetLocalBindingsForPrim(self, prim: Prim) -> list: ...
    @overload
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    @overload
    def GetSchemaAttributeNames(self, arg1: bool, includeInherited: object) -> list: ...
    def HasLocalBindings(self, arg1: CoordSysAPI) -> bool: ...
    def HasLocalBindingsForPrim(self, prim: Prim) -> bool: ...
    def IsCoordSysAPIPath(self, arg1: Path) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: CoordSysAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class Input(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, attr: Attribute) -> None: ...
    def CanConnect(self, arg1: Input, source: Attribute) -> bool: ...
    def ClearConnectability(self, arg1: Input) -> bool: ...
    def ClearSdrMetadata(self, arg1: Input) -> None: ...
    def ClearSdrMetadataByKey(self, arg1: Input, key: object) -> None: ...
    def ClearSource(self, arg1: Input) -> bool: ...
    def ClearSources(self, arg1: Input) -> bool: ...
    @overload
    def ConnectToSource(self, arg1: Input, source: ConnectionSourceInfo, mod: ConnectionModification = ...) -> bool: ...
    @overload
    def ConnectToSource(self, arg1: Input, source: ConnectableAPI, sourceName: object, sourceType: AttributeType = ..., typeName: ValueTypeName = ...) -> bool: ...
    @overload
    def ConnectToSource(self, arg1: Input, sourcePath: Path) -> bool: ...
    @overload
    def ConnectToSource(self, arg1: Input, input: Input) -> bool: ...
    @overload
    def ConnectToSource(self, arg1: Input, output: Output) -> bool: ...
    def DisconnectSource(self, arg1: Input, sourceAttr: Attribute = ...) -> bool: ...
    def Get(self, arg1: Input, time: TimeCode = ...) -> object: ...
    def GetAttr(self, arg1: Input) -> Attribute: ...
    def GetBaseName(self, arg1: Input) -> object: ...
    def GetConnectability(self, arg1: Input) -> object: ...
    def GetConnectedSource(self, arg1: Input) -> object: ...
    def GetConnectedSources(self, arg1: Input) -> object: ...
    def GetDisplayGroup(self, arg1: Input) -> str: ...
    def GetDocumentation(self, arg1: Input) -> str: ...
    def GetFullName(self, arg1: Input) -> object: ...
    def GetPrim(self, arg1: Input) -> Prim: ...
    def GetRawConnectedSourcePaths(self, arg1: Input) -> list: ...
    def GetRenderType(self, arg1: Input) -> object: ...
    def GetSdrMetadata(self, arg1: Input) -> object: ...
    def GetSdrMetadataByKey(self, arg1: Input, key: object) -> str: ...
    def GetTypeName(self, arg1: Input) -> ValueTypeName: ...
    def GetValueProducingAttribute(self, arg1: Input) -> object: ...
    def GetValueProducingAttributes(self, arg1: Input, shaderOutputsOnly: bool = ...) -> object: ...
    def HasConnectedSource(self, arg1: Input) -> bool: ...
    def HasRenderType(self, arg1: Input) -> bool: ...
    def HasSdrMetadata(self, arg1: Input) -> bool: ...
    def HasSdrMetadataByKey(self, arg1: Input, key: object) -> bool: ...
    def IsInput(self, arg1: Attribute) -> bool: ...
    def IsInterfaceInputName(self, arg1: object) -> bool: ...
    def IsSourceConnectionFromBaseMaterial(self, arg1: Input) -> bool: ...
    def Set(self, arg1: Input, value: object, time: TimeCode = ...) -> bool: ...
    def SetConnectability(self, arg1: Input, arg2: object) -> bool: ...
    def SetConnectedSources(self, arg1: Input, arg2: object) -> bool: ...
    def SetDisplayGroup(self, arg1: Input, arg2: object) -> bool: ...
    def SetDocumentation(self, arg1: Input, arg2: object) -> bool: ...
    def SetRenderType(self, arg1: Input, renderType: object) -> bool: ...
    def SetSdrMetadata(self, arg1: Input, sdrMetadata: object) -> None: ...
    def SetSdrMetadataByKey(self, arg1: Input, key: object, value: object) -> None: ...
    def __bool__(self, arg1: Input) -> object: ...
    def __eq__(self, arg1: Input, arg2: Input) -> object: ...
    def __ne__(self, arg1: Input, arg2: Input) -> object: ...
    def __reduce__(self) -> Any: ...

class Material(NodeGraph):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def ClearBaseMaterial(self, arg1: Material) -> None: ...
    def ComputeDisplacementSource(self, arg1: Material, renderContext: object = ...) -> object: ...
    def ComputeSurfaceSource(self, arg1: Material, renderContext: object = ...) -> object: ...
    def ComputeVolumeSource(self, arg1: Material, renderContext: object = ...) -> object: ...
    def CreateDisplacementAttr(self, arg1: Material, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateDisplacementOutput(self, arg1: Material, renderContext: object = ...) -> Output: ...
    def CreateMasterMaterialVariant(self, masterPrim: Prim, materialPrims: object, masterVariantSetName: object = ...) -> bool: ...
    def CreateSurfaceAttr(self, arg1: Material, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateSurfaceOutput(self, arg1: Material, renderContext: object = ...) -> Output: ...
    def CreateVolumeAttr(self, arg1: Material, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVolumeOutput(self, arg1: Material, renderContext: object = ...) -> Output: ...
    def Define(self, stage: Stage, path: Path) -> Material: ...
    def Get(self, stage: Stage, path: Path) -> Material: ...
    def GetBaseMaterial(self, arg1: Material) -> Material: ...
    def GetBaseMaterialPath(self, arg1: Material) -> Path: ...
    def GetDisplacementAttr(self, arg1: Material) -> Attribute: ...
    def GetDisplacementOutput(self, arg1: Material, renderContext: object = ...) -> Output: ...
    def GetDisplacementOutputs(self, arg1: Material) -> object: ...
    def GetEditContextForVariant(self, arg1: Material, materialVariantName: object, layer: Layer = ...) -> EditContext: ...
    def GetMaterialVariant(self, arg1: Material) -> VariantSet: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetSurfaceAttr(self, arg1: Material) -> Attribute: ...
    def GetSurfaceOutput(self, arg1: Material, renderContext: object = ...) -> Output: ...
    def GetSurfaceOutputs(self, arg1: Material) -> object: ...
    def GetVolumeAttr(self, arg1: Material) -> Attribute: ...
    def GetVolumeOutput(self, arg1: Material, renderContext: object = ...) -> Output: ...
    def GetVolumeOutputs(self, arg1: Material) -> object: ...
    def HasBaseMaterial(self, arg1: Material) -> bool: ...
    def SetBaseMaterial(self, arg1: Material, baseMaterial: Material) -> None: ...
    def SetBaseMaterialPath(self, arg1: Material, baseLookPath: Path) -> None: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Material) -> object: ...
    def __reduce__(self) -> Any: ...

class MaterialBindingAPI(pxr.Usd.APISchemaBase):
    class CollectionBinding(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        @overload
        def __init__(self, arg1: object) -> None: ...
        @overload
        def __init__(self, arg1: object) -> None: ...
        @overload
        def __init__(self, arg1: object, collBindingRel: Relationship) -> None: ...
        def GetBindingRel(self, arg1: CollectionBinding) -> Relationship: ...
        def GetCollection(self, arg1: CollectionBinding) -> CollectionAPI: ...
        def GetCollectionPath(self, arg1: CollectionBinding) -> Path: ...
        def GetMaterial(self, arg1: CollectionBinding) -> Material: ...
        def GetMaterialPath(self, arg1: CollectionBinding) -> Path: ...
        def IsCollectionBindingRel(self, bindingRel: Relationship) -> bool: ...
        def IsValid(self, arg1: CollectionBinding) -> bool: ...
        def __reduce__(self) -> Any: ...
    class DirectBinding(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        @overload
        def __init__(self, arg1: object) -> None: ...
        @overload
        def __init__(self, arg1: object) -> None: ...
        @overload
        def __init__(self, arg1: object, bindingRel: Relationship) -> None: ...
        def GetBindingRel(self, arg1: DirectBinding) -> Relationship: ...
        def GetMaterial(self, arg1: DirectBinding) -> Material: ...
        def GetMaterialPath(self, arg1: DirectBinding) -> Path: ...
        def GetMaterialPurpose(self, arg1: DirectBinding) -> object: ...
        def __reduce__(self) -> Any: ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def AddPrimToBindingCollection(self, arg1: MaterialBindingAPI, prim: Prim, bindingName: object, materialPurpose: object = ...) -> bool: ...
    def Apply(self, prim: Prim) -> MaterialBindingAPI: ...
    @overload
    def Bind(self, arg1: MaterialBindingAPI, material: Material, bindingStrength: object = ..., materialPurpose: object = ...) -> bool: ...
    @overload
    def Bind(self, arg1: MaterialBindingAPI, collection: CollectionAPI, material: Material, bindingName: object = ..., bindingStrength: object = ..., materialPurpose: object = ...) -> bool: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def CanContainPropertyName(self, name: object) -> bool: ...
    def ComputeBoundMaterial(self, arg1: MaterialBindingAPI, materialPurpose: object = ...) -> object: ...
    def ComputeBoundMaterials(self, prims: object, materialPurpose: object = ...) -> object: ...
    def CreateMaterialBindSubset(self, arg1: MaterialBindingAPI, subsetName: object, indices: IntArray, elementType: object = ...) -> Subset: ...
    def Get(self, stage: Stage, path: Path) -> MaterialBindingAPI: ...
    def GetCollectionBindingRel(self, arg1: MaterialBindingAPI, bindingName: object, materialPurpose: object = ...) -> Relationship: ...
    def GetCollectionBindingRels(self, arg1: MaterialBindingAPI, materialPurpose: object = ...) -> list: ...
    def GetCollectionBindings(self, arg1: MaterialBindingAPI, materialPurpose: object = ...) -> list: ...
    def GetDirectBinding(self, arg1: MaterialBindingAPI, materialPurpose: object = ...) -> DirectBinding: ...
    def GetDirectBindingRel(self, arg1: MaterialBindingAPI, materialPurpose: object = ...) -> Relationship: ...
    def GetMaterialBindSubsets(self, arg1: MaterialBindingAPI) -> list: ...
    def GetMaterialBindSubsetsFamilyType(self, arg1: MaterialBindingAPI) -> object: ...
    def GetMaterialBindingStrength(self, bindingRel: Relationship) -> object: ...
    def GetMaterialPurposes(self) -> object: ...
    def GetResolvedTargetPathFromBindingRel(self, bindingRel: Relationship) -> Path: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def RemovePrimFromBindingCollection(self, arg1: MaterialBindingAPI, prim: Prim, bindingName: object, materialPurpose: object = ...) -> bool: ...
    def SetMaterialBindSubsetsFamilyType(self, arg1: MaterialBindingAPI, familyType: object) -> bool: ...
    def SetMaterialBindingStrength(self, arg1: Relationship, bindingRel: object) -> bool: ...
    def UnbindAllBindings(self, arg1: MaterialBindingAPI) -> bool: ...
    def UnbindCollectionBinding(self, arg1: MaterialBindingAPI, bindingName: object, materialPurpose: object = ...) -> bool: ...
    def UnbindDirectBinding(self, arg1: MaterialBindingAPI, materialPurpose: object = ...) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: MaterialBindingAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class NodeDefAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> NodeDefAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def CreateIdAttr(self, arg1: NodeDefAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateImplementationSourceAttr(self, arg1: NodeDefAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> NodeDefAPI: ...
    def GetIdAttr(self, arg1: NodeDefAPI) -> Attribute: ...
    def GetImplementationSource(self, arg1: NodeDefAPI) -> object: ...
    def GetImplementationSourceAttr(self, arg1: NodeDefAPI) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetShaderId(self, arg1: NodeDefAPI) -> object: ...
    def GetShaderNodeForSourceType(self, arg1: NodeDefAPI, sourceType: object) -> ShaderNode: ...
    def GetSourceAsset(self, arg1: NodeDefAPI, sourceType: object = ...) -> object: ...
    def GetSourceAssetSubIdentifier(self, arg1: NodeDefAPI, sourceType: object = ...) -> object: ...
    def GetSourceCode(self, arg1: NodeDefAPI, sourceType: object = ...) -> object: ...
    def SetShaderId(self, arg1: NodeDefAPI, arg2: object) -> bool: ...
    def SetSourceAsset(self, arg1: NodeDefAPI, sourceAsset: AssetPath, sourceType: object = ...) -> bool: ...
    def SetSourceAssetSubIdentifier(self, arg1: NodeDefAPI, subIdentifier: object, sourceType: object = ...) -> bool: ...
    def SetSourceCode(self, arg1: NodeDefAPI, sourceCode: object, sourceType: object = ...) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: NodeDefAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class NodeGraph(pxr.Usd.Typed):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    @overload
    def __init__(self, arg1: object, connectable: ConnectableAPI) -> None: ...
    def ComputeInterfaceInputConsumersMap(self, arg1: NodeGraph, computeTransitiveConsumers: bool = ...) -> dict: ...
    def ComputeOutputSource(self, arg1: NodeGraph, outputName: object) -> object: ...
    def ConnectableAPI(self, arg1: NodeGraph) -> ConnectableAPI: ...
    def CreateInput(self, arg1: NodeGraph, name: object, type: ValueTypeName) -> Input: ...
    def CreateOutput(self, arg1: NodeGraph, name: object, typeName: ValueTypeName) -> Output: ...
    def Define(self, stage: Stage, path: Path) -> NodeGraph: ...
    def Get(self, stage: Stage, path: Path) -> NodeGraph: ...
    def GetInput(self, arg1: NodeGraph, name: object) -> Input: ...
    def GetInputs(self, arg1: NodeGraph, onlyAuthored: bool = ...) -> list: ...
    def GetInterfaceInputs(self, arg1: NodeGraph) -> list: ...
    def GetOutput(self, arg1: NodeGraph, name: object) -> Output: ...
    def GetOutputs(self, arg1: NodeGraph, onlyAuthored: bool = ...) -> list: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: NodeGraph) -> object: ...
    def __reduce__(self) -> Any: ...

class Output(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, attr: Attribute) -> None: ...
    def CanConnect(self, arg1: Output, source: Attribute) -> bool: ...
    def ClearSdrMetadata(self, arg1: Output) -> None: ...
    def ClearSdrMetadataByKey(self, arg1: Output, key: object) -> None: ...
    def ClearSource(self, arg1: Output) -> bool: ...
    def ClearSources(self, arg1: Output) -> bool: ...
    @overload
    def ConnectToSource(self, arg1: Output, source: ConnectionSourceInfo, mod: ConnectionModification = ...) -> bool: ...
    @overload
    def ConnectToSource(self, arg1: Output, source: ConnectableAPI, sourceName: object, sourceType: AttributeType = ..., typeName: ValueTypeName = ...) -> bool: ...
    @overload
    def ConnectToSource(self, arg1: Output, sourcePath: Path) -> bool: ...
    @overload
    def ConnectToSource(self, arg1: Output, sourceInput: Input) -> bool: ...
    @overload
    def ConnectToSource(self, arg1: Output, sourceOutput: Output) -> bool: ...
    def DisconnectSource(self, arg1: Output, sourceAttr: Attribute = ...) -> bool: ...
    def GetAttr(self, arg1: Output) -> Attribute: ...
    def GetBaseName(self, arg1: Output) -> object: ...
    def GetConnectedSource(self, arg1: Output) -> object: ...
    def GetConnectedSources(self, arg1: Output) -> object: ...
    def GetFullName(self, arg1: Output) -> object: ...
    def GetPrim(self, arg1: Output) -> Prim: ...
    def GetRawConnectedSourcePaths(self, arg1: Output) -> list: ...
    def GetRenderType(self, arg1: Output) -> object: ...
    def GetSdrMetadata(self, arg1: Output) -> object: ...
    def GetSdrMetadataByKey(self, arg1: Output, key: object) -> str: ...
    def GetTypeName(self, arg1: Output) -> ValueTypeName: ...
    def GetValueProducingAttributes(self, arg1: Output, shaderOutputsOnly: bool = ...) -> object: ...
    def HasConnectedSource(self, arg1: Output) -> bool: ...
    def HasRenderType(self, arg1: Output) -> bool: ...
    def HasSdrMetadata(self, arg1: Output) -> bool: ...
    def HasSdrMetadataByKey(self, arg1: Output, key: object) -> bool: ...
    def IsOutput(self, arg1: Attribute) -> bool: ...
    def IsSourceConnectionFromBaseMaterial(self, arg1: Output) -> bool: ...
    def Set(self, arg1: Output, value: object, time: TimeCode = ...) -> bool: ...
    def SetConnectedSources(self, arg1: Output, arg2: object) -> bool: ...
    def SetRenderType(self, arg1: Output, renderType: object) -> bool: ...
    def SetSdrMetadata(self, arg1: Output, sdrMetadata: object) -> None: ...
    def SetSdrMetadataByKey(self, arg1: Output, key: object, value: object) -> None: ...
    def __bool__(self, arg1: Output) -> object: ...
    def __eq__(self, arg1: Output, arg2: Output) -> object: ...
    def __ne__(self, arg1: Output, arg2: Output) -> object: ...
    def __reduce__(self) -> Any: ...

class Shader(pxr.Usd.Typed):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    @overload
    def __init__(self, arg1: object, connectable: ConnectableAPI) -> None: ...
    def ClearSdrMetadata(self, arg1: Shader) -> None: ...
    def ClearSdrMetadataByKey(self, arg1: Shader, key: object) -> None: ...
    def ConnectableAPI(self, arg1: Shader) -> ConnectableAPI: ...
    def CreateIdAttr(self, arg1: Shader, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateImplementationSourceAttr(self, arg1: Shader, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateInput(self, arg1: Shader, name: object, type: ValueTypeName) -> Input: ...
    def CreateOutput(self, arg1: Shader, name: object, type: ValueTypeName) -> Output: ...
    def Define(self, stage: Stage, path: Path) -> Shader: ...
    def Get(self, stage: Stage, path: Path) -> Shader: ...
    def GetIdAttr(self, arg1: Shader) -> Attribute: ...
    def GetImplementationSource(self, arg1: Shader) -> object: ...
    def GetImplementationSourceAttr(self, arg1: Shader) -> Attribute: ...
    def GetInput(self, arg1: Shader, name: object) -> Input: ...
    def GetInputs(self, arg1: Shader, onlyAuthored: bool = ...) -> list: ...
    def GetOutput(self, arg1: Shader, name: object) -> Output: ...
    def GetOutputs(self, arg1: Shader, onlyAuthored: bool = ...) -> list: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetSdrMetadata(self, arg1: Shader) -> object: ...
    def GetSdrMetadataByKey(self, arg1: Shader, key: object) -> str: ...
    def GetShaderId(self, arg1: Shader) -> object: ...
    def GetShaderNodeForSourceType(self, arg1: Shader, sourceType: object) -> ShaderNode: ...
    def GetSourceAsset(self, arg1: Shader, sourceType: object = ...) -> object: ...
    def GetSourceAssetSubIdentifier(self, arg1: Shader, sourceType: object = ...) -> object: ...
    def GetSourceCode(self, arg1: Shader, sourceType: object = ...) -> object: ...
    def HasSdrMetadata(self, arg1: Shader) -> bool: ...
    def HasSdrMetadataByKey(self, arg1: Shader, key: object) -> bool: ...
    def SetSdrMetadata(self, arg1: Shader, sdrMetadata: object) -> None: ...
    def SetSdrMetadataByKey(self, arg1: Shader, key: object, value: object) -> None: ...
    def SetShaderId(self, arg1: Shader, arg2: object) -> bool: ...
    def SetSourceAsset(self, arg1: Shader, sourceAsset: AssetPath, sourceType: object = ...) -> bool: ...
    def SetSourceAssetSubIdentifier(self, arg1: Shader, subIdentifier: object, sourceType: object = ...) -> bool: ...
    def SetSourceCode(self, arg1: Shader, sourceCode: object, sourceType: object = ...) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Shader) -> object: ...
    def __reduce__(self) -> Any: ...

class ShaderDefParserPlugin(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg1: object) -> None: ...
    def GetDiscoveryTypes(self, arg1: ShaderDefParserPlugin) -> object: ...
    def GetSourceType(self, arg1: ShaderDefParserPlugin) -> object: ...
    def Parse(self, arg1: ShaderDefParserPlugin, arg2: NodeDiscoveryResult) -> ShaderNode: ...
    def __reduce__(self) -> Any: ...

class ShaderDefUtils(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def GetNodeDiscoveryResults(self, shaderDef: Shader, sourceUri: object) -> list: ...
    def GetPrimvarNamesMetadataString(self, metadata: object, shaderDef: ConnectableAPI) -> str: ...
    def GetShaderProperties(self, shaderDef: ConnectableAPI) -> list: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def ConnectableAPI(self) -> Any: ...
    @property
    def CoordSysAPI(self) -> Any: ...
    @property
    def Material(self) -> Any: ...
    @property
    def MaterialBindingAPI(self) -> Any: ...
    @property
    def NodeDefAPI(self) -> Any: ...
    @property
    def NodeGraph(self) -> Any: ...
    @property
    def Shader(self) -> Any: ...
    @property
    def allPurpose(self) -> Any: ...
    @property
    def bindMaterialAs(self) -> Any: ...
    @property
    def coordSys(self) -> Any: ...
    @property
    def coordSys_MultipleApplyTemplate_Binding(self) -> Any: ...
    @property
    def displacement(self) -> Any: ...
    @property
    def fallbackStrength(self) -> Any: ...
    @property
    def full(self) -> Any: ...
    @property
    def id(self) -> Any: ...
    @property
    def infoId(self) -> Any: ...
    @property
    def infoImplementationSource(self) -> Any: ...
    @property
    def inputs(self) -> Any: ...
    @property
    def interfaceOnly(self) -> Any: ...
    @property
    def materialBind(self) -> Any: ...
    @property
    def materialBinding(self) -> Any: ...
    @property
    def materialBindingCollection(self) -> Any: ...
    @property
    def materialVariant(self) -> Any: ...
    @property
    def outputs(self) -> Any: ...
    @property
    def outputsDisplacement(self) -> Any: ...
    @property
    def outputsSurface(self) -> Any: ...
    @property
    def outputsVolume(self) -> Any: ...
    @property
    def preview(self) -> Any: ...
    @property
    def sdrMetadata(self) -> Any: ...
    @property
    def sourceAsset(self) -> Any: ...
    @property
    def sourceCode(self) -> Any: ...
    @property
    def strongerThanDescendants(self) -> Any: ...
    @property
    def subIdentifier(self) -> Any: ...
    @property
    def surface(self) -> Any: ...
    @property
    def universalRenderContext(self) -> Any: ...
    @property
    def universalSourceType(self) -> Any: ...
    @property
    def volume(self) -> Any: ...
    @property
    def weakerThanDescendants(self) -> Any: ...

class UdimUtils(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def IsUdimIdentifier(self, identifier: object) -> bool: ...
    def ReplaceUdimPattern(self, identifierWithPattern: object, replacement: object) -> str: ...
    def ResolveUdimPath(self, udimPath: object, layer: Layer) -> str: ...
    def ResolveUdimTilePaths(self, udimPath: object, layer: Layer) -> object: ...
    def __reduce__(self) -> Any: ...

class Utils(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def GetBaseNameAndType(self, arg1: object) -> object: ...
    def GetConnectedSourcePath(self, connectionSourceInfo: ConnectionSourceInfo) -> Path: ...
    def GetFullName(self, arg1: object, arg2: AttributeType) -> object: ...
    def GetPrefixForAttributeType(self, arg1: AttributeType) -> str: ...
    def GetType(self, arg1: object) -> AttributeType: ...
    @overload
    def GetValueProducingAttributes(self, input: Input, shaderOutputsOnly: bool = ...) -> object: ...
    @overload
    def GetValueProducingAttributes(self, output: Output, shaderOutputsOnly: bool = ...) -> object: ...
    def __reduce__(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg1: object, arg2: bool, arg3: object) -> None: ...
    def __bool__(self, arg1: _CanApplyResult) -> bool: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __getitem__(self, arg1: _CanApplyResult, arg2: int) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...