import Boost.Python
import pxr.Sdf
from typing import Any, ClassVar, overload

class AttributeType(Boost.Python.enum):
    Input: ClassVar[AttributeType] = ...
    Invalid: ClassVar[AttributeType] = ...
    Output: ClassVar[AttributeType] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class ConnectableAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    @classmethod
    def CanConnect(cls, input: Input, source: pxr.Usd.Attribute) -> bool: ...
    @overload
    @classmethod
    def CanConnect(cls, output: Output, source: pxr.Usd.Attribute = ...) -> bool: ...
    @classmethod
    def ClearSource(cls, shadingAttr: pxr.Usd.Attribute) -> bool: ...
    @classmethod
    def ClearSources(cls, shadingAttr: pxr.Usd.Attribute) -> bool: ...
    @overload
    @classmethod
    def ConnectToSource(cls, shadingAttr: pxr.Usd.Attribute, source: ConnectableAPI, sourceName: object, sourceType: AttributeType = ..., typeName: pxr.Sdf.ValueTypeName = ...) -> bool: ...
    @overload
    @classmethod
    def ConnectToSource(cls, shadingAttr: pxr.Usd.Attribute, sourcePath: pxr.Sdf.Path) -> bool: ...
    @overload
    @classmethod
    def ConnectToSource(cls, shadingAttr: pxr.Usd.Attribute, input: Input) -> bool: ...
    @overload
    @classmethod
    def ConnectToSource(cls, shadingAttr: pxr.Usd.Attribute, output: Output) -> bool: ...
    @overload
    @classmethod
    def ConnectToSource(cls, shadingAttr: pxr.Usd.Attribute, source: ConnectionSourceInfo, mod: ConnectionModification = ...) -> bool: ...
    def CreateInput(self, name: str, type: pxr.Sdf.ValueTypeName) -> Input: ...
    def CreateOutput(self, name: str, type: pxr.Sdf.ValueTypeName) -> Output: ...
    @classmethod
    def DisconnectSource(cls, shadingAttr: pxr.Usd.Attribute, sourceAttr: pxr.Usd.Attribute = ...) -> bool: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> ConnectableAPI: ...
    @classmethod
    def GetConnectedSource(cls, shadingAttr: pxr.Usd.Attribute) -> Any: ...
    @classmethod
    def GetConnectedSources(cls, shadingAttr: pxr.Usd.Attribute) -> Any: ...
    def GetInput(self, name: str) -> Input: ...
    def GetInputs(self, onlyAuthored: bool = ...) -> list[Input]: ...
    def GetOutput(self, name: str) -> Output: ...
    def GetOutputs(self, onlyAuthored: bool = ...) -> list[Output]: ...
    @classmethod
    def GetRawConnectedSourcePaths(cls, shadingAttr: pxr.Usd.Attribute) -> list: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def HasConnectableAPI(cls, schemaType: Type) -> bool: ...
    @classmethod
    def HasConnectedSource(cls, shadingAttr: pxr.Usd.Attribute) -> bool: ...
    def IsContainer(self) -> bool: ...
    @classmethod
    def IsSourceConnectionFromBaseMaterial(cls, shadingAttr: pxr.Usd.Attribute) -> bool: ...
    def RequiresEncapsulation(self) -> bool: ...
    @classmethod
    def SetConnectedSources(cls, arg1: pxr.Usd.Attribute, arg2: list[ConnectionSourceInfo]) -> bool: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class ConnectionModification(Boost.Python.enum):
    Append: ClassVar[ConnectionModification] = ...
    Prepend: ClassVar[ConnectionModification] = ...
    Replace: ClassVar[ConnectionModification] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class ConnectionSourceInfo(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    source: Any
    sourceName: Any
    sourceType: Any
    typeName: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, source: ConnectableAPI, sourceName: object, sourceType: AttributeType, typeName: pxr.Sdf.ValueTypeName = ...) -> None: ...
    @overload
    def __init__(self, input: Input) -> None: ...
    @overload
    def __init__(self, output: Output) -> None: ...
    @overload
    def __init__(self, arg2: pxr.Usd.Stage, arg3: pxr.Sdf.Path) -> None: ...
    def IsValid(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class CoordSysAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: pxr.Usd.Prim, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: pxr.Usd.SchemaBase, arg3: object) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim, name: str) -> CoordSysAPI: ...
    def ApplyAndBind(self, name: str, path: pxr.Sdf.Path) -> bool: ...
    @overload
    def Bind(self, path: pxr.Sdf.Path) -> bool: ...
    @overload
    def Bind(self, name: str, path: pxr.Sdf.Path) -> bool: ...
    def BlockBinding(self, name: object) -> bool: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim, name: str) -> _CanApplyResult: ...
    @classmethod
    def CanContainPropertyName(cls, name: str) -> bool: ...
    @overload
    def ClearBinding(self, removeSpec: bool) -> bool: ...
    @overload
    def ClearBinding(self, name: str, removeSpec: bool) -> bool: ...
    def CreateBindingRel(self) -> pxr.Usd.Relationship: ...
    def FindBindingWithInheritance(self) -> Binding: ...
    def FindBindingsWithInheritance(self) -> list[Binding]: ...
    @classmethod
    def FindBindingsWithInheritanceForPrim(cls, arg1: pxr.Usd.Prim) -> list[Binding]: ...
    @overload
    @classmethod
    def Get(cls, prim: pxr.Usd.Prim, name: str) -> CoordSysAPI: ...
    @overload
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> CoordSysAPI: ...
    @classmethod
    def GetAll(cls, prim: pxr.Usd.Prim) -> list[CoordSysAPI]: ...
    def GetBindingRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def GetCoordSysRelationshipName(cls, coordSysName: str) -> str: ...
    def GetLocalBinding(self) -> Binding: ...
    def GetLocalBindings(self) -> list[Binding]: ...
    @classmethod
    def GetLocalBindingsForPrim(cls, prim: pxr.Usd.Prim) -> list[Binding]: ...
    @overload
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @overload
    @classmethod
    def GetSchemaAttributeNames(cls, arg1: bool, includeInherited: str) -> list[str]: ...
    def HasLocalBindings(self) -> bool: ...
    @classmethod
    def HasLocalBindingsForPrim(cls, prim: pxr.Usd.Prim) -> bool: ...
    @classmethod
    def IsCoordSysAPIPath(cls, arg1: pxr.Sdf.Path) -> bool: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class Input(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, attr: pxr.Usd.Attribute) -> None: ...
    def CanConnect(self, source: pxr.Usd.Attribute) -> bool: ...
    def ClearConnectability(self) -> bool: ...
    def ClearSdrMetadata(self) -> None: ...
    def ClearSdrMetadataByKey(self, key: str) -> None: ...
    def ClearSource(self) -> bool: ...
    def ClearSources(self) -> bool: ...
    @overload
    def ConnectToSource(self, input: Input) -> bool: ...
    @overload
    def ConnectToSource(self, output: Output) -> bool: ...
    @overload
    def ConnectToSource(self, sourcePath: pxr.Sdf.Path) -> bool: ...
    @overload
    def ConnectToSource(self, source: ConnectionSourceInfo, mod: ConnectionModification = ...) -> bool: ...
    @overload
    def ConnectToSource(self, source: ConnectableAPI, sourceName: str, sourceType: AttributeType = ..., typeName: pxr.Sdf.ValueTypeName = ...) -> bool: ...
    def DisconnectSource(self, sourceAttr: pxr.Usd.Attribute = ...) -> bool: ...
    def Get(self, time: TimeCode = ...) -> Any: ...
    def GetAttr(self) -> pxr.Usd.Attribute: ...
    def GetBaseName(self) -> str: ...
    def GetConnectability(self) -> str: ...
    def GetConnectedSource(self) -> bool: ...
    def GetConnectedSources(self) -> list[SourceInfo]: ...
    def GetDisplayGroup(self) -> str: ...
    def GetDocumentation(self) -> str: ...
    def GetFullName(self) -> str: ...
    def GetPrim(self) -> pxr.Usd.Prim: ...
    def GetRawConnectedSourcePaths(self) -> list: ...
    def GetRenderType(self) -> str: ...
    def GetSdrMetadata(self) -> pxr.Ndr.TokenMap: ...
    def GetSdrMetadataByKey(self, key: str) -> str: ...
    def GetTypeName(self) -> pxr.Sdf.ValueTypeName: ...
    def GetValueProducingAttribute(self) -> pxr.Usd.Attribute: ...
    def GetValueProducingAttributes(self, shaderOutputsOnly: bool = ...) -> list[Attribute]: ...
    def HasConnectedSource(self) -> bool: ...
    def HasRenderType(self) -> bool: ...
    def HasSdrMetadata(self) -> bool: ...
    def HasSdrMetadataByKey(self, key: str) -> bool: ...
    @classmethod
    def IsInput(cls, arg1: pxr.Usd.Attribute) -> bool: ...
    @classmethod
    def IsInterfaceInputName(cls, arg1: str) -> bool: ...
    def IsSourceConnectionFromBaseMaterial(self) -> bool: ...
    def Set(self, value: object, time: TimeCode = ...) -> bool: ...
    def SetConnectability(self, arg2: str) -> bool: ...
    def SetConnectedSources(self, arg2: list[ConnectionSourceInfo]) -> bool: ...
    def SetDisplayGroup(self, arg2: str) -> bool: ...
    def SetDocumentation(self, arg2: str) -> bool: ...
    def SetRenderType(self, renderType: str) -> bool: ...
    def SetSdrMetadata(self, sdrMetadata: pxr.Ndr.TokenMap) -> None: ...
    def SetSdrMetadataByKey(self, key: str, value: str) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class Material(NodeGraph):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    def ClearBaseMaterial(self) -> None: ...
    def ComputeDisplacementSource(self, renderContext: object = ...) -> Any: ...
    def ComputeSurfaceSource(self, renderContext: object = ...) -> Any: ...
    def ComputeVolumeSource(self, renderContext: object = ...) -> Any: ...
    def CreateDisplacementAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateDisplacementOutput(self, renderContext: str = ...) -> Output: ...
    @classmethod
    def CreateMasterMaterialVariant(cls, masterPrim: pxr.Usd.Prim, materialPrims: list[pxr.Usd.Prim], masterVariantSetName: str = ...) -> bool: ...
    def CreateSurfaceAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateSurfaceOutput(self, renderContext: str = ...) -> Output: ...
    def CreateVolumeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateVolumeOutput(self, renderContext: str = ...) -> Output: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> Material: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> Material: ...
    def GetBaseMaterial(self) -> Material: ...
    def GetBaseMaterialPath(self) -> pxr.Sdf.Path: ...
    def GetDisplacementAttr(self) -> pxr.Usd.Attribute: ...
    def GetDisplacementOutput(self, renderContext: str = ...) -> Output: ...
    def GetDisplacementOutputs(self) -> list[Output]: ...
    def GetEditContextForVariant(self, materialVariantName: str, layer: pxr.Sdf.Layer = ...) -> pxr.Usd.EditContext: ...
    def GetMaterialVariant(self) -> pxr.Usd.VariantSet: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetSurfaceAttr(self) -> pxr.Usd.Attribute: ...
    def GetSurfaceOutput(self, renderContext: str = ...) -> Output: ...
    def GetSurfaceOutputs(self) -> list[Output]: ...
    def GetVolumeAttr(self) -> pxr.Usd.Attribute: ...
    def GetVolumeOutput(self, renderContext: str = ...) -> Output: ...
    def GetVolumeOutputs(self) -> list[Output]: ...
    def HasBaseMaterial(self) -> bool: ...
    def SetBaseMaterial(self, baseMaterial: Material) -> None: ...
    def SetBaseMaterialPath(self, baseLookPath: pxr.Sdf.Path) -> None: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class MaterialBindingAPI(pxr.Usd.APISchemaBase):
    class CollectionBinding(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, collBindingRel: pxr.Usd.Relationship) -> None: ...
        def GetBindingRel(self) -> pxr.Usd.Relationship: ...
        def GetCollection(self) -> pxr.Usd.CollectionAPI: ...
        def GetCollectionPath(self) -> pxr.Sdf.Path: ...
        def GetMaterial(self) -> Material: ...
        def GetMaterialPath(self) -> pxr.Sdf.Path: ...
        def IsCollectionBindingRel(self, bindingRel: pxr.Usd.Relationship) -> bool: ...
        def IsValid(self) -> bool: ...
        def __reduce__(self) -> Any: ...
    class DirectBinding(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, bindingRel: pxr.Usd.Relationship) -> None: ...
        def GetBindingRel(self) -> pxr.Usd.Relationship: ...
        def GetMaterial(self) -> Material: ...
        def GetMaterialPath(self) -> pxr.Sdf.Path: ...
        def GetMaterialPurpose(self) -> Any: ...
        def __reduce__(self) -> Any: ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    def AddPrimToBindingCollection(self, prim: pxr.Usd.Prim, bindingName: str, materialPurpose: str = ...) -> bool: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> MaterialBindingAPI: ...
    @overload
    def Bind(self, material: Material, bindingStrength: str = ..., materialPurpose: str = ...) -> bool: ...
    @overload
    def Bind(self, collection: pxr.Usd.CollectionAPI, material: Material, bindingName: str = ..., bindingStrength: str = ..., materialPurpose: str = ...) -> bool: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    @classmethod
    def CanContainPropertyName(cls, name: str) -> bool: ...
    def ComputeBoundMaterial(self, materialPurpose: object = ...) -> Any: ...
    @classmethod
    def ComputeBoundMaterials(cls, prims: list[pxr.Usd.Prim], materialPurpose: str = ...) -> list[Material]: ...
    def CreateMaterialBindSubset(self, subsetName: str, indices: pxr.Vt.IntArray, elementType: str = ...) -> pxr.UsdGeom.Subset: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> MaterialBindingAPI: ...
    def GetCollectionBindingRel(self, bindingName: str, materialPurpose: str = ...) -> pxr.Usd.Relationship: ...
    def GetCollectionBindingRels(self, materialPurpose: str = ...) -> list[pxr.Usd.Relationship]: ...
    def GetCollectionBindings(self, materialPurpose: str = ...) -> list[CollectionBinding]: ...
    def GetDirectBinding(self, materialPurpose: str = ...) -> MaterialBindingAPI.DirectBinding: ...
    def GetDirectBindingRel(self, materialPurpose: str = ...) -> pxr.Usd.Relationship: ...
    def GetMaterialBindSubsets(self) -> list[pxr.UsdGeom.Subset]: ...
    def GetMaterialBindSubsetsFamilyType(self) -> str: ...
    @classmethod
    def GetMaterialBindingStrength(cls, bindingRel: pxr.Usd.Relationship) -> str: ...
    @classmethod
    def GetMaterialPurposes(cls) -> list[str]: ...
    @classmethod
    def GetResolvedTargetPathFromBindingRel(cls, bindingRel: pxr.Usd.Relationship) -> pxr.Sdf.Path: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def RemovePrimFromBindingCollection(self, prim: pxr.Usd.Prim, bindingName: str, materialPurpose: str = ...) -> bool: ...
    def SetMaterialBindSubsetsFamilyType(self, familyType: str) -> bool: ...
    @classmethod
    def SetMaterialBindingStrength(cls, arg1: pxr.Usd.Relationship, bindingRel: str) -> bool: ...
    def UnbindAllBindings(self) -> bool: ...
    def UnbindCollectionBinding(self, bindingName: str, materialPurpose: str = ...) -> bool: ...
    def UnbindDirectBinding(self, materialPurpose: str = ...) -> bool: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class NodeDefAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> NodeDefAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def CreateIdAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateImplementationSourceAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> NodeDefAPI: ...
    def GetIdAttr(self) -> pxr.Usd.Attribute: ...
    def GetImplementationSource(self) -> str: ...
    def GetImplementationSourceAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetShaderId(self) -> bool: ...
    def GetShaderNodeForSourceType(self, sourceType: str) -> pxr.Sdr.ShaderNode: ...
    def GetSourceAsset(self, sourceType: str = ...) -> bool: ...
    def GetSourceAssetSubIdentifier(self, sourceType: str = ...) -> bool: ...
    def GetSourceCode(self, sourceType: str = ...) -> bool: ...
    def SetShaderId(self, arg2: str) -> bool: ...
    def SetSourceAsset(self, sourceAsset: pxr.Sdf.AssetPath, sourceType: str = ...) -> bool: ...
    def SetSourceAssetSubIdentifier(self, subIdentifier: str, sourceType: str = ...) -> bool: ...
    def SetSourceCode(self, sourceCode: str, sourceType: str = ...) -> bool: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class NodeGraph(pxr.Usd.Typed):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, connectable: ConnectableAPI) -> None: ...
    def ComputeInterfaceInputConsumersMap(self, computeTransitiveConsumers: bool = ...) -> dict: ...
    def ComputeOutputSource(self, outputName: str) -> Shader: ...
    def ConnectableAPI(self) -> ConnectableAPI: ...
    def CreateInput(self, name: str, type: pxr.Sdf.ValueTypeName) -> Input: ...
    def CreateOutput(self, name: str, typeName: pxr.Sdf.ValueTypeName) -> Output: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> NodeGraph: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> NodeGraph: ...
    def GetInput(self, name: str) -> Input: ...
    def GetInputs(self, onlyAuthored: bool = ...) -> list[Input]: ...
    def GetInterfaceInputs(self) -> list[Input]: ...
    def GetOutput(self, name: str) -> Output: ...
    def GetOutputs(self, onlyAuthored: bool = ...) -> list[Output]: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class Output(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, attr: pxr.Usd.Attribute) -> None: ...
    def CanConnect(self, source: pxr.Usd.Attribute) -> bool: ...
    def ClearSdrMetadata(self) -> None: ...
    def ClearSdrMetadataByKey(self, key: str) -> None: ...
    def ClearSource(self) -> bool: ...
    def ClearSources(self) -> bool: ...
    @overload
    def ConnectToSource(self, sourceInput: Input) -> bool: ...
    @overload
    def ConnectToSource(self, sourceOutput: Output) -> bool: ...
    @overload
    def ConnectToSource(self, sourcePath: pxr.Sdf.Path) -> bool: ...
    @overload
    def ConnectToSource(self, source: ConnectionSourceInfo, mod: ConnectionModification = ...) -> bool: ...
    @overload
    def ConnectToSource(self, source: ConnectableAPI, sourceName: str, sourceType: AttributeType = ..., typeName: pxr.Sdf.ValueTypeName = ...) -> bool: ...
    def DisconnectSource(self, sourceAttr: pxr.Usd.Attribute = ...) -> bool: ...
    def GetAttr(self) -> pxr.Usd.Attribute: ...
    def GetBaseName(self) -> str: ...
    def GetConnectedSource(self) -> bool: ...
    def GetConnectedSources(self) -> list[SourceInfo]: ...
    def GetFullName(self) -> str: ...
    def GetPrim(self) -> pxr.Usd.Prim: ...
    def GetRawConnectedSourcePaths(self) -> list: ...
    def GetRenderType(self) -> str: ...
    def GetSdrMetadata(self) -> pxr.Ndr.TokenMap: ...
    def GetSdrMetadataByKey(self, key: str) -> str: ...
    def GetTypeName(self) -> pxr.Sdf.ValueTypeName: ...
    def GetValueProducingAttributes(self, shaderOutputsOnly: bool = ...) -> list[Attribute]: ...
    def HasConnectedSource(self) -> bool: ...
    def HasRenderType(self) -> bool: ...
    def HasSdrMetadata(self) -> bool: ...
    def HasSdrMetadataByKey(self, key: str) -> bool: ...
    @classmethod
    def IsOutput(cls, arg1: pxr.Usd.Attribute) -> bool: ...
    def IsSourceConnectionFromBaseMaterial(self) -> bool: ...
    def Set(self, value: object, time: TimeCode = ...) -> bool: ...
    def SetConnectedSources(self, arg2: list[ConnectionSourceInfo]) -> bool: ...
    def SetRenderType(self, renderType: str) -> bool: ...
    def SetSdrMetadata(self, sdrMetadata: pxr.Ndr.TokenMap) -> None: ...
    def SetSdrMetadataByKey(self, key: str, value: str) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class Shader(pxr.Usd.Typed):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, connectable: ConnectableAPI) -> None: ...
    def ClearSdrMetadata(self) -> None: ...
    def ClearSdrMetadataByKey(self, key: str) -> None: ...
    def ConnectableAPI(self) -> ConnectableAPI: ...
    def CreateIdAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateImplementationSourceAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateInput(self, name: str, type: pxr.Sdf.ValueTypeName) -> Input: ...
    def CreateOutput(self, name: str, type: pxr.Sdf.ValueTypeName) -> Output: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> Shader: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> Shader: ...
    def GetIdAttr(self) -> pxr.Usd.Attribute: ...
    def GetImplementationSource(self) -> str: ...
    def GetImplementationSourceAttr(self) -> pxr.Usd.Attribute: ...
    def GetInput(self, name: str) -> Input: ...
    def GetInputs(self, onlyAuthored: bool = ...) -> list[Input]: ...
    def GetOutput(self, name: str) -> Output: ...
    def GetOutputs(self, onlyAuthored: bool = ...) -> list[Output]: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetSdrMetadata(self) -> pxr.Ndr.TokenMap: ...
    def GetSdrMetadataByKey(self, key: str) -> str: ...
    def GetShaderId(self) -> bool: ...
    def GetShaderNodeForSourceType(self, sourceType: str) -> pxr.Sdr.ShaderNode: ...
    def GetSourceAsset(self, sourceType: str = ...) -> bool: ...
    def GetSourceAssetSubIdentifier(self, sourceType: str = ...) -> bool: ...
    def GetSourceCode(self, sourceType: str = ...) -> bool: ...
    def HasSdrMetadata(self) -> bool: ...
    def HasSdrMetadataByKey(self, key: str) -> bool: ...
    def SetSdrMetadata(self, sdrMetadata: pxr.Ndr.TokenMap) -> None: ...
    def SetSdrMetadataByKey(self, key: str, value: str) -> None: ...
    def SetShaderId(self, arg2: str) -> bool: ...
    def SetSourceAsset(self, sourceAsset: pxr.Sdf.AssetPath, sourceType: str = ...) -> bool: ...
    def SetSourceAssetSubIdentifier(self, subIdentifier: str, sourceType: str = ...) -> bool: ...
    def SetSourceCode(self, sourceCode: str, sourceType: str = ...) -> bool: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class ShaderDefParserPlugin(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def GetDiscoveryTypes(self) -> pxr.Ndr.TokenVec: ...
    def GetSourceType(self) -> str: ...
    def Parse(self, arg2: pxr.Ndr.NodeDiscoveryResult) -> pxr.Sdr.ShaderNode: ...
    def __reduce__(self) -> Any: ...

class ShaderDefUtils(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def GetNodeDiscoveryResults(cls, shaderDef: Shader, sourceUri: str) -> list: ...
    @classmethod
    def GetPrimvarNamesMetadataString(cls, metadata: pxr.Ndr.TokenMap, shaderDef: ConnectableAPI) -> str: ...
    @classmethod
    def GetShaderProperties(cls, shaderDef: ConnectableAPI) -> list: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def ConnectableAPI(self) -> Any: ...
    @property
    def CoordSysAPI(self) -> Any: ...
    @property
    def Material(self) -> Any: ...
    @property
    def MaterialBindingAPI(self) -> Any: ...
    @property
    def NodeDefAPI(self) -> Any: ...
    @property
    def NodeGraph(self) -> Any: ...
    @property
    def Shader(self) -> Any: ...
    @property
    def allPurpose(self) -> Any: ...
    @property
    def bindMaterialAs(self) -> Any: ...
    @property
    def coordSys(self) -> Any: ...
    @property
    def coordSys_MultipleApplyTemplate_Binding(self) -> Any: ...
    @property
    def displacement(self) -> Any: ...
    @property
    def fallbackStrength(self) -> Any: ...
    @property
    def full(self) -> Any: ...
    @property
    def id(self) -> Any: ...
    @property
    def infoId(self) -> Any: ...
    @property
    def infoImplementationSource(self) -> Any: ...
    @property
    def inputs(self) -> Any: ...
    @property
    def interfaceOnly(self) -> Any: ...
    @property
    def materialBind(self) -> Any: ...
    @property
    def materialBinding(self) -> Any: ...
    @property
    def materialBindingCollection(self) -> Any: ...
    @property
    def materialVariant(self) -> Any: ...
    @property
    def outputs(self) -> Any: ...
    @property
    def outputsDisplacement(self) -> Any: ...
    @property
    def outputsSurface(self) -> Any: ...
    @property
    def outputsVolume(self) -> Any: ...
    @property
    def preview(self) -> Any: ...
    @property
    def sdrMetadata(self) -> Any: ...
    @property
    def sourceAsset(self) -> Any: ...
    @property
    def sourceCode(self) -> Any: ...
    @property
    def strongerThanDescendants(self) -> Any: ...
    @property
    def subIdentifier(self) -> Any: ...
    @property
    def surface(self) -> Any: ...
    @property
    def universalRenderContext(self) -> Any: ...
    @property
    def universalSourceType(self) -> Any: ...
    @property
    def volume(self) -> Any: ...
    @property
    def weakerThanDescendants(self) -> Any: ...

class UdimUtils(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def IsUdimIdentifier(cls, identifier: str) -> bool: ...
    @classmethod
    def ReplaceUdimPattern(cls, identifierWithPattern: str, replacement: str) -> str: ...
    @classmethod
    def ResolveUdimPath(cls, udimPath: str, layer: pxr.Sdf.Layer) -> str: ...
    @classmethod
    def ResolveUdimTilePaths(cls, udimPath: str, layer: pxr.Sdf.Layer) -> list[ResolvedPathAndTile]: ...
    def __reduce__(self) -> Any: ...

class Utils(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def GetBaseNameAndType(cls, arg1: str) -> tuple[str, AttributeType]: ...
    @classmethod
    def GetConnectedSourcePath(cls, connectionSourceInfo: ConnectionSourceInfo) -> pxr.Sdf.Path: ...
    @classmethod
    def GetFullName(cls, arg1: str, arg2: AttributeType) -> str: ...
    @classmethod
    def GetPrefixForAttributeType(cls, arg1: AttributeType) -> str: ...
    @classmethod
    def GetType(cls, arg1: str) -> AttributeType: ...
    @overload
    @classmethod
    def GetValueProducingAttributes(cls, input: Input, shaderOutputsOnly: bool = ...) -> list[Attribute]: ...
    @overload
    @classmethod
    def GetValueProducingAttributes(cls, output: Output, shaderOutputsOnly: bool = ...) -> list[Attribute]: ...
    def __reduce__(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: bool, arg3: object) -> None: ...
    def __bool__(self) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool: ...
    def __getitem__(self, arg2: int) -> Any: ...
    @overload
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...