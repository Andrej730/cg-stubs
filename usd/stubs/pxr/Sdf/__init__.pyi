import Boost.Python
import pxr.Tf
from typing import Any, Callable, ClassVar, overload

AngularUnitDegrees: AngularUnit
AngularUnitRadians: AngularUnit
AuthoringErrorUnrecognizedFields: AuthoringError
AuthoringErrorUnrecognizedSpecType: AuthoringError
DimensionlessUnitDefault: DimensionlessUnit
DimensionlessUnitPercent: DimensionlessUnit
Find: Callable
LengthUnitCentimeter: LengthUnit
LengthUnitDecimeter: LengthUnit
LengthUnitFoot: LengthUnit
LengthUnitInch: LengthUnit
LengthUnitKilometer: LengthUnit
LengthUnitMeter: LengthUnit
LengthUnitMile: LengthUnit
LengthUnitMillimeter: LengthUnit
LengthUnitYard: LengthUnit
ListOpTypeAdded: ListOpType
ListOpTypeAppended: ListOpType
ListOpTypeDeleted: ListOpType
ListOpTypeExplicit: ListOpType
ListOpTypeOrdered: ListOpType
ListOpTypePrepended: ListOpType
PermissionPrivate: Permission
PermissionPublic: Permission
SpecTypeAttribute: SpecType
SpecTypeConnection: SpecType
SpecTypeExpression: SpecType
SpecTypeMapper: SpecType
SpecTypeMapperArg: SpecType
SpecTypePrim: SpecType
SpecTypePseudoRoot: SpecType
SpecTypeRelationship: SpecType
SpecTypeRelationshipTarget: SpecType
SpecTypeUnknown: SpecType
SpecTypeVariant: SpecType
SpecTypeVariantSet: SpecType
SpecifierClass: Specifier
SpecifierDef: Specifier
SpecifierOver: Specifier
VariabilityUniform: Variability
VariabilityVarying: Variability
_PathElemsToPrefixes: Callable

class AngularUnit(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> object: ...
    def __reduce__(self) -> Any: ...

class AssetPath(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: object) -> None: ...
    @overload
    def __init__(self, arg2: object, arg3: object) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, arg2: AssetPath) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: AssetPath) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def path(self) -> Any: ...
    @property
    def resolvedPath(self) -> type: ...

class AssetPathArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> Any: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> object: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def __eq__(self, arg2: AssetPathArray) -> object: ...
    @overload
    def __getitem__(self, arg2: object) -> object: ...
    @overload
    def __getitem__(self, arg2: object) -> object: ...
    @overload
    def __getitem__(self, arg2: int) -> object: ...
    def __iter__(self) -> object: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg2: AssetPathArray) -> object: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...

class AttributeSpec(PropertySpec):
    ConnectionPathsKey: ClassVar[str] = ...
    DefaultValueKey: ClassVar[str] = ...
    DisplayUnitKey: ClassVar[str] = ...
    allowedTokens: Any
    colorSpace: Any
    displayUnit: Any
    def __init__(self, tupleargs, dictkwds) -> Any: ...
    def ClearColorSpace(self) -> None: ...
    def HasColorSpace(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, arg2: AttributeSpec) -> bool: ...
    def __ge__(self, arg2: AttributeSpec) -> bool: ...
    def __gt__(self, arg2: AttributeSpec) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, arg2: AttributeSpec) -> bool: ...
    def __lt__(self, arg2: AttributeSpec) -> bool: ...
    def __ne__(self, arg2: AttributeSpec) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def connectionPathList(self) -> Any: ...
    @property
    def expired(self) -> Any: ...
    @property
    def roleName(self) -> Any: ...
    @property
    def typeName(self) -> Any: ...
    @property
    def valueType(self) -> Any: ...

class AuthoringError(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> object: ...
    def __reduce__(self) -> Any: ...

class BatchNamespaceEdit(Boost.Python.instance):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: BatchNamespaceEdit) -> None: ...
    @overload
    def __init__(self, arg2: object) -> None: ...
    @overload
    def Add(self, arg1: BatchNamespaceEdit, arg2: NamespaceEdit) -> None: ...
    @overload
    def Add(self, arg1: BatchNamespaceEdit, arg2: Path, arg3: Path) -> None: ...
    @overload
    def Add(self, arg1: BatchNamespaceEdit, arg2: Path, arg3: Path, arg4: int) -> None: ...
    def Process(self, hasObjectAtPath: object, canEdit: object, fixBackpointers: bool = ...) -> tuple: ...
    def __reduce__(self) -> Any: ...
    @property
    def edits(self) -> type: ...

class ChangeBlock(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, enabled: bool = ...) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, arg2: object, arg3: object, arg4: object) -> None: ...
    def __reduce__(self) -> Any: ...

class ChildrenView_Sdf_AttributeChildPolicy_SdfAttributeViewPredicate(Boost.Python.instance):
    class ChildrenView_Sdf_AttributeChildPolicy_SdfAttributeViewPredicate_Iterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_AttributeChildPolicy_SdfAttributeViewPredicate_Iterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class ChildrenView_Sdf_AttributeChildPolicy_SdfAttributeViewPredicate_KeyIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_AttributeChildPolicy_SdfAttributeViewPredicate_KeyIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class ChildrenView_Sdf_AttributeChildPolicy_SdfAttributeViewPredicate_ValueIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_AttributeChildPolicy_SdfAttributeViewPredicate_ValueIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, arg2: object) -> object: ...
    @overload
    def index(self, arg2: object) -> int: ...
    @overload
    def index(self, arg2: AttributeSpec) -> int: ...
    def items(self) -> ChildrenView_Sdf_AttributeChildPolicy_SdfAttributeViewPredicate_Iterator: ...
    def keys(self) -> ChildrenView_Sdf_AttributeChildPolicy_SdfAttributeViewPredicate_KeyIterator: ...
    def values(self) -> ChildrenView_Sdf_AttributeChildPolicy_SdfAttributeViewPredicate_ValueIterator: ...
    @overload
    def __contains__(self, arg2: object) -> bool: ...
    @overload
    def __contains__(self, arg2: AttributeSpec) -> bool: ...
    def __eq__(self, arg2: ChildrenView_Sdf_AttributeChildPolicy_SdfAttributeViewPredicate) -> object: ...
    @overload
    def __getitem__(self, arg2: object) -> AttributeSpec: ...
    @overload
    def __getitem__(self, arg2: int) -> AttributeSpec: ...
    def __iter__(self) -> ChildrenView_Sdf_AttributeChildPolicy_SdfAttributeViewPredicate_ValueIterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg2: ChildrenView_Sdf_AttributeChildPolicy_SdfAttributeViewPredicate) -> object: ...
    def __reduce__(self) -> Any: ...

class ChildrenView_Sdf_AttributeChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfAttributeSpec__(Boost.Python.instance):
    class ChildrenView_Sdf_AttributeChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfAttributeSpec___Iterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_AttributeChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfAttributeSpec___Iterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class ChildrenView_Sdf_AttributeChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfAttributeSpec___KeyIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_AttributeChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfAttributeSpec___KeyIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class ChildrenView_Sdf_AttributeChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfAttributeSpec___ValueIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_AttributeChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfAttributeSpec___ValueIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, arg2: object) -> object: ...
    @overload
    def index(self, arg2: object) -> int: ...
    @overload
    def index(self, arg2: AttributeSpec) -> int: ...
    def items(self) -> ChildrenView_Sdf_AttributeChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfAttributeSpec___Iterator: ...
    def keys(self) -> ChildrenView_Sdf_AttributeChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfAttributeSpec___KeyIterator: ...
    def values(self) -> ChildrenView_Sdf_AttributeChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfAttributeSpec___ValueIterator: ...
    @overload
    def __contains__(self, arg2: object) -> bool: ...
    @overload
    def __contains__(self, arg2: AttributeSpec) -> bool: ...
    def __eq__(self, arg2: ChildrenView_Sdf_AttributeChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfAttributeSpec__) -> object: ...
    @overload
    def __getitem__(self, arg2: object) -> AttributeSpec: ...
    @overload
    def __getitem__(self, arg2: int) -> AttributeSpec: ...
    def __iter__(self) -> ChildrenView_Sdf_AttributeChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfAttributeSpec___ValueIterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg2: ChildrenView_Sdf_AttributeChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfAttributeSpec__) -> object: ...
    def __reduce__(self) -> Any: ...

class ChildrenView_Sdf_PrimChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPrimSpec__(Boost.Python.instance):
    class ChildrenView_Sdf_PrimChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPrimSpec___Iterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_PrimChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPrimSpec___Iterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class ChildrenView_Sdf_PrimChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPrimSpec___KeyIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_PrimChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPrimSpec___KeyIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class ChildrenView_Sdf_PrimChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPrimSpec___ValueIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_PrimChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPrimSpec___ValueIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, arg2: object) -> object: ...
    @overload
    def index(self, arg2: object) -> int: ...
    @overload
    def index(self, arg2: PrimSpec) -> int: ...
    def items(self) -> ChildrenView_Sdf_PrimChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPrimSpec___Iterator: ...
    def keys(self) -> ChildrenView_Sdf_PrimChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPrimSpec___KeyIterator: ...
    def values(self) -> ChildrenView_Sdf_PrimChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPrimSpec___ValueIterator: ...
    @overload
    def __contains__(self, arg2: object) -> bool: ...
    @overload
    def __contains__(self, arg2: PrimSpec) -> bool: ...
    def __eq__(self, arg2: ChildrenView_Sdf_PrimChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPrimSpec__) -> object: ...
    @overload
    def __getitem__(self, arg2: object) -> PrimSpec: ...
    @overload
    def __getitem__(self, arg2: int) -> PrimSpec: ...
    def __iter__(self) -> ChildrenView_Sdf_PrimChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPrimSpec___ValueIterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg2: ChildrenView_Sdf_PrimChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPrimSpec__) -> object: ...
    def __reduce__(self) -> Any: ...

class ChildrenView_Sdf_PropertyChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPropertySpec__(Boost.Python.instance):
    class ChildrenView_Sdf_PropertyChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPropertySpec___Iterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_PropertyChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPropertySpec___Iterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class ChildrenView_Sdf_PropertyChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPropertySpec___KeyIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_PropertyChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPropertySpec___KeyIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class ChildrenView_Sdf_PropertyChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPropertySpec___ValueIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_PropertyChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPropertySpec___ValueIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, arg2: object) -> object: ...
    @overload
    def index(self, arg2: object) -> int: ...
    @overload
    def index(self, arg2: PropertySpec) -> int: ...
    def items(self) -> ChildrenView_Sdf_PropertyChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPropertySpec___Iterator: ...
    def keys(self) -> ChildrenView_Sdf_PropertyChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPropertySpec___KeyIterator: ...
    def values(self) -> ChildrenView_Sdf_PropertyChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPropertySpec___ValueIterator: ...
    @overload
    def __contains__(self, arg2: object) -> bool: ...
    @overload
    def __contains__(self, arg2: PropertySpec) -> bool: ...
    def __eq__(self, arg2: ChildrenView_Sdf_PropertyChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPropertySpec__) -> object: ...
    @overload
    def __getitem__(self, arg2: object) -> PropertySpec: ...
    @overload
    def __getitem__(self, arg2: int) -> PropertySpec: ...
    def __iter__(self) -> ChildrenView_Sdf_PropertyChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPropertySpec___ValueIterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg2: ChildrenView_Sdf_PropertyChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfPropertySpec__) -> object: ...
    def __reduce__(self) -> Any: ...

class ChildrenView_Sdf_RelationshipChildPolicy_SdfRelationshipViewPredicate(Boost.Python.instance):
    class ChildrenView_Sdf_RelationshipChildPolicy_SdfRelationshipViewPredicate_Iterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_RelationshipChildPolicy_SdfRelationshipViewPredicate_Iterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class ChildrenView_Sdf_RelationshipChildPolicy_SdfRelationshipViewPredicate_KeyIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_RelationshipChildPolicy_SdfRelationshipViewPredicate_KeyIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class ChildrenView_Sdf_RelationshipChildPolicy_SdfRelationshipViewPredicate_ValueIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_RelationshipChildPolicy_SdfRelationshipViewPredicate_ValueIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, arg2: object) -> object: ...
    @overload
    def index(self, arg2: object) -> int: ...
    @overload
    def index(self, arg2: RelationshipSpec) -> int: ...
    def items(self) -> ChildrenView_Sdf_RelationshipChildPolicy_SdfRelationshipViewPredicate_Iterator: ...
    def keys(self) -> ChildrenView_Sdf_RelationshipChildPolicy_SdfRelationshipViewPredicate_KeyIterator: ...
    def values(self) -> ChildrenView_Sdf_RelationshipChildPolicy_SdfRelationshipViewPredicate_ValueIterator: ...
    @overload
    def __contains__(self, arg2: object) -> bool: ...
    @overload
    def __contains__(self, arg2: RelationshipSpec) -> bool: ...
    def __eq__(self, arg2: ChildrenView_Sdf_RelationshipChildPolicy_SdfRelationshipViewPredicate) -> object: ...
    @overload
    def __getitem__(self, arg2: object) -> RelationshipSpec: ...
    @overload
    def __getitem__(self, arg2: int) -> RelationshipSpec: ...
    def __iter__(self) -> ChildrenView_Sdf_RelationshipChildPolicy_SdfRelationshipViewPredicate_ValueIterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg2: ChildrenView_Sdf_RelationshipChildPolicy_SdfRelationshipViewPredicate) -> object: ...
    def __reduce__(self) -> Any: ...

class ChildrenView_Sdf_VariantChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSpec__(Boost.Python.instance):
    class ChildrenView_Sdf_VariantChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSpec___Iterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_VariantChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSpec___Iterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class ChildrenView_Sdf_VariantChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSpec___KeyIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_VariantChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSpec___KeyIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class ChildrenView_Sdf_VariantChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSpec___ValueIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_VariantChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSpec___ValueIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, arg2: object) -> object: ...
    @overload
    def index(self, arg2: object) -> int: ...
    @overload
    def index(self, arg2: VariantSpec) -> int: ...
    def items(self) -> ChildrenView_Sdf_VariantChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSpec___Iterator: ...
    def keys(self) -> ChildrenView_Sdf_VariantChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSpec___KeyIterator: ...
    def values(self) -> ChildrenView_Sdf_VariantChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSpec___ValueIterator: ...
    @overload
    def __contains__(self, arg2: object) -> bool: ...
    @overload
    def __contains__(self, arg2: VariantSpec) -> bool: ...
    def __eq__(self, arg2: ChildrenView_Sdf_VariantChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSpec__) -> object: ...
    @overload
    def __getitem__(self, arg2: object) -> VariantSpec: ...
    @overload
    def __getitem__(self, arg2: int) -> VariantSpec: ...
    def __iter__(self) -> ChildrenView_Sdf_VariantChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSpec___ValueIterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg2: ChildrenView_Sdf_VariantChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSpec__) -> object: ...
    def __reduce__(self) -> Any: ...

class ChildrenView_Sdf_VariantSetChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSetSpec__(Boost.Python.instance):
    class ChildrenView_Sdf_VariantSetChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSetSpec___Iterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_VariantSetChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSetSpec___Iterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class ChildrenView_Sdf_VariantSetChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSetSpec___KeyIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_VariantSetChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSetSpec___KeyIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class ChildrenView_Sdf_VariantSetChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSetSpec___ValueIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> ChildrenView_Sdf_VariantSetChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSetSpec___ValueIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, arg2: object) -> object: ...
    @overload
    def index(self, arg2: object) -> int: ...
    @overload
    def index(self, arg2: VariantSetSpec) -> int: ...
    def items(self) -> ChildrenView_Sdf_VariantSetChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSetSpec___Iterator: ...
    def keys(self) -> ChildrenView_Sdf_VariantSetChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSetSpec___KeyIterator: ...
    def values(self) -> ChildrenView_Sdf_VariantSetChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSetSpec___ValueIterator: ...
    @overload
    def __contains__(self, arg2: object) -> bool: ...
    @overload
    def __contains__(self, arg2: VariantSetSpec) -> bool: ...
    def __eq__(self, arg2: ChildrenView_Sdf_VariantSetChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSetSpec__) -> object: ...
    @overload
    def __getitem__(self, arg2: object) -> VariantSetSpec: ...
    @overload
    def __getitem__(self, arg2: int) -> VariantSetSpec: ...
    def __iter__(self) -> ChildrenView_Sdf_VariantSetChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSetSpec___ValueIterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg2: ChildrenView_Sdf_VariantSetChildPolicy_SdfChildrenViewTrivialPredicate_SdfHandle_SdfVariantSetSpec__) -> object: ...
    def __reduce__(self) -> Any: ...

class CleanupEnabler(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, arg2: object, arg3: object, arg4: object) -> None: ...
    def __reduce__(self) -> Any: ...

class DimensionlessUnit(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> object: ...
    def __reduce__(self) -> Any: ...

class FileFormat(Boost.Python.instance):
    class Tokens(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __reduce__(self) -> Any: ...
        @property
        def TargetArg(self) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def CanRead(self, arg2: object) -> bool: ...
    @classmethod
    def FindAllDerivedFileFormatExtensions(cls, arg1: Type) -> list: ...
    @classmethod
    def FindAllFileFormatExtensions(cls) -> list: ...
    @overload
    @classmethod
    def FindByExtension(cls, extension: object, target: object = ...) -> object: ...
    @overload
    @classmethod
    def FindByExtension(cls, extension: object, args: object) -> object: ...
    @classmethod
    def FindById(cls, arg1: object) -> object: ...
    @classmethod
    def FormatSupportsEditing(cls, extension: object, target: object = ...) -> bool: ...
    @classmethod
    def FormatSupportsReading(cls, extension: object, target: object = ...) -> bool: ...
    @classmethod
    def FormatSupportsWriting(cls, extension: object, target: object = ...) -> bool: ...
    @classmethod
    def GetFileExtension(cls, arg1: object) -> str: ...
    def GetFileExtensions(self) -> object: ...
    def IsPackage(self) -> bool: ...
    def IsSupportedExtension(self, arg2: object) -> bool: ...
    def SupportsEditing(self) -> bool: ...
    def SupportsReading(self) -> bool: ...
    def SupportsWriting(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def expired(self) -> Any: ...
    @property
    def fileCookie(self) -> type: ...
    @property
    def formatId(self) -> type: ...
    @property
    def primaryFileExtension(self) -> type: ...
    @property
    def target(self) -> type: ...

class Int64ListOp(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    addedItems: Any
    appendedItems: Any
    deletedItems: Any
    explicitItems: Any
    orderedItems: Any
    prependedItems: Any
    def __init__(self) -> None: ...
    @overload
    def ApplyOperations(self, arg2: object) -> object: ...
    @overload
    def ApplyOperations(self, arg2: Int64ListOp) -> object: ...
    def Clear(self) -> None: ...
    def ClearAndMakeExplicit(self) -> None: ...
    def Create(self, prependedItems: object, appendedItems: object, deletedItems: object) -> Int64ListOp: ...
    def CreateExplicit(self, explicitItems: object) -> Int64ListOp: ...
    def GetAddedOrExplicitItems(self) -> object: ...
    def GetAppliedItems(self) -> object: ...
    def HasItem(self, arg2: int) -> bool: ...
    def __eq__(self, arg2: Int64ListOp) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: Int64ListOp) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def isExplicit(self) -> Any: ...

class IntListOp(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    addedItems: Any
    appendedItems: Any
    deletedItems: Any
    explicitItems: Any
    orderedItems: Any
    prependedItems: Any
    def __init__(self) -> None: ...
    @overload
    def ApplyOperations(self, arg2: object) -> object: ...
    @overload
    def ApplyOperations(self, arg2: IntListOp) -> object: ...
    def Clear(self) -> None: ...
    def ClearAndMakeExplicit(self) -> None: ...
    def Create(self, prependedItems: object, appendedItems: object, deletedItems: object) -> IntListOp: ...
    def CreateExplicit(self, explicitItems: object) -> IntListOp: ...
    def GetAddedOrExplicitItems(self) -> object: ...
    def GetAppliedItems(self) -> object: ...
    def HasItem(self, arg2: int) -> bool: ...
    def __eq__(self, arg2: IntListOp) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: IntListOp) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def isExplicit(self) -> Any: ...

class Layer(Boost.Python.instance):
    class DetachedLayerRules(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self) -> None: ...
        def Exclude(self, arg2: object) -> DetachedLayerRules: ...
        def GetExcluded(self) -> list: ...
        def GetIncluded(self) -> list: ...
        def Include(self, arg2: object) -> DetachedLayerRules: ...
        def IncludeAll(self) -> DetachedLayerRules: ...
        def IncludedAll(self) -> bool: ...
        def IsIncluded(self, arg2: object) -> bool: ...
        def __reduce__(self) -> Any: ...
    ColorConfigurationKey: ClassVar[str] = ...
    ColorManagementSystemKey: ClassVar[str] = ...
    CommentKey: ClassVar[str] = ...
    DocumentationKey: ClassVar[str] = ...
    EndFrameKey: ClassVar[str] = ...
    EndTimeCodeKey: ClassVar[str] = ...
    FramePrecisionKey: ClassVar[str] = ...
    FramesPerSecondKey: ClassVar[str] = ...
    HasOwnedSubLayers: ClassVar[str] = ...
    OwnerKey: ClassVar[str] = ...
    SessionOwnerKey: ClassVar[str] = ...
    StartFrameKey: ClassVar[str] = ...
    StartTimeCodeKey: ClassVar[str] = ...
    TimeCodesPerSecondKey: ClassVar[str] = ...
    colorConfiguration: Any
    colorManagementSystem: Any
    comment: Any
    customLayerData: Any
    defaultPrim: Any
    documentation: Any
    endTimeCode: Any
    framePrecision: Any
    framesPerSecond: Any
    hasOwnedSubLayers: Any
    identifier: Any
    owner: Any
    rootPrimOrder: Any
    sessionOwner: Any
    startTimeCode: Any
    subLayerPaths: Any
    timeCodesPerSecond: Any
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def AddToMutedLayers(cls, arg1: object) -> None: ...
    def Apply(self, arg2: BatchNamespaceEdit) -> bool: ...
    def ApplyRootPrimOrder(self, arg2: object) -> list: ...
    def CanApply(self, arg2: BatchNamespaceEdit) -> object: ...
    def Clear(self) -> None: ...
    def ClearColorConfiguration(self) -> None: ...
    def ClearColorManagementSystem(self) -> None: ...
    def ClearCustomLayerData(self) -> None: ...
    def ClearDefaultPrim(self) -> None: ...
    def ClearEndTimeCode(self) -> None: ...
    def ClearFramePrecision(self) -> None: ...
    def ClearFramesPerSecond(self) -> None: ...
    def ClearOwner(self) -> None: ...
    def ClearSessionOwner(self) -> None: ...
    def ClearStartTimeCode(self) -> None: ...
    def ClearTimeCodesPerSecond(self) -> None: ...
    def ComputeAbsolutePath(self, arg2: object) -> str: ...
    @overload
    @classmethod
    def CreateAnonymous(cls, tag: object = ..., args: dict = ...) -> Layer: ...
    @overload
    @classmethod
    def CreateAnonymous(cls, tag: object, format: FileFormat, args: dict = ...) -> Layer: ...
    @classmethod
    def CreateIdentifier(cls, arg1: object, arg2: object) -> str: ...
    @classmethod
    def CreateNew(cls, identifier: object, args: dict = ...) -> Layer: ...
    @classmethod
    def DumpLayerInfo(cls, *args, **kwargs) -> Any: ...
    def EraseTimeSample(self, arg2: Path, arg3: float) -> None: ...
    def Export(self, filename: object, comment: object = ..., args: dict = ...) -> bool: ...
    def ExportToString(self, *args, **kwargs) -> Any: ...
    @classmethod
    def Find(cls, filename) -> LayerPtr: ...
    @classmethod
    def FindOrOpen(cls, identifier: object, args: dict = ...) -> Layer: ...
    @classmethod
    def FindOrOpenRelativeToLayer(cls, anchor: Layer, identifier: object, args: dict = ...) -> Layer: ...
    @classmethod
    def FindRelativeToLayer(cls, *args, **kwargs) -> Any: ...
    def GetAssetInfo(self) -> object: ...
    def GetAssetName(self) -> str: ...
    def GetAttributeAtPath(self, arg2: Path) -> AttributeSpec: ...
    def GetBracketingTimeSamples(self, arg2: float) -> tuple: ...
    def GetBracketingTimeSamplesForPath(self, arg2: Path, arg3: float) -> tuple: ...
    def GetCompositionAssetDependencies(self) -> list: ...
    @classmethod
    def GetDetachedLayerRules(cls) -> DetachedLayerRules: ...
    def GetDisplayName(self) -> str: ...
    @classmethod
    def GetDisplayNameFromIdentifier(cls, arg1: object) -> str: ...
    def GetExternalAssetDependencies(self) -> list: ...
    def GetExternalReferences(self, *args, **kwargs) -> Any: ...
    def GetFileFormat(self) -> object: ...
    def GetFileFormatArguments(self) -> object: ...
    @classmethod
    def GetLoadedLayers(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetMutedLayers(cls, *args, **kwargs) -> Any: ...
    def GetNumTimeSamplesForPath(self, arg2: Path) -> int: ...
    def GetObjectAtPath(self, arg2: Path) -> Spec: ...
    def GetPrimAtPath(self, arg2: Path) -> PrimSpec: ...
    def GetPropertyAtPath(self, arg2: Path) -> PropertySpec: ...
    def GetRelationshipAtPath(self, arg2: Path) -> RelationshipSpec: ...
    def HasColorConfiguration(self) -> bool: ...
    def HasColorManagementSystem(self) -> bool: ...
    def HasCustomLayerData(self) -> bool: ...
    def HasDefaultPrim(self) -> bool: ...
    def HasEndTimeCode(self) -> bool: ...
    def HasFramePrecision(self) -> bool: ...
    def HasFramesPerSecond(self) -> bool: ...
    def HasOwner(self) -> bool: ...
    def HasSessionOwner(self) -> bool: ...
    def HasStartTimeCode(self) -> bool: ...
    def HasTimeCodesPerSecond(self) -> bool: ...
    def Import(self, arg2: object) -> bool: ...
    def ImportFromString(self, arg2: object) -> bool: ...
    @classmethod
    def IsAnonymousLayerIdentifier(cls, arg1: object) -> bool: ...
    def IsDetached(self) -> bool: ...
    @classmethod
    def IsIncludedByDetachedLayerRules(cls, arg1: object) -> bool: ...
    @classmethod
    def IsMuted(cls, arg1: Layer) -> bool: ...
    def ListAllTimeSamples(self) -> list: ...
    def ListTimeSamplesForPath(self, arg2: Path) -> list: ...
    @classmethod
    def New(cls, fileFormat: FileFormat, identifier: object, args: dict = ...) -> Layer: ...
    @classmethod
    def OpenAsAnonymous(cls, filePath: object = ..., metadataOnly: bool = ..., tag: object = ...) -> Layer: ...
    def QueryTimeSample(self, arg1: Layer, arg2: Path, arg3: float) -> object: ...
    def Reload(self, force: bool = ...) -> bool: ...
    @classmethod
    def ReloadLayers(cls, arg1: object, force: bool = ...) -> bool: ...
    @classmethod
    def RemoveFromMutedLayers(cls, arg1: object) -> None: ...
    def RemoveInertSceneDescription(self) -> None: ...
    def Save(self, force: bool = ...) -> bool: ...
    def ScheduleRemoveIfInert(self, arg2: Spec) -> None: ...
    @classmethod
    def SetDetachedLayerRules(cls, arg1: DetachedLayerRules) -> None: ...
    def SetMuted(self, arg2: bool) -> None: ...
    def SetPermissionToEdit(self, arg2: bool) -> None: ...
    def SetPermissionToSave(self, arg2: bool) -> None: ...
    def SetTimeSample(self, arg1: Layer, arg2: Path, arg3: float, arg4: object) -> None: ...
    @classmethod
    def SplitIdentifier(cls, arg1: object) -> tuple: ...
    def StreamsData(self) -> bool: ...
    def TransferContent(self, arg2: Layer) -> None: ...
    def Traverse(self, path: Path, func: object) -> None: ...
    def UpdateAssetInfo(self) -> None: ...
    def UpdateCompositionAssetDependency(self, arg2: object, arg3: object) -> bool: ...
    def UpdateExternalReference(self, arg2: object, arg3: object) -> bool: ...
    def _WriteDataFile(self, arg2: object) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def anonymous(self) -> type: ...
    @property
    def dirty(self) -> type: ...
    @property
    def empty(self) -> type: ...
    @property
    def expired(self) -> Any: ...
    @property
    def externalReferences(self) -> Any: ...
    @property
    def fileExtension(self) -> Any: ...
    @property
    def permissionToEdit(self) -> Any: ...
    @property
    def permissionToSave(self) -> Any: ...
    @property
    def pseudoRoot(self) -> Any: ...
    @property
    def realPath(self) -> Any: ...
    @property
    def repositoryPath(self) -> Any: ...
    @property
    def resolvedPath(self) -> Any: ...
    @property
    def rootPrims(self) -> Any: ...
    @property
    def subLayerOffsets(self) -> Any: ...
    @property
    def version(self) -> Any: ...

class LayerOffset(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, offset: float = ..., scale: float = ...) -> None: ...
    @overload
    def __init__(self, arg2: LayerOffset) -> None: ...
    def GetInverse(self) -> LayerOffset: ...
    def IsIdentity(self) -> bool: ...
    def __eq__(self, arg2: LayerOffset) -> object: ...
    @overload
    def __mul__(self, arg2: LayerOffset) -> object: ...
    @overload
    def __mul__(self, arg2: TimeCode) -> object: ...
    @overload
    def __mul__(self, arg2: float) -> object: ...
    def __ne__(self, arg2: LayerOffset) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def offset(self) -> type: ...
    @property
    def scale(self) -> type: ...

class LayerTree(Boost.Python.instance):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: Layer, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: Layer, arg3: object, arg4: LayerOffset) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def childTrees(self) -> type: ...
    @property
    def expired(self) -> Any: ...
    @property
    def layer(self) -> type: ...
    @property
    def offset(self) -> type: ...

class LengthUnit(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> object: ...
    def __reduce__(self) -> Any: ...

class ListEditorProxy_SdfNameKeyPolicy(Boost.Python.instance):
    addedItems: Any
    appendedItems: Any
    deletedItems: Any
    explicitItems: Any
    orderedItems: Any
    prependedItems: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Add(self, arg2: object) -> None: ...
    def Append(self, arg2: object) -> None: ...
    @overload
    def ApplyEditsToList(self, arg2: object) -> list: ...
    @overload
    def ApplyEditsToList(self, arg2: object, arg3: object) -> list: ...
    def ClearEdits(self) -> bool: ...
    def ClearEditsAndMakeExplicit(self) -> bool: ...
    def ContainsItemEdit(self, item: object, onlyAddOrExplicit: bool = ...) -> bool: ...
    def CopyItems(self, arg2: ListEditorProxy_SdfNameKeyPolicy) -> bool: ...
    def Erase(self, arg2: object) -> None: ...
    def GetAddedOrExplicitItems(self) -> tuple: ...
    def GetAppliedItems(self) -> tuple: ...
    def ModifyItemEdits(self, arg2: object) -> None: ...
    def Prepend(self, arg2: object) -> None: ...
    def Remove(self, arg2: object) -> None: ...
    def RemoveItemEdits(self, arg2: object) -> None: ...
    def ReplaceItemEdits(self, arg2: object, arg3: object) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def isExpired(self) -> Any: ...
    @property
    def isExplicit(self) -> Any: ...
    @property
    def isOrderedOnly(self) -> Any: ...

class ListEditorProxy_SdfPathKeyPolicy(Boost.Python.instance):
    addedItems: Any
    appendedItems: Any
    deletedItems: Any
    explicitItems: Any
    orderedItems: Any
    prependedItems: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Add(self, arg2: Path) -> None: ...
    def Append(self, arg2: Path) -> None: ...
    @overload
    def ApplyEditsToList(self, arg2: object) -> list: ...
    @overload
    def ApplyEditsToList(self, arg2: object, arg3: object) -> list: ...
    def ClearEdits(self) -> bool: ...
    def ClearEditsAndMakeExplicit(self) -> bool: ...
    def ContainsItemEdit(self, item: Path, onlyAddOrExplicit: bool = ...) -> bool: ...
    def CopyItems(self, arg2: ListEditorProxy_SdfPathKeyPolicy) -> bool: ...
    def Erase(self, arg2: Path) -> None: ...
    def GetAddedOrExplicitItems(self) -> tuple: ...
    def GetAppliedItems(self) -> tuple: ...
    def ModifyItemEdits(self, arg2: object) -> None: ...
    def Prepend(self, arg2: Path) -> None: ...
    def Remove(self, arg2: Path) -> None: ...
    def RemoveItemEdits(self, arg2: Path) -> None: ...
    def ReplaceItemEdits(self, arg2: Path, arg3: Path) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def isExpired(self) -> Any: ...
    @property
    def isExplicit(self) -> Any: ...
    @property
    def isOrderedOnly(self) -> Any: ...

class ListEditorProxy_SdfPayloadTypePolicy(Boost.Python.instance):
    addedItems: Any
    appendedItems: Any
    deletedItems: Any
    explicitItems: Any
    orderedItems: Any
    prependedItems: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Add(self, arg2: Payload) -> None: ...
    def Append(self, arg2: Payload) -> None: ...
    @overload
    def ApplyEditsToList(self, arg2: object) -> list: ...
    @overload
    def ApplyEditsToList(self, arg2: object, arg3: object) -> list: ...
    def ClearEdits(self) -> bool: ...
    def ClearEditsAndMakeExplicit(self) -> bool: ...
    def ContainsItemEdit(self, item: Payload, onlyAddOrExplicit: bool = ...) -> bool: ...
    def CopyItems(self, arg2: ListEditorProxy_SdfPayloadTypePolicy) -> bool: ...
    def Erase(self, arg2: Payload) -> None: ...
    def GetAddedOrExplicitItems(self) -> tuple: ...
    def GetAppliedItems(self) -> tuple: ...
    def ModifyItemEdits(self, arg2: object) -> None: ...
    def Prepend(self, arg2: Payload) -> None: ...
    def Remove(self, arg2: Payload) -> None: ...
    def RemoveItemEdits(self, arg2: Payload) -> None: ...
    def ReplaceItemEdits(self, arg2: Payload, arg3: Payload) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def isExpired(self) -> Any: ...
    @property
    def isExplicit(self) -> Any: ...
    @property
    def isOrderedOnly(self) -> Any: ...

class ListEditorProxy_SdfReferenceTypePolicy(Boost.Python.instance):
    addedItems: Any
    appendedItems: Any
    deletedItems: Any
    explicitItems: Any
    orderedItems: Any
    prependedItems: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Add(self, arg2: Reference) -> None: ...
    def Append(self, arg2: Reference) -> None: ...
    @overload
    def ApplyEditsToList(self, arg2: object) -> list: ...
    @overload
    def ApplyEditsToList(self, arg2: object, arg3: object) -> list: ...
    def ClearEdits(self) -> bool: ...
    def ClearEditsAndMakeExplicit(self) -> bool: ...
    def ContainsItemEdit(self, item: Reference, onlyAddOrExplicit: bool = ...) -> bool: ...
    def CopyItems(self, arg2: ListEditorProxy_SdfReferenceTypePolicy) -> bool: ...
    def Erase(self, arg2: Reference) -> None: ...
    def GetAddedOrExplicitItems(self) -> tuple: ...
    def GetAppliedItems(self) -> tuple: ...
    def ModifyItemEdits(self, arg2: object) -> None: ...
    def Prepend(self, arg2: Reference) -> None: ...
    def Remove(self, arg2: Reference) -> None: ...
    def RemoveItemEdits(self, arg2: Reference) -> None: ...
    def ReplaceItemEdits(self, arg2: Reference, arg3: Reference) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def isExpired(self) -> Any: ...
    @property
    def isExplicit(self) -> Any: ...
    @property
    def isOrderedOnly(self) -> Any: ...

class ListOpType(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> object: ...
    def __reduce__(self) -> Any: ...

class ListProxy_SdfNameKeyPolicy(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def ApplyEditsToList(self, arg2: object) -> object: ...
    def ApplyList(self, arg2: ListProxy_SdfNameKeyPolicy) -> None: ...
    def append(self, arg2: object) -> None: ...
    def clear(self) -> None: ...
    def copy(self) -> list: ...
    def count(self, arg2: object) -> int: ...
    def index(self, arg2: object) -> int: ...
    def insert(self, arg2: int, arg3: object) -> None: ...
    def remove(self, arg2: object) -> None: ...
    def replace(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __delitem__(self, arg2: int) -> None: ...
    @overload
    def __delitem__(self, arg2: object) -> None: ...
    @overload
    def __delitem__(self, arg2: object) -> None: ...
    @overload
    def __eq__(self, arg2: ListProxy_SdfNameKeyPolicy) -> object: ...
    @overload
    def __eq__(self, arg2: object) -> object: ...
    @overload
    def __ge__(self, arg2: ListProxy_SdfNameKeyPolicy) -> object: ...
    @overload
    def __ge__(self, arg2: object) -> object: ...
    @overload
    def __getitem__(self, arg2: int) -> str: ...
    @overload
    def __getitem__(self, arg2: object) -> list: ...
    @overload
    def __gt__(self, arg2: ListProxy_SdfNameKeyPolicy) -> object: ...
    @overload
    def __gt__(self, arg2: object) -> object: ...
    @overload
    def __le__(self, arg2: ListProxy_SdfNameKeyPolicy) -> object: ...
    @overload
    def __le__(self, arg2: object) -> object: ...
    def __len__(self) -> int: ...
    @overload
    def __lt__(self, arg2: ListProxy_SdfNameKeyPolicy) -> object: ...
    @overload
    def __lt__(self, arg2: object) -> object: ...
    @overload
    def __ne__(self, arg2: ListProxy_SdfNameKeyPolicy) -> object: ...
    @overload
    def __ne__(self, arg2: object) -> object: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @property
    def expired(self) -> Any: ...

class ListProxy_SdfNameTokenKeyPolicy(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def ApplyEditsToList(self, arg2: object) -> object: ...
    def ApplyList(self, arg2: ListProxy_SdfNameTokenKeyPolicy) -> None: ...
    def append(self, arg2: object) -> None: ...
    def clear(self) -> None: ...
    def copy(self) -> list: ...
    def count(self, arg2: object) -> int: ...
    def index(self, arg2: object) -> int: ...
    def insert(self, arg2: int, arg3: object) -> None: ...
    def remove(self, arg2: object) -> None: ...
    def replace(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __delitem__(self, arg2: int) -> None: ...
    @overload
    def __delitem__(self, arg2: object) -> None: ...
    @overload
    def __delitem__(self, arg2: object) -> None: ...
    @overload
    def __eq__(self, arg2: ListProxy_SdfNameTokenKeyPolicy) -> object: ...
    @overload
    def __eq__(self, arg2: object) -> object: ...
    @overload
    def __ge__(self, arg2: ListProxy_SdfNameTokenKeyPolicy) -> object: ...
    @overload
    def __ge__(self, arg2: object) -> object: ...
    @overload
    def __getitem__(self, arg2: int) -> object: ...
    @overload
    def __getitem__(self, arg2: object) -> list: ...
    @overload
    def __gt__(self, arg2: ListProxy_SdfNameTokenKeyPolicy) -> object: ...
    @overload
    def __gt__(self, arg2: object) -> object: ...
    @overload
    def __le__(self, arg2: ListProxy_SdfNameTokenKeyPolicy) -> object: ...
    @overload
    def __le__(self, arg2: object) -> object: ...
    def __len__(self) -> int: ...
    @overload
    def __lt__(self, arg2: ListProxy_SdfNameTokenKeyPolicy) -> object: ...
    @overload
    def __lt__(self, arg2: object) -> object: ...
    @overload
    def __ne__(self, arg2: ListProxy_SdfNameTokenKeyPolicy) -> object: ...
    @overload
    def __ne__(self, arg2: object) -> object: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @property
    def expired(self) -> Any: ...

class ListProxy_SdfPathKeyPolicy(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def ApplyEditsToList(self, arg2: object) -> object: ...
    def ApplyList(self, arg2: ListProxy_SdfPathKeyPolicy) -> None: ...
    def append(self, arg2: Path) -> None: ...
    def clear(self) -> None: ...
    def copy(self) -> list: ...
    def count(self, arg2: Path) -> int: ...
    def index(self, arg2: Path) -> int: ...
    def insert(self, arg2: int, arg3: Path) -> None: ...
    def remove(self, arg2: Path) -> None: ...
    def replace(self, arg2: Path, arg3: Path) -> None: ...
    @overload
    def __delitem__(self, arg2: int) -> None: ...
    @overload
    def __delitem__(self, arg2: object) -> None: ...
    @overload
    def __delitem__(self, arg2: Path) -> None: ...
    @overload
    def __eq__(self, arg2: ListProxy_SdfPathKeyPolicy) -> object: ...
    @overload
    def __eq__(self, arg2: object) -> object: ...
    @overload
    def __ge__(self, arg2: ListProxy_SdfPathKeyPolicy) -> object: ...
    @overload
    def __ge__(self, arg2: object) -> object: ...
    @overload
    def __getitem__(self, arg2: int) -> Path: ...
    @overload
    def __getitem__(self, arg2: object) -> list: ...
    @overload
    def __gt__(self, arg2: ListProxy_SdfPathKeyPolicy) -> object: ...
    @overload
    def __gt__(self, arg2: object) -> object: ...
    @overload
    def __le__(self, arg2: ListProxy_SdfPathKeyPolicy) -> object: ...
    @overload
    def __le__(self, arg2: object) -> object: ...
    def __len__(self) -> int: ...
    @overload
    def __lt__(self, arg2: ListProxy_SdfPathKeyPolicy) -> object: ...
    @overload
    def __lt__(self, arg2: object) -> object: ...
    @overload
    def __ne__(self, arg2: ListProxy_SdfPathKeyPolicy) -> object: ...
    @overload
    def __ne__(self, arg2: object) -> object: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: int, arg3: Path) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @property
    def expired(self) -> Any: ...

class ListProxy_SdfPayloadTypePolicy(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def ApplyEditsToList(self, arg2: object) -> object: ...
    def ApplyList(self, arg2: ListProxy_SdfPayloadTypePolicy) -> None: ...
    def append(self, arg2: Payload) -> None: ...
    def clear(self) -> None: ...
    def copy(self) -> list: ...
    def count(self, arg2: Payload) -> int: ...
    def index(self, arg2: Payload) -> int: ...
    def insert(self, arg2: int, arg3: Payload) -> None: ...
    def remove(self, arg2: Payload) -> None: ...
    def replace(self, arg2: Payload, arg3: Payload) -> None: ...
    @overload
    def __delitem__(self, arg2: int) -> None: ...
    @overload
    def __delitem__(self, arg2: object) -> None: ...
    @overload
    def __delitem__(self, arg2: Payload) -> None: ...
    @overload
    def __eq__(self, arg2: ListProxy_SdfPayloadTypePolicy) -> object: ...
    @overload
    def __eq__(self, arg2: object) -> object: ...
    @overload
    def __ge__(self, arg2: ListProxy_SdfPayloadTypePolicy) -> object: ...
    @overload
    def __ge__(self, arg2: object) -> object: ...
    @overload
    def __getitem__(self, arg2: int) -> Payload: ...
    @overload
    def __getitem__(self, arg2: object) -> list: ...
    @overload
    def __gt__(self, arg2: ListProxy_SdfPayloadTypePolicy) -> object: ...
    @overload
    def __gt__(self, arg2: object) -> object: ...
    @overload
    def __le__(self, arg2: ListProxy_SdfPayloadTypePolicy) -> object: ...
    @overload
    def __le__(self, arg2: object) -> object: ...
    def __len__(self) -> int: ...
    @overload
    def __lt__(self, arg2: ListProxy_SdfPayloadTypePolicy) -> object: ...
    @overload
    def __lt__(self, arg2: object) -> object: ...
    @overload
    def __ne__(self, arg2: ListProxy_SdfPayloadTypePolicy) -> object: ...
    @overload
    def __ne__(self, arg2: object) -> object: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: int, arg3: Payload) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @property
    def expired(self) -> Any: ...

class ListProxy_SdfReferenceTypePolicy(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def ApplyEditsToList(self, arg2: object) -> object: ...
    def ApplyList(self, arg2: ListProxy_SdfReferenceTypePolicy) -> None: ...
    def append(self, arg2: Reference) -> None: ...
    def clear(self) -> None: ...
    def copy(self) -> list: ...
    def count(self, arg2: Reference) -> int: ...
    def index(self, arg2: Reference) -> int: ...
    def insert(self, arg2: int, arg3: Reference) -> None: ...
    def remove(self, arg2: Reference) -> None: ...
    def replace(self, arg2: Reference, arg3: Reference) -> None: ...
    @overload
    def __delitem__(self, arg2: int) -> None: ...
    @overload
    def __delitem__(self, arg2: object) -> None: ...
    @overload
    def __delitem__(self, arg2: Reference) -> None: ...
    @overload
    def __eq__(self, arg2: ListProxy_SdfReferenceTypePolicy) -> object: ...
    @overload
    def __eq__(self, arg2: object) -> object: ...
    @overload
    def __ge__(self, arg2: ListProxy_SdfReferenceTypePolicy) -> object: ...
    @overload
    def __ge__(self, arg2: object) -> object: ...
    @overload
    def __getitem__(self, arg2: int) -> Reference: ...
    @overload
    def __getitem__(self, arg2: object) -> list: ...
    @overload
    def __gt__(self, arg2: ListProxy_SdfReferenceTypePolicy) -> object: ...
    @overload
    def __gt__(self, arg2: object) -> object: ...
    @overload
    def __le__(self, arg2: ListProxy_SdfReferenceTypePolicy) -> object: ...
    @overload
    def __le__(self, arg2: object) -> object: ...
    def __len__(self) -> int: ...
    @overload
    def __lt__(self, arg2: ListProxy_SdfReferenceTypePolicy) -> object: ...
    @overload
    def __lt__(self, arg2: object) -> object: ...
    @overload
    def __ne__(self, arg2: ListProxy_SdfReferenceTypePolicy) -> object: ...
    @overload
    def __ne__(self, arg2: object) -> object: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: int, arg3: Reference) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @property
    def expired(self) -> Any: ...

class ListProxy_SdfSubLayerTypePolicy(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def ApplyEditsToList(self, arg2: object) -> object: ...
    def ApplyList(self, arg2: ListProxy_SdfSubLayerTypePolicy) -> None: ...
    def append(self, arg2: object) -> None: ...
    def clear(self) -> None: ...
    def copy(self) -> list: ...
    def count(self, arg2: object) -> int: ...
    def index(self, arg2: object) -> int: ...
    def insert(self, arg2: int, arg3: object) -> None: ...
    def remove(self, arg2: object) -> None: ...
    def replace(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __delitem__(self, arg2: int) -> None: ...
    @overload
    def __delitem__(self, arg2: object) -> None: ...
    @overload
    def __delitem__(self, arg2: object) -> None: ...
    @overload
    def __eq__(self, arg2: ListProxy_SdfSubLayerTypePolicy) -> object: ...
    @overload
    def __eq__(self, arg2: object) -> object: ...
    @overload
    def __ge__(self, arg2: ListProxy_SdfSubLayerTypePolicy) -> object: ...
    @overload
    def __ge__(self, arg2: object) -> object: ...
    @overload
    def __getitem__(self, arg2: int) -> str: ...
    @overload
    def __getitem__(self, arg2: object) -> list: ...
    @overload
    def __gt__(self, arg2: ListProxy_SdfSubLayerTypePolicy) -> object: ...
    @overload
    def __gt__(self, arg2: object) -> object: ...
    @overload
    def __le__(self, arg2: ListProxy_SdfSubLayerTypePolicy) -> object: ...
    @overload
    def __le__(self, arg2: object) -> object: ...
    def __len__(self) -> int: ...
    @overload
    def __lt__(self, arg2: ListProxy_SdfSubLayerTypePolicy) -> object: ...
    @overload
    def __lt__(self, arg2: object) -> object: ...
    @overload
    def __ne__(self, arg2: ListProxy_SdfSubLayerTypePolicy) -> object: ...
    @overload
    def __ne__(self, arg2: object) -> object: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @property
    def expired(self) -> Any: ...

class MapEditProxy_VtDictionary(Boost.Python.instance):
    class MapEditProxy_VtDictionary_Iterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> MapEditProxy_VtDictionary_Iterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class MapEditProxy_VtDictionary_KeyIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> MapEditProxy_VtDictionary_KeyIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class MapEditProxy_VtDictionary_ValueIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> MapEditProxy_VtDictionary_ValueIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def clear(self) -> None: ...
    def copy(self, arg2: object) -> None: ...
    @overload
    def get(self, arg2: object) -> object: ...
    @overload
    def get(self, arg2: object, arg3: object) -> object: ...
    def items(self) -> MapEditProxy_VtDictionary_Iterator: ...
    def keys(self) -> MapEditProxy_VtDictionary_KeyIterator: ...
    def pop(self, arg2: object) -> object: ...
    def popitem(self) -> tuple: ...
    def setdefault(self, arg2: object, arg3: object) -> object: ...
    @overload
    def update(self, arg2: dict) -> None: ...
    @overload
    def update(self, arg2: list) -> None: ...
    def values(self) -> MapEditProxy_VtDictionary_ValueIterator: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, arg2: object) -> bool: ...
    def __delitem__(self, arg2: object) -> None: ...
    def __eq__(self, arg2: MapEditProxy_VtDictionary) -> object: ...
    def __getitem__(self, arg2: object) -> object: ...
    def __iter__(self) -> MapEditProxy_VtDictionary_KeyIterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg2: MapEditProxy_VtDictionary) -> object: ...
    def __reduce__(self) -> Any: ...
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @property
    def expired(self) -> Any: ...

class MapEditProxy___1_map_SdfPath__SdfPath____1_less_SdfPath_____1_allocator___1_pair_SdfPath_const__SdfPath___(Boost.Python.instance):
    class MapEditProxy___1_map_SdfPath__SdfPath____1_less_SdfPath_____1_allocator___1_pair_SdfPath_const__SdfPath____Iterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> MapEditProxy___1_map_SdfPath__SdfPath____1_less_SdfPath_____1_allocator___1_pair_SdfPath_const__SdfPath____Iterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class MapEditProxy___1_map_SdfPath__SdfPath____1_less_SdfPath_____1_allocator___1_pair_SdfPath_const__SdfPath____KeyIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> MapEditProxy___1_map_SdfPath__SdfPath____1_less_SdfPath_____1_allocator___1_pair_SdfPath_const__SdfPath____KeyIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class MapEditProxy___1_map_SdfPath__SdfPath____1_less_SdfPath_____1_allocator___1_pair_SdfPath_const__SdfPath____ValueIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> MapEditProxy___1_map_SdfPath__SdfPath____1_less_SdfPath_____1_allocator___1_pair_SdfPath_const__SdfPath____ValueIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def clear(self) -> None: ...
    def copy(self, arg2: object) -> None: ...
    @overload
    def get(self, arg2: Path) -> object: ...
    @overload
    def get(self, arg2: Path, arg3: Path) -> Path: ...
    def items(self) -> MapEditProxy___1_map_SdfPath__SdfPath____1_less_SdfPath_____1_allocator___1_pair_SdfPath_const__SdfPath____Iterator: ...
    def keys(self) -> MapEditProxy___1_map_SdfPath__SdfPath____1_less_SdfPath_____1_allocator___1_pair_SdfPath_const__SdfPath____KeyIterator: ...
    def pop(self, arg2: Path) -> Path: ...
    def popitem(self) -> tuple: ...
    def setdefault(self, arg2: Path, arg3: Path) -> Path: ...
    @overload
    def update(self, arg2: dict) -> None: ...
    @overload
    def update(self, arg2: list) -> None: ...
    def values(self) -> MapEditProxy___1_map_SdfPath__SdfPath____1_less_SdfPath_____1_allocator___1_pair_SdfPath_const__SdfPath____ValueIterator: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, arg2: Path) -> bool: ...
    def __delitem__(self, arg2: Path) -> None: ...
    def __eq__(self, arg2: MapEditProxy___1_map_SdfPath__SdfPath____1_less_SdfPath_____1_allocator___1_pair_SdfPath_const__SdfPath___) -> object: ...
    def __getitem__(self, arg2: Path) -> Path: ...
    def __iter__(self) -> MapEditProxy___1_map_SdfPath__SdfPath____1_less_SdfPath_____1_allocator___1_pair_SdfPath_const__SdfPath____KeyIterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg2: MapEditProxy___1_map_SdfPath__SdfPath____1_less_SdfPath_____1_allocator___1_pair_SdfPath_const__SdfPath___) -> object: ...
    def __reduce__(self) -> Any: ...
    def __setitem__(self, arg2: Path, arg3: Path) -> None: ...
    @property
    def expired(self) -> Any: ...

class MapEditProxy___1_map_string__string____1_less_string_____1_allocator___1_pair_stringconst__string___(Boost.Python.instance):
    class MapEditProxy___1_map_string__string____1_less_string_____1_allocator___1_pair_stringconst__string____Iterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> MapEditProxy___1_map_string__string____1_less_string_____1_allocator___1_pair_stringconst__string____Iterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class MapEditProxy___1_map_string__string____1_less_string_____1_allocator___1_pair_stringconst__string____KeyIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> MapEditProxy___1_map_string__string____1_less_string_____1_allocator___1_pair_stringconst__string____KeyIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class MapEditProxy___1_map_string__string____1_less_string_____1_allocator___1_pair_stringconst__string____ValueIterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __iter__(self) -> MapEditProxy___1_map_string__string____1_less_string_____1_allocator___1_pair_stringconst__string____ValueIterator: ...
        def __next__(self) -> object: ...
        def __reduce__(self) -> Any: ...
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def clear(self) -> None: ...
    def copy(self, arg2: object) -> None: ...
    @overload
    def get(self, arg2: object) -> object: ...
    @overload
    def get(self, arg2: object, arg3: object) -> str: ...
    def items(self) -> MapEditProxy___1_map_string__string____1_less_string_____1_allocator___1_pair_stringconst__string____Iterator: ...
    def keys(self) -> MapEditProxy___1_map_string__string____1_less_string_____1_allocator___1_pair_stringconst__string____KeyIterator: ...
    def pop(self, arg2: object) -> str: ...
    def popitem(self) -> tuple: ...
    def setdefault(self, arg2: object, arg3: object) -> str: ...
    @overload
    def update(self, arg2: dict) -> None: ...
    @overload
    def update(self, arg2: list) -> None: ...
    def values(self) -> MapEditProxy___1_map_string__string____1_less_string_____1_allocator___1_pair_stringconst__string____ValueIterator: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, arg2: object) -> bool: ...
    def __delitem__(self, arg2: object) -> None: ...
    def __eq__(self, arg2: MapEditProxy___1_map_string__string____1_less_string_____1_allocator___1_pair_stringconst__string___) -> object: ...
    def __getitem__(self, arg2: object) -> str: ...
    def __iter__(self) -> MapEditProxy___1_map_string__string____1_less_string_____1_allocator___1_pair_stringconst__string____KeyIterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg2: MapEditProxy___1_map_string__string____1_less_string_____1_allocator___1_pair_stringconst__string___) -> object: ...
    def __reduce__(self) -> Any: ...
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @property
    def expired(self) -> Any: ...

class NamespaceEdit(Boost.Python.instance):
    currentPath: Any
    index: Any
    newPath: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: Path, arg3: Path, arg4: int) -> None: ...
    @classmethod
    def Remove(cls, arg1: Path) -> NamespaceEdit: ...
    @classmethod
    def Rename(cls, arg1: Path, arg2: object) -> NamespaceEdit: ...
    @classmethod
    def Reorder(cls, arg1: Path, arg2: int) -> NamespaceEdit: ...
    @classmethod
    def Reparent(cls, arg1: Path, arg2: Path, arg3: int) -> NamespaceEdit: ...
    @classmethod
    def ReparentAndRename(cls, arg1: Path, arg2: Path, arg3: object, arg4: int) -> NamespaceEdit: ...
    def __eq__(self, arg2: NamespaceEdit) -> object: ...
    def __ne__(self, arg2: NamespaceEdit) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def atEnd(self) -> Any: ...
    @property
    def same(self) -> Any: ...

class NamespaceEditDetail(Boost.Python.instance):
    class Result(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> object: ...
        def __reduce__(self) -> Any: ...
    Error: ClassVar[Result] = ...
    Okay: ClassVar[Result] = ...
    Unbatched: ClassVar[Result] = ...
    edit: Any
    reason: Any
    result: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: object, arg3: NamespaceEdit, arg4: object) -> None: ...
    def __eq__(self, arg2: NamespaceEditDetail) -> object: ...
    def __ne__(self, arg2: NamespaceEditDetail) -> object: ...
    def __reduce__(self) -> Any: ...

class Notice(Boost.Python.instance):
    class Base(pxr.Tf.Notice):
        def __init__(self, *args, **kwargs) -> None: ...
        def __reduce__(self) -> Any: ...
    class LayerDidReloadContent(LayerDidReplaceContent):
        def __init__(self, *args, **kwargs) -> None: ...
        def __reduce__(self) -> Any: ...
    class LayerDidReplaceContent(Base):
        def __init__(self, *args, **kwargs) -> None: ...
        def __reduce__(self) -> Any: ...
    class LayerDirtinessChanged(Base):
        def __init__(self, *args, **kwargs) -> None: ...
        def __reduce__(self) -> Any: ...
    class LayerIdentifierDidChange(Base):
        def __init__(self, *args, **kwargs) -> None: ...
        def __reduce__(self) -> Any: ...
        @property
        def newIdentifier(self) -> Any: ...
        @property
        def oldIdentifier(self) -> Any: ...
    class LayerInfoDidChange(Base):
        def __init__(self, *args, **kwargs) -> None: ...
        def key(self) -> object: ...
        def __reduce__(self) -> Any: ...
    class LayerMutenessChanged(Base):
        def __init__(self, *args, **kwargs) -> None: ...
        def __reduce__(self) -> Any: ...
        @property
        def layerPath(self) -> Any: ...
        @property
        def wasMuted(self) -> Any: ...
    class LayersDidChange(Base):
        def __init__(self, *args, **kwargs) -> None: ...
        def GetLayers(self) -> list: ...
        def GetSerialNumber(self) -> int: ...
        def __reduce__(self) -> Any: ...
    class LayersDidChangeSentPerLayer(Base):
        def __init__(self, *args, **kwargs) -> None: ...
        def GetLayers(self) -> list: ...
        def GetSerialNumber(self) -> int: ...
        def __reduce__(self) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class OpaqueValue(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def __eq__(self, arg2: OpaqueValue) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: OpaqueValue) -> object: ...
    def __reduce__(self) -> Any: ...

class Path(Boost.Python.instance):
    class AncestorsRange(Boost.Python.instance):
        class _iterator(Boost.Python.instance):
            def __init__(self, *args, **kwargs) -> None: ...
            def __next__(self) -> Path: ...
            def __reduce__(self) -> Any: ...
        __instance_size__: ClassVar[int] = ...
        def __init__(self, arg2: Path) -> None: ...
        def GetPath(self) -> Path: ...
        def __iter__(self) -> _iterator: ...
        def __reduce__(self) -> Any: ...
    class _IsValidPathStringResult(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        def __init__(self, arg2: bool, arg3: object) -> None: ...
        def __bool__(self) -> bool: ...
        @overload
        def __eq__(self, arg2: bool) -> object: ...
        @overload
        def __eq__(self, arg2: bool) -> object: ...
        def __getitem__(self, arg2: int) -> object: ...
        @overload
        def __ne__(self, arg2: bool) -> object: ...
        @overload
        def __ne__(self, arg2: bool) -> object: ...
        def __reduce__(self) -> Any: ...
        @property
        def errorMessage(self) -> Any: ...
    absoluteIndicator: ClassVar[str] = ...
    childDelimiter: ClassVar[str] = ...
    expressionIndicator: ClassVar[str] = ...
    mapperArgDelimiter: ClassVar[str] = ...
    mapperIndicator: ClassVar[str] = ...
    namespaceDelimiter: ClassVar[str] = ...
    parentPathElement: ClassVar[str] = ...
    propertyDelimiter: ClassVar[str] = ...
    relationshipTargetEnd: ClassVar[str] = ...
    relationshipTargetStart: ClassVar[str] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg2: object) -> None: ...
    @overload
    def __init__(self, arg2: Path) -> None: ...
    def AppendChild(self, arg2: object) -> Path: ...
    def AppendElementString(self, arg2: object) -> Path: ...
    def AppendExpression(self) -> Path: ...
    def AppendMapper(self, arg2: Path) -> Path: ...
    def AppendMapperArg(self, arg2: object) -> Path: ...
    def AppendPath(self, arg2: Path) -> Path: ...
    def AppendProperty(self, arg2: object) -> Path: ...
    def AppendRelationalAttribute(self, arg2: object) -> Path: ...
    def AppendTarget(self, arg2: Path) -> Path: ...
    def AppendVariantSelection(self, arg2: object, arg3: object) -> Path: ...
    def ContainsPrimVariantSelection(self) -> bool: ...
    def ContainsPropertyElements(self) -> bool: ...
    def ContainsTargetPath(self) -> bool: ...
    @classmethod
    def FindLongestPrefix(cls, arg1: object, arg2: Path) -> object: ...
    @classmethod
    def FindLongestStrictPrefix(cls, arg1: object, arg2: Path) -> object: ...
    @classmethod
    def FindPrefixedRange(cls, arg2: Path) -> object: ...
    def GetAbsoluteRootOrPrimPath(self) -> Path: ...
    def GetAllTargetPathsRecursively(self) -> list: ...
    def GetAncestorsRange(self) -> AncestorsRange: ...
    def GetCommonPrefix(self, arg2: Path) -> Path: ...
    @classmethod
    def GetConciseRelativePaths(cls, arg1: object) -> list: ...
    def GetParentPath(self) -> Path: ...
    def GetPrefixes(self, *args, **kwargs) -> Any: ...
    def GetPrimOrPrimVariantSelectionPath(self) -> Path: ...
    def GetPrimPath(self) -> Path: ...
    def GetVariantSelection(self) -> tuple: ...
    def HasPrefix(self, arg2: Path) -> bool: ...
    def IsAbsolutePath(self) -> bool: ...
    def IsAbsoluteRootOrPrimPath(self) -> bool: ...
    def IsAbsoluteRootPath(self) -> bool: ...
    def IsExpressionPath(self) -> bool: ...
    def IsMapperArgPath(self) -> bool: ...
    def IsMapperPath(self) -> bool: ...
    def IsNamespacedPropertyPath(self) -> bool: ...
    def IsPrimPath(self) -> bool: ...
    def IsPrimPropertyPath(self) -> bool: ...
    def IsPrimVariantSelectionPath(self) -> bool: ...
    def IsPropertyPath(self) -> bool: ...
    def IsRelationalAttributePath(self) -> bool: ...
    def IsRootPrimPath(self) -> bool: ...
    def IsTargetPath(self) -> bool: ...
    @classmethod
    def IsValidIdentifier(cls, arg1: object) -> bool: ...
    @classmethod
    def IsValidNamespacedIdentifier(cls, arg1: object) -> bool: ...
    @classmethod
    def IsValidPathString(cls, arg1: object) -> _IsValidPathStringResult: ...
    @overload
    @classmethod
    def JoinIdentifier(cls, arg1: object) -> str: ...
    @overload
    @classmethod
    def JoinIdentifier(cls, arg1: object, arg2: object) -> str: ...
    @overload
    def MakeAbsolutePath(self, arg1: Path, arg2: Path) -> Path: ...
    @overload
    def MakeAbsolutePath(self, arg1: Path, arg2: Path) -> Path: ...
    @overload
    def MakeRelativePath(self, arg1: Path, arg2: Path) -> Path: ...
    @overload
    def MakeRelativePath(self, arg1: Path, arg2: Path) -> Path: ...
    @classmethod
    def RemoveAncestorPaths(cls, arg1: object) -> list: ...
    def RemoveCommonSuffix(self, arg2: Path, stopAtRootPrim: bool = ...) -> tuple: ...
    @classmethod
    def RemoveDescendentPaths(cls, arg1: object) -> list: ...
    def ReplaceName(self, arg2: object) -> Path: ...
    def ReplacePrefix(self, oldPrefix: Path, newPrefix: Path, fixTargetPaths: bool = ...) -> Path: ...
    def ReplaceTargetPath(self, arg2: Path) -> Path: ...
    def StripAllVariantSelections(self) -> Path: ...
    @classmethod
    def StripNamespace(cls, arg1: object) -> str: ...
    @classmethod
    def StripPrefixNamespace(cls, arg1: object, arg2: object) -> tuple: ...
    @classmethod
    def TokenizeIdentifier(cls, arg1: object) -> object: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, arg2: Path) -> object: ...
    def __ge__(self, arg2: Path) -> object: ...
    def __gt__(self, arg2: Path) -> object: ...
    def __hash__(self) -> int: ...
    def __le__(self, arg2: Path) -> object: ...
    def __lt__(self, arg2: Path) -> object: ...
    def __ne__(self, arg2: Path) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def absoluteRootPath(self) -> Any: ...
    @property
    def elementString(self) -> Any: ...
    @property
    def emptyPath(self) -> Any: ...
    @property
    def isEmpty(self) -> type: ...
    @property
    def name(self) -> Any: ...
    @property
    def pathElementCount(self) -> Any: ...
    @property
    def pathString(self) -> Any: ...
    @property
    def reflexiveRelativePath(self) -> Any: ...
    @property
    def targetPath(self) -> Any: ...

class PathArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> Any: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> object: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def __eq__(self, arg2: PathArray) -> object: ...
    @overload
    def __getitem__(self, arg2: object) -> object: ...
    @overload
    def __getitem__(self, arg2: object) -> object: ...
    @overload
    def __getitem__(self, arg2: int) -> object: ...
    def __iter__(self) -> object: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg2: PathArray) -> object: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...

class PathListOp(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    addedItems: Any
    appendedItems: Any
    deletedItems: Any
    explicitItems: Any
    orderedItems: Any
    prependedItems: Any
    def __init__(self) -> None: ...
    @overload
    def ApplyOperations(self, arg2: object) -> object: ...
    @overload
    def ApplyOperations(self, arg2: PathListOp) -> object: ...
    def Clear(self) -> None: ...
    def ClearAndMakeExplicit(self) -> None: ...
    def Create(self, prependedItems: object, appendedItems: object, deletedItems: object) -> PathListOp: ...
    def CreateExplicit(self, explicitItems: object) -> PathListOp: ...
    def GetAddedOrExplicitItems(self) -> object: ...
    def GetAppliedItems(self) -> object: ...
    def HasItem(self, arg2: Path) -> bool: ...
    def __eq__(self, arg2: PathListOp) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: PathListOp) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def isExplicit(self) -> Any: ...

class Payload(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    assetPath: type
    layerOffset: type
    primPath: type
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, assetPath: object = ..., primPath: Path = ..., layerOffset: LayerOffset = ...) -> None: ...
    @overload
    def __init__(self, arg2: Payload) -> None: ...
    def __eq__(self, arg2: Payload) -> object: ...
    def __ge__(self, arg2: Payload) -> object: ...
    def __gt__(self, arg2: Payload) -> object: ...
    def __hash__(self) -> int: ...
    def __le__(self, arg2: Payload) -> object: ...
    def __lt__(self, arg2: Payload) -> object: ...
    def __ne__(self, arg2: Payload) -> object: ...
    def __reduce__(self) -> Any: ...

class PayloadListOp(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    addedItems: Any
    appendedItems: Any
    deletedItems: Any
    explicitItems: Any
    orderedItems: Any
    prependedItems: Any
    def __init__(self) -> None: ...
    @overload
    def ApplyOperations(self, arg2: object) -> object: ...
    @overload
    def ApplyOperations(self, arg2: PayloadListOp) -> object: ...
    def Clear(self) -> None: ...
    def ClearAndMakeExplicit(self) -> None: ...
    def Create(self, prependedItems: object, appendedItems: object, deletedItems: object) -> PayloadListOp: ...
    def CreateExplicit(self, explicitItems: object) -> PayloadListOp: ...
    def GetAddedOrExplicitItems(self) -> object: ...
    def GetAppliedItems(self) -> object: ...
    def HasItem(self, arg2: Payload) -> bool: ...
    def __eq__(self, arg2: PayloadListOp) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: PayloadListOp) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def isExplicit(self) -> Any: ...

class Permission(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> object: ...
    def __reduce__(self) -> Any: ...

class PrimSpec(Spec):
    ActiveKey: ClassVar[str] = ...
    AnyTypeToken: ClassVar[str] = ...
    CommentKey: ClassVar[str] = ...
    CustomDataKey: ClassVar[str] = ...
    DisplayName: ClassVar[str] = ...
    DocumentationKey: ClassVar[str] = ...
    HiddenKey: ClassVar[str] = ...
    InheritPathsKey: ClassVar[str] = ...
    KindKey: ClassVar[str] = ...
    PayloadKey: ClassVar[str] = ...
    PermissionKey: ClassVar[str] = ...
    PrefixKey: ClassVar[str] = ...
    PrefixSubstitutionsKey: ClassVar[str] = ...
    PrimOrderKey: ClassVar[str] = ...
    PropertyOrderKey: ClassVar[str] = ...
    ReferencesKey: ClassVar[str] = ...
    RelocatesKey: ClassVar[str] = ...
    SpecializesKey: ClassVar[str] = ...
    SpecifierKey: ClassVar[str] = ...
    SymmetricPeerKey: ClassVar[str] = ...
    SymmetryArgumentsKey: ClassVar[str] = ...
    SymmetryFunctionKey: ClassVar[str] = ...
    TypeNameKey: ClassVar[str] = ...
    VariantSelectionKey: ClassVar[str] = ...
    VariantSetNamesKey: ClassVar[str] = ...
    active: Any
    assetInfo: Any
    comment: Any
    customData: Any
    documentation: Any
    hidden: Any
    instanceable: Any
    kind: Any
    name: Any
    nameChildrenOrder: Any
    permission: Any
    prefix: Any
    prefixSubstitutions: Any
    propertyOrder: Any
    relocates: Any
    specifier: Any
    suffix: Any
    suffixSubstitutions: Any
    symmetricPeer: Any
    symmetryArguments: Any
    symmetryFunction: Any
    typeName: Any
    @overload
    def __init__(self, tupleargs, dictkwds) -> Any: ...
    @overload
    def __init__(self, tupleargs, dictkwds) -> Any: ...
    @overload
    def __init__(self, tupleargs, dictkwds) -> Any: ...
    @overload
    def __init__(self, tupleargs, dictkwds) -> Any: ...
    def ApplyNameChildrenOrder(self, arg2: object) -> list: ...
    def ApplyPropertyOrder(self, arg2: object) -> list: ...
    def BlockVariantSelection(self, arg2: object) -> None: ...
    def CanSetName(self, arg2: object) -> bool: ...
    def ClearActive(self) -> None: ...
    def ClearInstanceable(self) -> None: ...
    def ClearKind(self) -> None: ...
    def ClearPayloadList(self, *args, **kwargs) -> Any: ...
    def ClearReferenceList(self, *args, **kwargs) -> Any: ...
    def GetAttributeAtPath(self, arg2: Path) -> AttributeSpec: ...
    def GetObjectAtPath(self, path) -> object: ...
    def GetPrimAtPath(self, arg2: Path) -> PrimSpec: ...
    def GetPropertyAtPath(self, arg2: Path) -> PropertySpec: ...
    def GetRelationshipAtPath(self, arg2: Path) -> RelationshipSpec: ...
    def GetVariantNames(self, arg2: object) -> object: ...
    def HasActive(self) -> bool: ...
    def HasInstanceable(self) -> bool: ...
    def HasKind(self) -> bool: ...
    def RemoveProperty(self, arg2: PropertySpec) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, arg2: PrimSpec) -> bool: ...
    def __ge__(self, arg2: PrimSpec) -> bool: ...
    def __gt__(self, arg2: PrimSpec) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, arg2: PrimSpec) -> bool: ...
    def __lt__(self, arg2: PrimSpec) -> bool: ...
    def __ne__(self, arg2: PrimSpec) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def attributes(self) -> Any: ...
    @property
    def expired(self) -> Any: ...
    @property
    def hasPayloads(self) -> Any: ...
    @property
    def hasReferences(self) -> Any: ...
    @property
    def inheritPathList(self) -> Any: ...
    @property
    def nameChildren(self) -> Any: ...
    @property
    def nameParent(self) -> Any: ...
    @property
    def nameRoot(self) -> Any: ...
    @property
    def payloadList(self) -> Any: ...
    @property
    def properties(self) -> Any: ...
    @property
    def realNameParent(self) -> Any: ...
    @property
    def referenceList(self) -> Any: ...
    @property
    def relationships(self) -> Any: ...
    @property
    def specializesList(self) -> Any: ...
    @property
    def variantSelections(self) -> Any: ...
    @property
    def variantSetNameList(self) -> Any: ...
    @property
    def variantSets(self) -> Any: ...

class PropertySpec(Spec):
    AssetInfoKey: ClassVar[str] = ...
    CommentKey: ClassVar[str] = ...
    CustomDataKey: ClassVar[str] = ...
    CustomKey: ClassVar[str] = ...
    DisplayGroupKey: ClassVar[str] = ...
    DisplayNameKey: ClassVar[str] = ...
    DocumentationKey: ClassVar[str] = ...
    HiddenKey: ClassVar[str] = ...
    PermissionKey: ClassVar[str] = ...
    PrefixKey: ClassVar[str] = ...
    SymmetricPeerKey: ClassVar[str] = ...
    SymmetryArgumentsKey: ClassVar[str] = ...
    SymmetryFunctionKey: ClassVar[str] = ...
    assetInfo: Any
    comment: Any
    custom: Any
    customData: Any
    default: Any
    displayGroup: Any
    displayName: Any
    documentation: Any
    hidden: Any
    name: Any
    permission: Any
    prefix: Any
    symmetricPeer: Any
    symmetryArguments: Any
    symmetryFunction: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def ClearDefaultValue(self) -> None: ...
    def HasDefaultValue(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, arg2: PropertySpec) -> bool: ...
    def __ge__(self, arg2: PropertySpec) -> bool: ...
    def __gt__(self, arg2: PropertySpec) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, arg2: PropertySpec) -> bool: ...
    def __lt__(self, arg2: PropertySpec) -> bool: ...
    def __ne__(self, arg2: PropertySpec) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def expired(self) -> Any: ...
    @property
    def hasOnlyRequiredFields(self) -> Any: ...
    @property
    def owner(self) -> Any: ...
    @property
    def variability(self) -> Any: ...

class PseudoRootSpec(PrimSpec):
    def __init__(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, arg2: PseudoRootSpec) -> bool: ...
    def __ge__(self, arg2: PseudoRootSpec) -> bool: ...
    def __gt__(self, arg2: PseudoRootSpec) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, arg2: PseudoRootSpec) -> bool: ...
    def __lt__(self, arg2: PseudoRootSpec) -> bool: ...
    def __ne__(self, arg2: PseudoRootSpec) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def expired(self) -> Any: ...

class Reference(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, assetPath: object = ..., primPath: Path = ..., layerOffset: LayerOffset = ..., customData: object = ...) -> None: ...
    @overload
    def __init__(self, arg2: Reference) -> None: ...
    def IsInternal(self) -> bool: ...
    def __eq__(self, arg2: Reference) -> object: ...
    def __ge__(self, arg2: Reference) -> object: ...
    def __gt__(self, arg2: Reference) -> object: ...
    def __hash__(self) -> int: ...
    def __le__(self, arg2: Reference) -> object: ...
    def __lt__(self, arg2: Reference) -> object: ...
    def __ne__(self, arg2: Reference) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def assetPath(self) -> type: ...
    @property
    def customData(self) -> Any: ...
    @property
    def layerOffset(self) -> type: ...
    @property
    def primPath(self) -> type: ...

class ReferenceListOp(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    addedItems: Any
    appendedItems: Any
    deletedItems: Any
    explicitItems: Any
    orderedItems: Any
    prependedItems: Any
    def __init__(self) -> None: ...
    @overload
    def ApplyOperations(self, arg2: object) -> object: ...
    @overload
    def ApplyOperations(self, arg2: ReferenceListOp) -> object: ...
    def Clear(self) -> None: ...
    def ClearAndMakeExplicit(self) -> None: ...
    def Create(self, prependedItems: object, appendedItems: object, deletedItems: object) -> ReferenceListOp: ...
    def CreateExplicit(self, explicitItems: object) -> ReferenceListOp: ...
    def GetAddedOrExplicitItems(self) -> object: ...
    def GetAppliedItems(self) -> object: ...
    def HasItem(self, arg2: Reference) -> bool: ...
    def __eq__(self, arg2: ReferenceListOp) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: ReferenceListOp) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def isExplicit(self) -> Any: ...

class RelationshipSpec(PropertySpec):
    TargetsKey: ClassVar[str] = ...
    noLoadHint: Any
    def __init__(self, tupleargs, dictkwds) -> Any: ...
    def RemoveTargetPath(self, arg2: Path, preserveTargetOrder: bool = ...) -> None: ...
    def ReplaceTargetPath(self, arg2: Path, arg3: Path) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, arg2: RelationshipSpec) -> bool: ...
    def __ge__(self, arg2: RelationshipSpec) -> bool: ...
    def __gt__(self, arg2: RelationshipSpec) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, arg2: RelationshipSpec) -> bool: ...
    def __lt__(self, arg2: RelationshipSpec) -> bool: ...
    def __ne__(self, arg2: RelationshipSpec) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def expired(self) -> Any: ...
    @property
    def targetPathList(self) -> Any: ...

class Spec(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def ClearInfo(self, key) -> Any: ...
    def GetAsText(self) -> str: ...
    def GetFallbackForInfo(self, key) -> Any: ...
    def GetInfo(self, arg2: object) -> object: ...
    def GetMetaDataDisplayGroup(self, arg2: object) -> object: ...
    def GetMetaDataInfoKeys(self) -> list: ...
    def GetTypeForInfo(self, key) -> Any: ...
    def HasInfo(self, key) -> bool: ...
    def IsInert(self, *args, **kwargs) -> Any: ...
    def ListInfoKeys(self) -> list: ...
    def SetInfo(self, arg2: object, arg3: object) -> None: ...
    def SetInfoDictionaryValue(self, arg2: object, arg3: object, arg4: object) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, arg2: Spec) -> bool: ...
    def __ge__(self, arg2: Spec) -> bool: ...
    def __gt__(self, arg2: Spec) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, arg2: Spec) -> bool: ...
    def __lt__(self, arg2: Spec) -> bool: ...
    def __ne__(self, arg2: Spec) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def expired(self) -> Any: ...
    @property
    def isInert(self) -> Any: ...
    @property
    def layer(self) -> Any: ...
    @property
    def path(self) -> Any: ...

class SpecType(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> object: ...
    def __reduce__(self) -> Any: ...

class Specifier(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> object: ...
    def __reduce__(self) -> Any: ...

class StringListOp(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    addedItems: Any
    appendedItems: Any
    deletedItems: Any
    explicitItems: Any
    orderedItems: Any
    prependedItems: Any
    def __init__(self) -> None: ...
    @overload
    def ApplyOperations(self, arg2: object) -> object: ...
    @overload
    def ApplyOperations(self, arg2: StringListOp) -> object: ...
    def Clear(self) -> None: ...
    def ClearAndMakeExplicit(self) -> None: ...
    def Create(self, prependedItems: object, appendedItems: object, deletedItems: object) -> StringListOp: ...
    def CreateExplicit(self, explicitItems: object) -> StringListOp: ...
    def GetAddedOrExplicitItems(self) -> object: ...
    def GetAppliedItems(self) -> object: ...
    def HasItem(self, arg2: object) -> bool: ...
    def __eq__(self, arg2: StringListOp) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: StringListOp) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def isExplicit(self) -> Any: ...

class TimeCode(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: float) -> None: ...
    def GetValue(self) -> float: ...
    def __add__(self, arg2: TimeCode) -> object: ...
    def __bool__(self) -> bool: ...
    @overload
    def __eq__(self, arg2: TimeCode) -> object: ...
    @overload
    def __eq__(self, arg2: float) -> object: ...
    def __float__(self) -> float: ...
    @overload
    def __ge__(self, arg2: float) -> object: ...
    @overload
    def __ge__(self, arg2: TimeCode) -> object: ...
    @overload
    def __gt__(self, arg2: float) -> object: ...
    @overload
    def __gt__(self, arg2: TimeCode) -> object: ...
    def __hash__(self) -> int: ...
    @overload
    def __le__(self, arg2: TimeCode) -> object: ...
    @overload
    def __le__(self, arg2: float) -> object: ...
    @overload
    def __lt__(self, arg2: TimeCode) -> object: ...
    @overload
    def __lt__(self, arg2: float) -> object: ...
    def __mul__(self, arg2: TimeCode) -> object: ...
    @overload
    def __ne__(self, arg2: TimeCode) -> object: ...
    @overload
    def __ne__(self, arg2: float) -> object: ...
    def __radd__(self, arg2: float) -> object: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, arg2: float) -> object: ...
    def __rsub__(self, arg2: float) -> object: ...
    def __rtruediv__(self, arg2: float) -> object: ...
    def __sub__(self, arg2: TimeCode) -> object: ...
    def __truediv__(self, arg2: TimeCode) -> object: ...

class TimeCodeArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> Any: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> object: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def __eq__(self, arg2: TimeCodeArray) -> object: ...
    @overload
    def __getitem__(self, arg2: object) -> object: ...
    @overload
    def __getitem__(self, arg2: object) -> object: ...
    @overload
    def __getitem__(self, arg2: int) -> object: ...
    def __iter__(self) -> object: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg2: TimeCodeArray) -> object: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...

class TokenListOp(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    addedItems: Any
    appendedItems: Any
    deletedItems: Any
    explicitItems: Any
    orderedItems: Any
    prependedItems: Any
    def __init__(self) -> None: ...
    @overload
    def ApplyOperations(self, arg2: object) -> object: ...
    @overload
    def ApplyOperations(self, arg2: TokenListOp) -> object: ...
    def Clear(self) -> None: ...
    def ClearAndMakeExplicit(self) -> None: ...
    def Create(self, prependedItems: object, appendedItems: object, deletedItems: object) -> TokenListOp: ...
    def CreateExplicit(self, explicitItems: object) -> TokenListOp: ...
    def GetAddedOrExplicitItems(self) -> object: ...
    def GetAppliedItems(self) -> object: ...
    def HasItem(self, arg2: object) -> bool: ...
    def __eq__(self, arg2: TokenListOp) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: TokenListOp) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def isExplicit(self) -> Any: ...

class UInt64ListOp(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    addedItems: Any
    appendedItems: Any
    deletedItems: Any
    explicitItems: Any
    orderedItems: Any
    prependedItems: Any
    def __init__(self) -> None: ...
    @overload
    def ApplyOperations(self, arg2: object) -> object: ...
    @overload
    def ApplyOperations(self, arg2: UInt64ListOp) -> object: ...
    def Clear(self) -> None: ...
    def ClearAndMakeExplicit(self) -> None: ...
    def Create(self, prependedItems: object, appendedItems: object, deletedItems: object) -> UInt64ListOp: ...
    def CreateExplicit(self, explicitItems: object) -> UInt64ListOp: ...
    def GetAddedOrExplicitItems(self) -> object: ...
    def GetAppliedItems(self) -> object: ...
    def HasItem(self, arg2: int) -> bool: ...
    def __eq__(self, arg2: UInt64ListOp) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: UInt64ListOp) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def isExplicit(self) -> Any: ...

class UIntListOp(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    addedItems: Any
    appendedItems: Any
    deletedItems: Any
    explicitItems: Any
    orderedItems: Any
    prependedItems: Any
    def __init__(self) -> None: ...
    @overload
    def ApplyOperations(self, arg2: object) -> object: ...
    @overload
    def ApplyOperations(self, arg2: UIntListOp) -> object: ...
    def Clear(self) -> None: ...
    def ClearAndMakeExplicit(self) -> None: ...
    def Create(self, prependedItems: object, appendedItems: object, deletedItems: object) -> UIntListOp: ...
    def CreateExplicit(self, explicitItems: object) -> UIntListOp: ...
    def GetAddedOrExplicitItems(self) -> object: ...
    def GetAppliedItems(self) -> object: ...
    def HasItem(self, arg2: int) -> bool: ...
    def __eq__(self, arg2: UIntListOp) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: UIntListOp) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def isExplicit(self) -> Any: ...

class UnregisteredValue(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: object) -> None: ...
    @overload
    def __init__(self, arg2: object) -> None: ...
    @overload
    def __init__(self, arg2: UnregisteredValue) -> None: ...
    @overload
    def __init__(self, arg2: UnregisteredValueListOp) -> None: ...
    def __eq__(self, arg2: UnregisteredValue) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: UnregisteredValue) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def value(self) -> type: ...

class UnregisteredValueListOp(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    addedItems: Any
    appendedItems: Any
    deletedItems: Any
    explicitItems: Any
    orderedItems: Any
    prependedItems: Any
    def __init__(self) -> None: ...
    @overload
    def ApplyOperations(self, arg2: object) -> object: ...
    @overload
    def ApplyOperations(self, arg2: UnregisteredValueListOp) -> object: ...
    def Clear(self) -> None: ...
    def ClearAndMakeExplicit(self) -> None: ...
    def Create(self, prependedItems: object, appendedItems: object, deletedItems: object) -> UnregisteredValueListOp: ...
    def CreateExplicit(self, explicitItems: object) -> UnregisteredValueListOp: ...
    def GetAddedOrExplicitItems(self) -> object: ...
    def GetAppliedItems(self) -> object: ...
    def HasItem(self, arg2: UnregisteredValue) -> bool: ...
    def __eq__(self, arg2: UnregisteredValueListOp) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: UnregisteredValueListOp) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def isExplicit(self) -> Any: ...

class ValueBlock(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def __eq__(self, arg2: ValueBlock) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: ValueBlock) -> object: ...
    def __reduce__(self) -> Any: ...

class ValueRoleNames(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def Color(self) -> Any: ...
    @property
    def EdgeIndex(self) -> Any: ...
    @property
    def FaceIndex(self) -> Any: ...
    @property
    def Frame(self) -> Any: ...
    @property
    def Group(self) -> Any: ...
    @property
    def Normal(self) -> Any: ...
    @property
    def Point(self) -> Any: ...
    @property
    def PointIndex(self) -> Any: ...
    @property
    def TextureCoordinate(self) -> Any: ...
    @property
    def Transform(self) -> Any: ...
    @property
    def Vector(self) -> Any: ...

class ValueTypeName(Boost.Python.instance):
    def __init__(self) -> None: ...
    def __bool__(self) -> object: ...
    @overload
    def __eq__(self, arg2: object) -> object: ...
    @overload
    def __eq__(self, arg2: ValueTypeName) -> object: ...
    def __hash__(self) -> int: ...
    @overload
    def __ne__(self, arg2: object) -> object: ...
    @overload
    def __ne__(self, arg2: ValueTypeName) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def aliasesAsStrings(self) -> Any: ...
    @property
    def arrayType(self) -> type: ...
    @property
    def cppTypeName(self) -> Any: ...
    @property
    def defaultUnit(self) -> type: ...
    @property
    def defaultValue(self) -> type: ...
    @property
    def isArray(self) -> type: ...
    @property
    def isScalar(self) -> type: ...
    @property
    def role(self) -> type: ...
    @property
    def scalarType(self) -> type: ...
    @property
    def type(self) -> type: ...

class ValueTypeNames(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def Find(self) -> ValueTypeName: ...
    def __reduce__(self) -> Any: ...
    @property
    def Asset(self) -> Any: ...
    @property
    def AssetArray(self) -> Any: ...
    @property
    def Bool(self) -> Any: ...
    @property
    def BoolArray(self) -> Any: ...
    @property
    def Color3d(self) -> Any: ...
    @property
    def Color3dArray(self) -> Any: ...
    @property
    def Color3f(self) -> Any: ...
    @property
    def Color3fArray(self) -> Any: ...
    @property
    def Color3h(self) -> Any: ...
    @property
    def Color3hArray(self) -> Any: ...
    @property
    def Color4d(self) -> Any: ...
    @property
    def Color4dArray(self) -> Any: ...
    @property
    def Color4f(self) -> Any: ...
    @property
    def Color4fArray(self) -> Any: ...
    @property
    def Color4h(self) -> Any: ...
    @property
    def Color4hArray(self) -> Any: ...
    @property
    def Double(self) -> Any: ...
    @property
    def Double2(self) -> Any: ...
    @property
    def Double2Array(self) -> Any: ...
    @property
    def Double3(self) -> Any: ...
    @property
    def Double3Array(self) -> Any: ...
    @property
    def Double4(self) -> Any: ...
    @property
    def Double4Array(self) -> Any: ...
    @property
    def DoubleArray(self) -> Any: ...
    @property
    def Float(self) -> Any: ...
    @property
    def Float2(self) -> Any: ...
    @property
    def Float2Array(self) -> Any: ...
    @property
    def Float3(self) -> Any: ...
    @property
    def Float3Array(self) -> Any: ...
    @property
    def Float4(self) -> Any: ...
    @property
    def Float4Array(self) -> Any: ...
    @property
    def FloatArray(self) -> Any: ...
    @property
    def Frame4d(self) -> Any: ...
    @property
    def Frame4dArray(self) -> Any: ...
    @property
    def Group(self) -> Any: ...
    @property
    def Half(self) -> Any: ...
    @property
    def Half2(self) -> Any: ...
    @property
    def Half2Array(self) -> Any: ...
    @property
    def Half3(self) -> Any: ...
    @property
    def Half3Array(self) -> Any: ...
    @property
    def Half4(self) -> Any: ...
    @property
    def Half4Array(self) -> Any: ...
    @property
    def HalfArray(self) -> Any: ...
    @property
    def Int(self) -> Any: ...
    @property
    def Int2(self) -> Any: ...
    @property
    def Int2Array(self) -> Any: ...
    @property
    def Int3(self) -> Any: ...
    @property
    def Int3Array(self) -> Any: ...
    @property
    def Int4(self) -> Any: ...
    @property
    def Int4Array(self) -> Any: ...
    @property
    def Int64(self) -> Any: ...
    @property
    def Int64Array(self) -> Any: ...
    @property
    def IntArray(self) -> Any: ...
    @property
    def Matrix2d(self) -> Any: ...
    @property
    def Matrix2dArray(self) -> Any: ...
    @property
    def Matrix3d(self) -> Any: ...
    @property
    def Matrix3dArray(self) -> Any: ...
    @property
    def Matrix4d(self) -> Any: ...
    @property
    def Matrix4dArray(self) -> Any: ...
    @property
    def Normal3d(self) -> Any: ...
    @property
    def Normal3dArray(self) -> Any: ...
    @property
    def Normal3f(self) -> Any: ...
    @property
    def Normal3fArray(self) -> Any: ...
    @property
    def Normal3h(self) -> Any: ...
    @property
    def Normal3hArray(self) -> Any: ...
    @property
    def Opaque(self) -> Any: ...
    @property
    def Point3d(self) -> Any: ...
    @property
    def Point3dArray(self) -> Any: ...
    @property
    def Point3f(self) -> Any: ...
    @property
    def Point3fArray(self) -> Any: ...
    @property
    def Point3h(self) -> Any: ...
    @property
    def Point3hArray(self) -> Any: ...
    @property
    def Quatd(self) -> Any: ...
    @property
    def QuatdArray(self) -> Any: ...
    @property
    def Quatf(self) -> Any: ...
    @property
    def QuatfArray(self) -> Any: ...
    @property
    def Quath(self) -> Any: ...
    @property
    def QuathArray(self) -> Any: ...
    @property
    def String(self) -> Any: ...
    @property
    def StringArray(self) -> Any: ...
    @property
    def TexCoord2d(self) -> Any: ...
    @property
    def TexCoord2dArray(self) -> Any: ...
    @property
    def TexCoord2f(self) -> Any: ...
    @property
    def TexCoord2fArray(self) -> Any: ...
    @property
    def TexCoord2h(self) -> Any: ...
    @property
    def TexCoord2hArray(self) -> Any: ...
    @property
    def TexCoord3d(self) -> Any: ...
    @property
    def TexCoord3dArray(self) -> Any: ...
    @property
    def TexCoord3f(self) -> Any: ...
    @property
    def TexCoord3fArray(self) -> Any: ...
    @property
    def TexCoord3h(self) -> Any: ...
    @property
    def TexCoord3hArray(self) -> Any: ...
    @property
    def TimeCode(self) -> Any: ...
    @property
    def TimeCodeArray(self) -> Any: ...
    @property
    def Token(self) -> Any: ...
    @property
    def TokenArray(self) -> Any: ...
    @property
    def UChar(self) -> Any: ...
    @property
    def UCharArray(self) -> Any: ...
    @property
    def UInt(self) -> Any: ...
    @property
    def UInt64(self) -> Any: ...
    @property
    def UInt64Array(self) -> Any: ...
    @property
    def UIntArray(self) -> Any: ...
    @property
    def Vector3d(self) -> Any: ...
    @property
    def Vector3dArray(self) -> Any: ...
    @property
    def Vector3f(self) -> Any: ...
    @property
    def Vector3fArray(self) -> Any: ...
    @property
    def Vector3h(self) -> Any: ...
    @property
    def Vector3hArray(self) -> Any: ...

class Variability(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> object: ...
    def __reduce__(self) -> Any: ...

class VariantSetSpec(Spec):
    @overload
    def __init__(self, tupleargs, dictkwds) -> Any: ...
    @overload
    def __init__(self, tupleargs, dictkwds) -> Any: ...
    def RemoveVariant(self, arg2: VariantSpec) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, arg2: VariantSetSpec) -> bool: ...
    def __ge__(self, arg2: VariantSetSpec) -> bool: ...
    def __gt__(self, arg2: VariantSetSpec) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, arg2: VariantSetSpec) -> bool: ...
    def __lt__(self, arg2: VariantSetSpec) -> bool: ...
    def __ne__(self, arg2: VariantSetSpec) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def expired(self) -> Any: ...
    @property
    def name(self) -> Any: ...
    @property
    def owner(self) -> Any: ...
    @property
    def variantList(self) -> Any: ...
    @property
    def variants(self) -> Any: ...

class VariantSpec(Spec):
    def __init__(self, tupleargs, dictkwds) -> Any: ...
    def GetVariantNames(self, arg2: object) -> object: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, arg2: VariantSpec) -> bool: ...
    def __ge__(self, arg2: VariantSpec) -> bool: ...
    def __gt__(self, arg2: VariantSpec) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, arg2: VariantSpec) -> bool: ...
    def __lt__(self, arg2: VariantSpec) -> bool: ...
    def __ne__(self, arg2: VariantSpec) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def expired(self) -> Any: ...
    @property
    def name(self) -> Any: ...
    @property
    def owner(self) -> Any: ...
    @property
    def primSpec(self) -> Any: ...
    @property
    def variantSets(self) -> type: ...

@overload
def Cat(arg1: AssetPathArray) -> AssetPathArray: ...
@overload
def Cat(arg1: AssetPathArray, arg2: AssetPathArray) -> AssetPathArray: ...
@overload
def Cat(arg1: AssetPathArray, arg2: AssetPathArray, arg3: AssetPathArray) -> AssetPathArray: ...
@overload
def Cat(arg1: AssetPathArray, arg2: AssetPathArray, arg3: AssetPathArray, arg4: AssetPathArray) -> AssetPathArray: ...
@overload
def Cat(arg1: AssetPathArray, arg2: AssetPathArray, arg3: AssetPathArray, arg4: AssetPathArray, arg5: AssetPathArray) -> AssetPathArray: ...
@overload
def Cat(arg1: PathArray) -> PathArray: ...
@overload
def Cat(arg1: PathArray, arg2: PathArray) -> PathArray: ...
@overload
def Cat(arg1: PathArray, arg2: PathArray, arg3: PathArray) -> PathArray: ...
@overload
def Cat(arg1: PathArray, arg2: PathArray, arg3: PathArray, arg4: PathArray) -> PathArray: ...
@overload
def Cat(arg1: PathArray, arg2: PathArray, arg3: PathArray, arg4: PathArray, arg5: PathArray) -> PathArray: ...
@overload
def Cat(arg1: TimeCodeArray) -> TimeCodeArray: ...
@overload
def Cat(arg1: TimeCodeArray, arg2: TimeCodeArray) -> TimeCodeArray: ...
@overload
def Cat(arg1: TimeCodeArray, arg2: TimeCodeArray, arg3: TimeCodeArray) -> TimeCodeArray: ...
@overload
def Cat(arg1: TimeCodeArray, arg2: TimeCodeArray, arg3: TimeCodeArray, arg4: TimeCodeArray) -> TimeCodeArray: ...
@overload
def Cat(arg1: TimeCodeArray, arg2: TimeCodeArray, arg3: TimeCodeArray, arg4: TimeCodeArray, arg5: TimeCodeArray) -> TimeCodeArray: ...
def ComputeAssetPathRelativeToLayer(anchor: Layer, assetPath: object) -> str: ...
def ConvertToValidMetadataDictionary(arg1: object) -> tuple: ...
def ConvertUnit(*args, **kwargs) -> Any: ...
@overload
def CopySpec(srcLayer: Layer, srcPath: Path, dstLayer: Layer, dstPath: Path) -> bool: ...
@overload
def CopySpec(srcLayer: Layer, srcPath: Path, dstLayer: Layer, dstPath: Path, shouldCopyValueFn: object, shouldCopyChildrenFn: object) -> bool: ...
def CreatePrimInLayer(arg1: Layer, arg2: Path) -> PrimSpec: ...
def CreateVariantInLayer(arg1: Layer, arg2: Path, arg3: object, arg4: object) -> VariantSpec: ...
def DefaultUnit(*args, **kwargs) -> Any: ...
@overload
def Equal(arg1: AssetPathArray, arg2: AssetPathArray) -> BoolArray: ...
@overload
def Equal(arg1: AssetPath, arg2: AssetPathArray) -> BoolArray: ...
@overload
def Equal(arg1: AssetPathArray, arg2: AssetPath) -> BoolArray: ...
@overload
def Equal(arg1: AssetPathArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: AssetPathArray) -> BoolArray: ...
@overload
def Equal(arg1: AssetPathArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: AssetPathArray) -> BoolArray: ...
@overload
def Equal(arg1: PathArray, arg2: PathArray) -> BoolArray: ...
@overload
def Equal(arg1: Path, arg2: PathArray) -> BoolArray: ...
@overload
def Equal(arg1: PathArray, arg2: Path) -> BoolArray: ...
@overload
def Equal(arg1: PathArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: PathArray) -> BoolArray: ...
@overload
def Equal(arg1: PathArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: PathArray) -> BoolArray: ...
@overload
def Equal(arg1: TimeCodeArray, arg2: TimeCodeArray) -> BoolArray: ...
@overload
def Equal(arg1: TimeCode, arg2: TimeCodeArray) -> BoolArray: ...
@overload
def Equal(arg1: TimeCodeArray, arg2: TimeCode) -> BoolArray: ...
@overload
def Equal(arg1: TimeCodeArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: TimeCodeArray) -> BoolArray: ...
@overload
def Equal(arg1: TimeCodeArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: TimeCodeArray) -> BoolArray: ...
def GetNameForUnit(arg1: object) -> str: ...
def GetTypeForValueTypeName(arg1: object) -> Type: ...
def GetUnitFromName(arg1: object) -> object: ...
def GetValueTypeNameForValue(arg1: object) -> ValueTypeName: ...
def JustCreatePrimAttributeInLayer(layer: Layer, attrPath: Path, typeName: ValueTypeName, variability: object = ..., isCustom: bool = ...) -> bool: ...
def JustCreatePrimInLayer(arg1: Layer, arg2: Path) -> bool: ...
@overload
def NotEqual(arg1: AssetPathArray, arg2: AssetPathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: AssetPath, arg2: AssetPathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: AssetPathArray, arg2: AssetPath) -> BoolArray: ...
@overload
def NotEqual(arg1: AssetPathArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: AssetPathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: AssetPathArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: AssetPathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: PathArray, arg2: PathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Path, arg2: PathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: PathArray, arg2: Path) -> BoolArray: ...
@overload
def NotEqual(arg1: PathArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: PathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: PathArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: PathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: TimeCodeArray, arg2: TimeCodeArray) -> BoolArray: ...
@overload
def NotEqual(arg1: TimeCode, arg2: TimeCodeArray) -> BoolArray: ...
@overload
def NotEqual(arg1: TimeCodeArray, arg2: TimeCode) -> BoolArray: ...
@overload
def NotEqual(arg1: TimeCodeArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: TimeCodeArray) -> BoolArray: ...
@overload
def NotEqual(arg1: TimeCodeArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: TimeCodeArray) -> BoolArray: ...
def UnitCategory(*args, **kwargs) -> Any: ...
def ValueHasValidType(arg1: object) -> bool: ...
def _DumpPathStats() -> None: ...
def _PathGetDebuggerPathText(arg1: Path) -> str: ...
def _PathStress() -> None: ...
def _TestTakeOwnership(arg1: object) -> None: ...