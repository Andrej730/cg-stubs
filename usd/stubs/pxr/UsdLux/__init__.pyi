import Boost.Python
import pxr.Usd
from typing import Any, ClassVar, overload

class BoundableLightBase(pxr.UsdGeom.Boundable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateColorAttr(self, arg1: BoundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateColorTemperatureAttr(self, arg1: BoundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateDiffuseAttr(self, arg1: BoundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateEnableColorTemperatureAttr(self, arg1: BoundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateExposureAttr(self, arg1: BoundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateFiltersRel(self, arg1: BoundableLightBase) -> Relationship: ...
    def CreateIntensityAttr(self, arg1: BoundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateNormalizeAttr(self, arg1: BoundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateSpecularAttr(self, arg1: BoundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> BoundableLightBase: ...
    def GetColorAttr(self, arg1: BoundableLightBase) -> Attribute: ...
    def GetColorTemperatureAttr(self, arg1: BoundableLightBase) -> Attribute: ...
    def GetDiffuseAttr(self, arg1: BoundableLightBase) -> Attribute: ...
    def GetEnableColorTemperatureAttr(self, arg1: BoundableLightBase) -> Attribute: ...
    def GetExposureAttr(self, arg1: BoundableLightBase) -> Attribute: ...
    def GetFiltersRel(self, arg1: BoundableLightBase) -> Relationship: ...
    def GetIntensityAttr(self, arg1: BoundableLightBase) -> Attribute: ...
    def GetNormalizeAttr(self, arg1: BoundableLightBase) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetSpecularAttr(self, arg1: BoundableLightBase) -> Attribute: ...
    def LightAPI(self, arg1: BoundableLightBase) -> LightAPI: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: BoundableLightBase) -> object: ...
    def __reduce__(self) -> Any: ...

class CylinderLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateLengthAttr(self, arg1: CylinderLight, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateRadiusAttr(self, arg1: CylinderLight, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateTreatAsLineAttr(self, arg1: CylinderLight, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> CylinderLight: ...
    def Get(self, stage: Stage, path: Path) -> CylinderLight: ...
    def GetLengthAttr(self, arg1: CylinderLight) -> Attribute: ...
    def GetRadiusAttr(self, arg1: CylinderLight) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetTreatAsLineAttr(self, arg1: CylinderLight) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: CylinderLight) -> object: ...
    def __reduce__(self) -> Any: ...

class DiskLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateRadiusAttr(self, arg1: DiskLight, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> DiskLight: ...
    def Get(self, stage: Stage, path: Path) -> DiskLight: ...
    def GetRadiusAttr(self, arg1: DiskLight) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: DiskLight) -> object: ...
    def __reduce__(self) -> Any: ...

class DistantLight(NonboundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateAngleAttr(self, arg1: DistantLight, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> DistantLight: ...
    def Get(self, stage: Stage, path: Path) -> DistantLight: ...
    def GetAngleAttr(self, arg1: DistantLight) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: DistantLight) -> object: ...
    def __reduce__(self) -> Any: ...

class DomeLight(NonboundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateGuideRadiusAttr(self, arg1: DomeLight, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreatePortalsRel(self, arg1: DomeLight) -> Relationship: ...
    def CreateTextureFileAttr(self, arg1: DomeLight, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateTextureFormatAttr(self, arg1: DomeLight, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> DomeLight: ...
    def Get(self, stage: Stage, path: Path) -> DomeLight: ...
    def GetGuideRadiusAttr(self, arg1: DomeLight) -> Attribute: ...
    def GetPortalsRel(self, arg1: DomeLight) -> Relationship: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetTextureFileAttr(self, arg1: DomeLight) -> Attribute: ...
    def GetTextureFormatAttr(self, arg1: DomeLight) -> Attribute: ...
    def OrientToStageUpAxis(self, arg1: DomeLight) -> None: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: DomeLight) -> object: ...
    def __reduce__(self) -> Any: ...

class GeometryLight(NonboundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateGeometryRel(self, arg1: GeometryLight) -> Relationship: ...
    def Define(self, stage: Stage, path: Path) -> GeometryLight: ...
    def Get(self, stage: Stage, path: Path) -> GeometryLight: ...
    def GetGeometryRel(self, arg1: GeometryLight) -> Relationship: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: GeometryLight) -> object: ...
    def __reduce__(self) -> Any: ...

class LightAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    @overload
    def __init__(self, arg1: object, connectable: ConnectableAPI) -> None: ...
    def Apply(self, prim: Prim) -> LightAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def ConnectableAPI(self, arg1: LightAPI) -> ConnectableAPI: ...
    def CreateColorAttr(self, arg1: LightAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateColorTemperatureAttr(self, arg1: LightAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateDiffuseAttr(self, arg1: LightAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateEnableColorTemperatureAttr(self, arg1: LightAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateExposureAttr(self, arg1: LightAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateFiltersRel(self, arg1: LightAPI) -> Relationship: ...
    def CreateInput(self, arg1: LightAPI, name: object, type: ValueTypeName) -> Input: ...
    def CreateIntensityAttr(self, arg1: LightAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateMaterialSyncModeAttr(self, arg1: LightAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateNormalizeAttr(self, arg1: LightAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateOutput(self, arg1: LightAPI, name: object, type: ValueTypeName) -> Output: ...
    def CreateShaderIdAttr(self, arg1: LightAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateShaderIdAttrForRenderContext(self, arg1: LightAPI, renderContext: object, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateSpecularAttr(self, arg1: LightAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> LightAPI: ...
    def GetColorAttr(self, arg1: LightAPI) -> Attribute: ...
    def GetColorTemperatureAttr(self, arg1: LightAPI) -> Attribute: ...
    def GetDiffuseAttr(self, arg1: LightAPI) -> Attribute: ...
    def GetEnableColorTemperatureAttr(self, arg1: LightAPI) -> Attribute: ...
    def GetExposureAttr(self, arg1: LightAPI) -> Attribute: ...
    def GetFiltersRel(self, arg1: LightAPI) -> Relationship: ...
    def GetInput(self, arg1: LightAPI, name: object) -> Input: ...
    def GetInputs(self, arg1: LightAPI, onlyAuthored: bool = ...) -> list: ...
    def GetIntensityAttr(self, arg1: LightAPI) -> Attribute: ...
    def GetLightLinkCollectionAPI(self, arg1: LightAPI) -> CollectionAPI: ...
    def GetMaterialSyncModeAttr(self, arg1: LightAPI) -> Attribute: ...
    def GetNormalizeAttr(self, arg1: LightAPI) -> Attribute: ...
    def GetOutput(self, arg1: LightAPI, name: object) -> Output: ...
    def GetOutputs(self, arg1: LightAPI, onlyAuthored: bool = ...) -> list: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetShaderId(self, arg1: LightAPI, renderContexts: object) -> object: ...
    def GetShaderIdAttr(self, arg1: LightAPI) -> Attribute: ...
    def GetShaderIdAttrForRenderContext(self, arg1: LightAPI, renderContext: object) -> Attribute: ...
    def GetShadowLinkCollectionAPI(self, arg1: LightAPI) -> CollectionAPI: ...
    def GetSpecularAttr(self, arg1: LightAPI) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: LightAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class LightFilter(pxr.UsdGeom.Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    @overload
    def __init__(self, arg1: object, connectable: ConnectableAPI) -> None: ...
    def ConnectableAPI(self, arg1: LightFilter) -> ConnectableAPI: ...
    def CreateInput(self, arg1: LightFilter, name: object, type: ValueTypeName) -> Input: ...
    def CreateOutput(self, arg1: LightFilter, name: object, type: ValueTypeName) -> Output: ...
    def CreateShaderIdAttr(self, arg1: LightFilter, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateShaderIdAttrForRenderContext(self, arg1: LightFilter, renderContext: object, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> LightFilter: ...
    def Get(self, stage: Stage, path: Path) -> LightFilter: ...
    def GetFilterLinkCollectionAPI(self, arg1: LightFilter) -> CollectionAPI: ...
    def GetInput(self, arg1: LightFilter, name: object) -> Input: ...
    def GetInputs(self, arg1: LightFilter, onlyAuthored: bool = ...) -> list: ...
    def GetOutput(self, arg1: LightFilter, name: object) -> Output: ...
    def GetOutputs(self, arg1: LightFilter, onlyAuthored: bool = ...) -> list: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetShaderId(self, arg1: LightFilter, renderContexts: object) -> object: ...
    def GetShaderIdAttr(self, arg1: LightFilter) -> Attribute: ...
    def GetShaderIdAttrForRenderContext(self, arg1: LightFilter, renderContext: object) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: LightFilter) -> object: ...
    def __reduce__(self) -> Any: ...

class LightListAPI(pxr.Usd.APISchemaBase):
    class ComputeMode(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> object: ...
        def __reduce__(self) -> Any: ...
    ComputeModeConsultModelHierarchyCache: ClassVar[ComputeMode] = ...
    ComputeModeIgnoreCache: ClassVar[ComputeMode] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> LightListAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def ComputeLightList(self, arg1: LightListAPI, arg2: object) -> object: ...
    def CreateLightListCacheBehaviorAttr(self, arg1: LightListAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateLightListRel(self, arg1: LightListAPI) -> Relationship: ...
    def Get(self, stage: Stage, path: Path) -> LightListAPI: ...
    def GetLightListCacheBehaviorAttr(self, arg1: LightListAPI) -> Attribute: ...
    def GetLightListRel(self, arg1: LightListAPI) -> Relationship: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def InvalidateLightList(self, arg1: LightListAPI) -> None: ...
    def StoreLightList(self, arg1: LightListAPI, arg2: object) -> None: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: LightListAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class ListAPI(pxr.Usd.APISchemaBase):
    class ComputeMode(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> object: ...
        def __reduce__(self) -> Any: ...
    ComputeModeConsultModelHierarchyCache: ClassVar[ComputeMode] = ...
    ComputeModeIgnoreCache: ClassVar[ComputeMode] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> ListAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def ComputeLightList(self, arg1: ListAPI, arg2: object) -> object: ...
    def CreateLightListCacheBehaviorAttr(self, arg1: ListAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateLightListRel(self, arg1: ListAPI) -> Relationship: ...
    def Get(self, stage: Stage, path: Path) -> ListAPI: ...
    def GetLightListCacheBehaviorAttr(self, arg1: ListAPI) -> Attribute: ...
    def GetLightListRel(self, arg1: ListAPI) -> Relationship: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def InvalidateLightList(self, arg1: ListAPI) -> None: ...
    def StoreLightList(self, arg1: ListAPI, arg2: object) -> None: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: ListAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class MeshLightAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> MeshLightAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def Get(self, stage: Stage, path: Path) -> MeshLightAPI: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: MeshLightAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class NonboundableLightBase(pxr.UsdGeom.Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateColorAttr(self, arg1: NonboundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateColorTemperatureAttr(self, arg1: NonboundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateDiffuseAttr(self, arg1: NonboundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateEnableColorTemperatureAttr(self, arg1: NonboundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateExposureAttr(self, arg1: NonboundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateFiltersRel(self, arg1: NonboundableLightBase) -> Relationship: ...
    def CreateIntensityAttr(self, arg1: NonboundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateNormalizeAttr(self, arg1: NonboundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateSpecularAttr(self, arg1: NonboundableLightBase, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> NonboundableLightBase: ...
    def GetColorAttr(self, arg1: NonboundableLightBase) -> Attribute: ...
    def GetColorTemperatureAttr(self, arg1: NonboundableLightBase) -> Attribute: ...
    def GetDiffuseAttr(self, arg1: NonboundableLightBase) -> Attribute: ...
    def GetEnableColorTemperatureAttr(self, arg1: NonboundableLightBase) -> Attribute: ...
    def GetExposureAttr(self, arg1: NonboundableLightBase) -> Attribute: ...
    def GetFiltersRel(self, arg1: NonboundableLightBase) -> Relationship: ...
    def GetIntensityAttr(self, arg1: NonboundableLightBase) -> Attribute: ...
    def GetNormalizeAttr(self, arg1: NonboundableLightBase) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetSpecularAttr(self, arg1: NonboundableLightBase) -> Attribute: ...
    def LightAPI(self, arg1: NonboundableLightBase) -> LightAPI: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: NonboundableLightBase) -> object: ...
    def __reduce__(self) -> Any: ...

class PluginLight(pxr.UsdGeom.Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Define(self, stage: Stage, path: Path) -> PluginLight: ...
    def Get(self, stage: Stage, path: Path) -> PluginLight: ...
    def GetNodeDefAPI(self, arg1: PluginLight) -> NodeDefAPI: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: PluginLight) -> object: ...
    def __reduce__(self) -> Any: ...

class PluginLightFilter(LightFilter):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Define(self, stage: Stage, path: Path) -> PluginLightFilter: ...
    def Get(self, stage: Stage, path: Path) -> PluginLightFilter: ...
    def GetNodeDefAPI(self, arg1: PluginLightFilter) -> NodeDefAPI: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: PluginLightFilter) -> object: ...
    def __reduce__(self) -> Any: ...

class PortalLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Define(self, stage: Stage, path: Path) -> PortalLight: ...
    def Get(self, stage: Stage, path: Path) -> PortalLight: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: PortalLight) -> object: ...
    def __reduce__(self) -> Any: ...

class RectLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateHeightAttr(self, arg1: RectLight, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateTextureFileAttr(self, arg1: RectLight, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateWidthAttr(self, arg1: RectLight, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> RectLight: ...
    def Get(self, stage: Stage, path: Path) -> RectLight: ...
    def GetHeightAttr(self, arg1: RectLight) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetTextureFileAttr(self, arg1: RectLight) -> Attribute: ...
    def GetWidthAttr(self, arg1: RectLight) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: RectLight) -> object: ...
    def __reduce__(self) -> Any: ...

class ShadowAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    @overload
    def __init__(self, arg1: object, connectable: ConnectableAPI) -> None: ...
    def Apply(self, prim: Prim) -> ShadowAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def ConnectableAPI(self, arg1: ShadowAPI) -> ConnectableAPI: ...
    def CreateInput(self, arg1: ShadowAPI, name: object, type: ValueTypeName) -> Input: ...
    def CreateOutput(self, arg1: ShadowAPI, name: object, type: ValueTypeName) -> Output: ...
    def CreateShadowColorAttr(self, arg1: ShadowAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateShadowDistanceAttr(self, arg1: ShadowAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateShadowEnableAttr(self, arg1: ShadowAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateShadowFalloffAttr(self, arg1: ShadowAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateShadowFalloffGammaAttr(self, arg1: ShadowAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> ShadowAPI: ...
    def GetInput(self, arg1: ShadowAPI, name: object) -> Input: ...
    def GetInputs(self, arg1: ShadowAPI, onlyAuthored: bool = ...) -> list: ...
    def GetOutput(self, arg1: ShadowAPI, name: object) -> Output: ...
    def GetOutputs(self, arg1: ShadowAPI, onlyAuthored: bool = ...) -> list: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetShadowColorAttr(self, arg1: ShadowAPI) -> Attribute: ...
    def GetShadowDistanceAttr(self, arg1: ShadowAPI) -> Attribute: ...
    def GetShadowEnableAttr(self, arg1: ShadowAPI) -> Attribute: ...
    def GetShadowFalloffAttr(self, arg1: ShadowAPI) -> Attribute: ...
    def GetShadowFalloffGammaAttr(self, arg1: ShadowAPI) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: ShadowAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class ShapingAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    @overload
    def __init__(self, arg1: object, connectable: ConnectableAPI) -> None: ...
    def Apply(self, prim: Prim) -> ShapingAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def ConnectableAPI(self, arg1: ShapingAPI) -> ConnectableAPI: ...
    def CreateInput(self, arg1: ShapingAPI, name: object, type: ValueTypeName) -> Input: ...
    def CreateOutput(self, arg1: ShapingAPI, name: object, type: ValueTypeName) -> Output: ...
    def CreateShapingConeAngleAttr(self, arg1: ShapingAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateShapingConeSoftnessAttr(self, arg1: ShapingAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateShapingFocusAttr(self, arg1: ShapingAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateShapingFocusTintAttr(self, arg1: ShapingAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateShapingIesAngleScaleAttr(self, arg1: ShapingAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateShapingIesFileAttr(self, arg1: ShapingAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateShapingIesNormalizeAttr(self, arg1: ShapingAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> ShapingAPI: ...
    def GetInput(self, arg1: ShapingAPI, name: object) -> Input: ...
    def GetInputs(self, arg1: ShapingAPI, onlyAuthored: bool = ...) -> list: ...
    def GetOutput(self, arg1: ShapingAPI, name: object) -> Output: ...
    def GetOutputs(self, arg1: ShapingAPI, onlyAuthored: bool = ...) -> list: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetShapingConeAngleAttr(self, arg1: ShapingAPI) -> Attribute: ...
    def GetShapingConeSoftnessAttr(self, arg1: ShapingAPI) -> Attribute: ...
    def GetShapingFocusAttr(self, arg1: ShapingAPI) -> Attribute: ...
    def GetShapingFocusTintAttr(self, arg1: ShapingAPI) -> Attribute: ...
    def GetShapingIesAngleScaleAttr(self, arg1: ShapingAPI) -> Attribute: ...
    def GetShapingIesFileAttr(self, arg1: ShapingAPI) -> Attribute: ...
    def GetShapingIesNormalizeAttr(self, arg1: ShapingAPI) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: ShapingAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class SphereLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateRadiusAttr(self, arg1: SphereLight, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateTreatAsPointAttr(self, arg1: SphereLight, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> SphereLight: ...
    def Get(self, stage: Stage, path: Path) -> SphereLight: ...
    def GetRadiusAttr(self, arg1: SphereLight) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetTreatAsPointAttr(self, arg1: SphereLight) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: SphereLight) -> object: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def BoundableLightBase(self) -> Any: ...
    @property
    def CylinderLight(self) -> Any: ...
    @property
    def DiskLight(self) -> Any: ...
    @property
    def DistantLight(self) -> Any: ...
    @property
    def DomeLight(self) -> Any: ...
    @property
    def GeometryLight(self) -> Any: ...
    @property
    def LightAPI(self) -> Any: ...
    @property
    def LightFilter(self) -> Any: ...
    @property
    def LightListAPI(self) -> Any: ...
    @property
    def ListAPI(self) -> Any: ...
    @property
    def MeshLight(self) -> Any: ...
    @property
    def MeshLightAPI(self) -> Any: ...
    @property
    def NonboundableLightBase(self) -> Any: ...
    @property
    def PluginLight(self) -> Any: ...
    @property
    def PluginLightFilter(self) -> Any: ...
    @property
    def PortalLight(self) -> Any: ...
    @property
    def RectLight(self) -> Any: ...
    @property
    def ShadowAPI(self) -> Any: ...
    @property
    def ShapingAPI(self) -> Any: ...
    @property
    def SphereLight(self) -> Any: ...
    @property
    def VolumeLight(self) -> Any: ...
    @property
    def VolumeLightAPI(self) -> Any: ...
    @property
    def angular(self) -> Any: ...
    @property
    def automatic(self) -> Any: ...
    @property
    def collectionFilterLinkIncludeRoot(self) -> Any: ...
    @property
    def collectionLightLinkIncludeRoot(self) -> Any: ...
    @property
    def collectionShadowLinkIncludeRoot(self) -> Any: ...
    @property
    def consumeAndContinue(self) -> Any: ...
    @property
    def consumeAndHalt(self) -> Any: ...
    @property
    def cubeMapVerticalCross(self) -> Any: ...
    @property
    def extent(self) -> Any: ...
    @property
    def filterLink(self) -> Any: ...
    @property
    def geometry(self) -> Any: ...
    @property
    def guideRadius(self) -> Any: ...
    @property
    def ignore(self) -> Any: ...
    @property
    def independent(self) -> Any: ...
    @property
    def inputsAngle(self) -> Any: ...
    @property
    def inputsColor(self) -> Any: ...
    @property
    def inputsColorTemperature(self) -> Any: ...
    @property
    def inputsDiffuse(self) -> Any: ...
    @property
    def inputsEnableColorTemperature(self) -> Any: ...
    @property
    def inputsExposure(self) -> Any: ...
    @property
    def inputsHeight(self) -> Any: ...
    @property
    def inputsIntensity(self) -> Any: ...
    @property
    def inputsLength(self) -> Any: ...
    @property
    def inputsNormalize(self) -> Any: ...
    @property
    def inputsRadius(self) -> Any: ...
    @property
    def inputsShadowColor(self) -> Any: ...
    @property
    def inputsShadowDistance(self) -> Any: ...
    @property
    def inputsShadowEnable(self) -> Any: ...
    @property
    def inputsShadowFalloff(self) -> Any: ...
    @property
    def inputsShadowFalloffGamma(self) -> Any: ...
    @property
    def inputsShapingConeAngle(self) -> Any: ...
    @property
    def inputsShapingConeSoftness(self) -> Any: ...
    @property
    def inputsShapingFocus(self) -> Any: ...
    @property
    def inputsShapingFocusTint(self) -> Any: ...
    @property
    def inputsShapingIesAngleScale(self) -> Any: ...
    @property
    def inputsShapingIesFile(self) -> Any: ...
    @property
    def inputsShapingIesNormalize(self) -> Any: ...
    @property
    def inputsSpecular(self) -> Any: ...
    @property
    def inputsTextureFile(self) -> Any: ...
    @property
    def inputsTextureFormat(self) -> Any: ...
    @property
    def inputsWidth(self) -> Any: ...
    @property
    def latlong(self) -> Any: ...
    @property
    def lightFilterShaderId(self) -> Any: ...
    @property
    def lightFilters(self) -> Any: ...
    @property
    def lightLink(self) -> Any: ...
    @property
    def lightList(self) -> Any: ...
    @property
    def lightListCacheBehavior(self) -> Any: ...
    @property
    def lightMaterialSyncMode(self) -> Any: ...
    @property
    def lightShaderId(self) -> Any: ...
    @property
    def materialGlowTintsLight(self) -> Any: ...
    @property
    def mirroredBall(self) -> Any: ...
    @property
    def noMaterialResponse(self) -> Any: ...
    @property
    def orientToStageUpAxis(self) -> Any: ...
    @property
    def portals(self) -> Any: ...
    @property
    def shadowLink(self) -> Any: ...
    @property
    def treatAsLine(self) -> Any: ...
    @property
    def treatAsPoint(self) -> Any: ...

class VolumeLightAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> VolumeLightAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def Get(self, stage: Stage, path: Path) -> VolumeLightAPI: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: VolumeLightAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg1: object, arg2: bool, arg3: object) -> None: ...
    def __bool__(self, arg1: _CanApplyResult) -> bool: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __getitem__(self, arg1: _CanApplyResult, arg2: int) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...

def BlackbodyTemperatureAsRgb(arg1: float) -> Vec3f: ...