import Boost.Python
import pxr.Usd
from typing import Any, ClassVar, overload

class BoundableLightBase(pxr.UsdGeom.Boundable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    def CreateColorAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateColorTemperatureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateDiffuseAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateEnableColorTemperatureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateExposureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateFiltersRel(self) -> pxr.Usd.Relationship: ...
    def CreateIntensityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateNormalizeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateSpecularAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> BoundableLightBase: ...
    def GetColorAttr(self) -> pxr.Usd.Attribute: ...
    def GetColorTemperatureAttr(self) -> pxr.Usd.Attribute: ...
    def GetDiffuseAttr(self) -> pxr.Usd.Attribute: ...
    def GetEnableColorTemperatureAttr(self) -> pxr.Usd.Attribute: ...
    def GetExposureAttr(self) -> pxr.Usd.Attribute: ...
    def GetFiltersRel(self) -> pxr.Usd.Relationship: ...
    def GetIntensityAttr(self) -> pxr.Usd.Attribute: ...
    def GetNormalizeAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetSpecularAttr(self) -> pxr.Usd.Attribute: ...
    def LightAPI(self) -> LightAPI: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class CylinderLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    def CreateLengthAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRadiusAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTreatAsLineAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> CylinderLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> CylinderLight: ...
    def GetLengthAttr(self) -> pxr.Usd.Attribute: ...
    def GetRadiusAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetTreatAsLineAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class DiskLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    def CreateRadiusAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> DiskLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> DiskLight: ...
    def GetRadiusAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class DistantLight(NonboundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    def CreateAngleAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> DistantLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> DistantLight: ...
    def GetAngleAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class DomeLight(NonboundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    def CreateGuideRadiusAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreatePortalsRel(self) -> pxr.Usd.Relationship: ...
    def CreateTextureFileAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTextureFormatAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> DomeLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> DomeLight: ...
    def GetGuideRadiusAttr(self) -> pxr.Usd.Attribute: ...
    def GetPortalsRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetTextureFileAttr(self) -> pxr.Usd.Attribute: ...
    def GetTextureFormatAttr(self) -> pxr.Usd.Attribute: ...
    def OrientToStageUpAxis(self) -> None: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class GeometryLight(NonboundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    def CreateGeometryRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> GeometryLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> GeometryLight: ...
    def GetGeometryRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class LightAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, connectable: pxr.UsdShade.ConnectableAPI) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> LightAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def ConnectableAPI(self) -> pxr.UsdShade.ConnectableAPI: ...
    def CreateColorAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateColorTemperatureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateDiffuseAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateEnableColorTemperatureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateExposureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateFiltersRel(self) -> pxr.Usd.Relationship: ...
    def CreateInput(self, name: str, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Input: ...
    def CreateIntensityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateMaterialSyncModeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateNormalizeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateOutput(self, name: str, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Output: ...
    def CreateShaderIdAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShaderIdAttrForRenderContext(self, renderContext: str, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateSpecularAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> LightAPI: ...
    def GetColorAttr(self) -> pxr.Usd.Attribute: ...
    def GetColorTemperatureAttr(self) -> pxr.Usd.Attribute: ...
    def GetDiffuseAttr(self) -> pxr.Usd.Attribute: ...
    def GetEnableColorTemperatureAttr(self) -> pxr.Usd.Attribute: ...
    def GetExposureAttr(self) -> pxr.Usd.Attribute: ...
    def GetFiltersRel(self) -> pxr.Usd.Relationship: ...
    def GetInput(self, name: str) -> pxr.UsdShade.Input: ...
    def GetInputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Input]: ...
    def GetIntensityAttr(self) -> pxr.Usd.Attribute: ...
    def GetLightLinkCollectionAPI(self) -> pxr.Usd.CollectionAPI: ...
    def GetMaterialSyncModeAttr(self) -> pxr.Usd.Attribute: ...
    def GetNormalizeAttr(self) -> pxr.Usd.Attribute: ...
    def GetOutput(self, name: str) -> pxr.UsdShade.Output: ...
    def GetOutputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Output]: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetShaderId(self, renderContexts: list[str]) -> str: ...
    def GetShaderIdAttr(self) -> pxr.Usd.Attribute: ...
    def GetShaderIdAttrForRenderContext(self, renderContext: str) -> pxr.Usd.Attribute: ...
    def GetShadowLinkCollectionAPI(self) -> pxr.Usd.CollectionAPI: ...
    def GetSpecularAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class LightFilter(pxr.UsdGeom.Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, connectable: pxr.UsdShade.ConnectableAPI) -> None: ...
    def ConnectableAPI(self) -> pxr.UsdShade.ConnectableAPI: ...
    def CreateInput(self, name: str, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Input: ...
    def CreateOutput(self, name: str, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Output: ...
    def CreateShaderIdAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShaderIdAttrForRenderContext(self, renderContext: str, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> LightFilter: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> LightFilter: ...
    def GetFilterLinkCollectionAPI(self) -> pxr.Usd.CollectionAPI: ...
    def GetInput(self, name: str) -> pxr.UsdShade.Input: ...
    def GetInputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Input]: ...
    def GetOutput(self, name: str) -> pxr.UsdShade.Output: ...
    def GetOutputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Output]: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetShaderId(self, renderContexts: list[str]) -> str: ...
    def GetShaderIdAttr(self) -> pxr.Usd.Attribute: ...
    def GetShaderIdAttrForRenderContext(self, renderContext: str) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class LightListAPI(pxr.Usd.APISchemaBase):
    class ComputeMode(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> Any: ...
        def __reduce__(self) -> Any: ...
    ComputeModeConsultModelHierarchyCache: ClassVar[LightListAPI.ComputeMode] = ...
    ComputeModeIgnoreCache: ClassVar[LightListAPI.ComputeMode] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> LightListAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def ComputeLightList(self, arg2: ComputeMode) -> pxr.Sdf.PathSet: ...
    def CreateLightListCacheBehaviorAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateLightListRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> LightListAPI: ...
    def GetLightListCacheBehaviorAttr(self) -> pxr.Usd.Attribute: ...
    def GetLightListRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def InvalidateLightList(self) -> None: ...
    def StoreLightList(self, arg2: pxr.Sdf.PathSet) -> None: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class ListAPI(pxr.Usd.APISchemaBase):
    class ComputeMode(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> Any: ...
        def __reduce__(self) -> Any: ...
    ComputeModeConsultModelHierarchyCache: ClassVar[LightListAPI.ComputeMode] = ...
    ComputeModeIgnoreCache: ClassVar[LightListAPI.ComputeMode] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> ListAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def ComputeLightList(self, arg2: ComputeMode) -> pxr.Sdf.PathSet: ...
    def CreateLightListCacheBehaviorAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateLightListRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> ListAPI: ...
    def GetLightListCacheBehaviorAttr(self) -> pxr.Usd.Attribute: ...
    def GetLightListRel(self) -> pxr.Usd.Relationship: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def InvalidateLightList(self) -> None: ...
    def StoreLightList(self, arg2: pxr.Sdf.PathSet) -> None: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class MeshLightAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> MeshLightAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> MeshLightAPI: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class NonboundableLightBase(pxr.UsdGeom.Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    def CreateColorAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateColorTemperatureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateDiffuseAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateEnableColorTemperatureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateExposureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateFiltersRel(self) -> pxr.Usd.Relationship: ...
    def CreateIntensityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateNormalizeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateSpecularAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> NonboundableLightBase: ...
    def GetColorAttr(self) -> pxr.Usd.Attribute: ...
    def GetColorTemperatureAttr(self) -> pxr.Usd.Attribute: ...
    def GetDiffuseAttr(self) -> pxr.Usd.Attribute: ...
    def GetEnableColorTemperatureAttr(self) -> pxr.Usd.Attribute: ...
    def GetExposureAttr(self) -> pxr.Usd.Attribute: ...
    def GetFiltersRel(self) -> pxr.Usd.Relationship: ...
    def GetIntensityAttr(self) -> pxr.Usd.Attribute: ...
    def GetNormalizeAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetSpecularAttr(self) -> pxr.Usd.Attribute: ...
    def LightAPI(self) -> LightAPI: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class PluginLight(pxr.UsdGeom.Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> PluginLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> PluginLight: ...
    def GetNodeDefAPI(self) -> pxr.UsdShade.NodeDefAPI: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class PluginLightFilter(LightFilter):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> PluginLightFilter: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> PluginLightFilter: ...
    def GetNodeDefAPI(self) -> pxr.UsdShade.NodeDefAPI: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class PortalLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> PortalLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> PortalLight: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class RectLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    def CreateHeightAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTextureFileAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateWidthAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> RectLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> RectLight: ...
    def GetHeightAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetTextureFileAttr(self) -> pxr.Usd.Attribute: ...
    def GetWidthAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class ShadowAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, connectable: pxr.UsdShade.ConnectableAPI) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> ShadowAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def ConnectableAPI(self) -> pxr.UsdShade.ConnectableAPI: ...
    def CreateInput(self, name: str, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Input: ...
    def CreateOutput(self, name: str, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Output: ...
    def CreateShadowColorAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShadowDistanceAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShadowEnableAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShadowFalloffAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShadowFalloffGammaAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> ShadowAPI: ...
    def GetInput(self, name: str) -> pxr.UsdShade.Input: ...
    def GetInputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Input]: ...
    def GetOutput(self, name: str) -> pxr.UsdShade.Output: ...
    def GetOutputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Output]: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetShadowColorAttr(self) -> pxr.Usd.Attribute: ...
    def GetShadowDistanceAttr(self) -> pxr.Usd.Attribute: ...
    def GetShadowEnableAttr(self) -> pxr.Usd.Attribute: ...
    def GetShadowFalloffAttr(self) -> pxr.Usd.Attribute: ...
    def GetShadowFalloffGammaAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class ShapingAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, connectable: pxr.UsdShade.ConnectableAPI) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> ShapingAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def ConnectableAPI(self) -> pxr.UsdShade.ConnectableAPI: ...
    def CreateInput(self, name: str, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Input: ...
    def CreateOutput(self, name: str, type: pxr.Sdf.ValueTypeName) -> pxr.UsdShade.Output: ...
    def CreateShapingConeAngleAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShapingConeSoftnessAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShapingFocusAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShapingFocusTintAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShapingIesAngleScaleAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShapingIesFileAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShapingIesNormalizeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> ShapingAPI: ...
    def GetInput(self, name: str) -> pxr.UsdShade.Input: ...
    def GetInputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Input]: ...
    def GetOutput(self, name: str) -> pxr.UsdShade.Output: ...
    def GetOutputs(self, onlyAuthored: bool = ...) -> list[pxr.UsdShade.Output]: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetShapingConeAngleAttr(self) -> pxr.Usd.Attribute: ...
    def GetShapingConeSoftnessAttr(self) -> pxr.Usd.Attribute: ...
    def GetShapingFocusAttr(self) -> pxr.Usd.Attribute: ...
    def GetShapingFocusTintAttr(self) -> pxr.Usd.Attribute: ...
    def GetShapingIesAngleScaleAttr(self) -> pxr.Usd.Attribute: ...
    def GetShapingIesFileAttr(self) -> pxr.Usd.Attribute: ...
    def GetShapingIesNormalizeAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class SphereLight(BoundableLightBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    def CreateRadiusAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTreatAsPointAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @classmethod
    def Define(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> SphereLight: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> SphereLight: ...
    def GetRadiusAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    def GetTreatAsPointAttr(self) -> pxr.Usd.Attribute: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def BoundableLightBase(self) -> Any: ...
    @property
    def CylinderLight(self) -> Any: ...
    @property
    def DiskLight(self) -> Any: ...
    @property
    def DistantLight(self) -> Any: ...
    @property
    def DomeLight(self) -> Any: ...
    @property
    def GeometryLight(self) -> Any: ...
    @property
    def LightAPI(self) -> Any: ...
    @property
    def LightFilter(self) -> Any: ...
    @property
    def LightListAPI(self) -> Any: ...
    @property
    def ListAPI(self) -> Any: ...
    @property
    def MeshLight(self) -> Any: ...
    @property
    def MeshLightAPI(self) -> Any: ...
    @property
    def NonboundableLightBase(self) -> Any: ...
    @property
    def PluginLight(self) -> Any: ...
    @property
    def PluginLightFilter(self) -> Any: ...
    @property
    def PortalLight(self) -> Any: ...
    @property
    def RectLight(self) -> Any: ...
    @property
    def ShadowAPI(self) -> Any: ...
    @property
    def ShapingAPI(self) -> Any: ...
    @property
    def SphereLight(self) -> Any: ...
    @property
    def VolumeLight(self) -> Any: ...
    @property
    def VolumeLightAPI(self) -> Any: ...
    @property
    def angular(self) -> Any: ...
    @property
    def automatic(self) -> Any: ...
    @property
    def collectionFilterLinkIncludeRoot(self) -> Any: ...
    @property
    def collectionLightLinkIncludeRoot(self) -> Any: ...
    @property
    def collectionShadowLinkIncludeRoot(self) -> Any: ...
    @property
    def consumeAndContinue(self) -> Any: ...
    @property
    def consumeAndHalt(self) -> Any: ...
    @property
    def cubeMapVerticalCross(self) -> Any: ...
    @property
    def extent(self) -> Any: ...
    @property
    def filterLink(self) -> Any: ...
    @property
    def geometry(self) -> Any: ...
    @property
    def guideRadius(self) -> Any: ...
    @property
    def ignore(self) -> Any: ...
    @property
    def independent(self) -> Any: ...
    @property
    def inputsAngle(self) -> Any: ...
    @property
    def inputsColor(self) -> Any: ...
    @property
    def inputsColorTemperature(self) -> Any: ...
    @property
    def inputsDiffuse(self) -> Any: ...
    @property
    def inputsEnableColorTemperature(self) -> Any: ...
    @property
    def inputsExposure(self) -> Any: ...
    @property
    def inputsHeight(self) -> Any: ...
    @property
    def inputsIntensity(self) -> Any: ...
    @property
    def inputsLength(self) -> Any: ...
    @property
    def inputsNormalize(self) -> Any: ...
    @property
    def inputsRadius(self) -> Any: ...
    @property
    def inputsShadowColor(self) -> Any: ...
    @property
    def inputsShadowDistance(self) -> Any: ...
    @property
    def inputsShadowEnable(self) -> Any: ...
    @property
    def inputsShadowFalloff(self) -> Any: ...
    @property
    def inputsShadowFalloffGamma(self) -> Any: ...
    @property
    def inputsShapingConeAngle(self) -> Any: ...
    @property
    def inputsShapingConeSoftness(self) -> Any: ...
    @property
    def inputsShapingFocus(self) -> Any: ...
    @property
    def inputsShapingFocusTint(self) -> Any: ...
    @property
    def inputsShapingIesAngleScale(self) -> Any: ...
    @property
    def inputsShapingIesFile(self) -> Any: ...
    @property
    def inputsShapingIesNormalize(self) -> Any: ...
    @property
    def inputsSpecular(self) -> Any: ...
    @property
    def inputsTextureFile(self) -> Any: ...
    @property
    def inputsTextureFormat(self) -> Any: ...
    @property
    def inputsWidth(self) -> Any: ...
    @property
    def latlong(self) -> Any: ...
    @property
    def lightFilterShaderId(self) -> Any: ...
    @property
    def lightFilters(self) -> Any: ...
    @property
    def lightLink(self) -> Any: ...
    @property
    def lightList(self) -> Any: ...
    @property
    def lightListCacheBehavior(self) -> Any: ...
    @property
    def lightMaterialSyncMode(self) -> Any: ...
    @property
    def lightShaderId(self) -> Any: ...
    @property
    def materialGlowTintsLight(self) -> Any: ...
    @property
    def mirroredBall(self) -> Any: ...
    @property
    def noMaterialResponse(self) -> Any: ...
    @property
    def orientToStageUpAxis(self) -> Any: ...
    @property
    def portals(self) -> Any: ...
    @property
    def shadowLink(self) -> Any: ...
    @property
    def treatAsLine(self) -> Any: ...
    @property
    def treatAsPoint(self) -> Any: ...

class VolumeLightAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @classmethod
    def Apply(cls, prim: pxr.Usd.Prim) -> VolumeLightAPI: ...
    @classmethod
    def CanApply(cls, prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    @classmethod
    def Get(cls, stage: pxr.Usd.Stage, path: pxr.Sdf.Path) -> VolumeLightAPI: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list[str]: ...
    @classmethod
    def _GetStaticTfType(cls) -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: bool, arg3: object) -> None: ...
    def __bool__(self) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool: ...
    def __getitem__(self, arg2: int) -> Any: ...
    @overload
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...

def BlackbodyTemperatureAsRgb(arg1: float) -> pxr.Gf.Vec3f: ...