import Boost.Python
import pxr.Tf
from typing import Any, ClassVar, overload

VersionFilterAllVersions: VersionFilter
VersionFilterDefaultOnly: VersionFilter

class DiscoveryPlugin(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def DiscoverNodes(self, arg2: DiscoveryPluginContext) -> Any: ...
    @overload
    def DiscoverNodes(self, arg2: DiscoveryPluginContext) -> None: ...
    @overload
    def GetSearchURIs(self) -> Any: ...
    @overload
    def GetSearchURIs(self) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def expired(self) -> Any: ...

class DiscoveryPluginContext(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def GetSourceType(self, arg2: object) -> Any: ...
    @overload
    def GetSourceType(self, arg2: object) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def expired(self) -> Any: ...

class DiscoveryPluginList(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def append(self, arg2: object) -> None: ...
    def extend(self, arg2: object) -> None: ...
    def __contains__(self, arg2: object) -> bool: ...
    def __delitem__(self, arg2: object) -> None: ...
    def __getitem__(self, arg2: object) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __reduce__(self) -> Any: ...
    def __setitem__(self, arg2: object, arg3: object) -> None: ...

class DiscoveryUri(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    resolvedUri: Any
    uri: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: DiscoveryUri) -> None: ...
    def __reduce__(self) -> Any: ...

class Node(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def GetContext(self) -> Any: ...
    def GetFamily(self) -> Any: ...
    def GetIdentifier(self) -> Any: ...
    def GetInfoString(self) -> str: ...
    def GetInput(self, arg2: object) -> Property: ...
    def GetInputNames(self) -> Any: ...
    def GetMetadata(self) -> dict: ...
    def GetName(self) -> str: ...
    def GetOutput(self, arg2: object) -> Property: ...
    def GetOutputNames(self) -> Any: ...
    def GetResolvedDefinitionURI(self) -> str: ...
    def GetResolvedImplementationURI(self) -> str: ...
    def GetSourceCode(self) -> str: ...
    def GetSourceType(self) -> Any: ...
    def GetVersion(self) -> Version: ...
    def IsValid(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class NodeDiscoveryResult(Boost.Python.instance):
    def __init__(self, identifier: object, version: Version, name: object, family: object, discoveryType: object, sourceType: object, uri: object, resolvedUri: object, sourceCode: object = ..., metadata: object = ..., blindData: object = ..., subIdentifier: object = ...) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def blindData(self) -> Any: ...
    @property
    def discoveryType(self) -> Any: ...
    @property
    def family(self) -> Any: ...
    @property
    def identifier(self) -> Any: ...
    @property
    def metadata(self) -> Any: ...
    @property
    def name(self) -> Any: ...
    @property
    def resolvedUri(self) -> Any: ...
    @property
    def sourceCode(self) -> Any: ...
    @property
    def sourceType(self) -> Any: ...
    @property
    def subIdentifier(self) -> Any: ...
    @property
    def uri(self) -> Any: ...
    @property
    def version(self) -> Any: ...

class NodeList(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def append(self, arg2: object) -> None: ...
    def extend(self, arg2: object) -> None: ...
    def __contains__(self, arg2: object) -> bool: ...
    def __delitem__(self, arg2: object) -> None: ...
    def __getitem__(self, arg2: object) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __reduce__(self) -> Any: ...
    def __setitem__(self, arg2: object, arg3: object) -> None: ...

class Property(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def CanConnectTo(self, arg2: Property) -> bool: ...
    def GetArraySize(self) -> int: ...
    def GetDefaultValue(self) -> Any: ...
    def GetInfoString(self) -> str: ...
    def GetMetadata(self) -> dict: ...
    def GetName(self) -> Any: ...
    def GetType(self) -> Any: ...
    def GetTypeAsSdfType(self) -> tuple: ...
    def IsArray(self) -> bool: ...
    def IsConnectable(self) -> bool: ...
    def IsDynamicArray(self) -> bool: ...
    def IsOutput(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class Registry(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def GetAllNodeSourceTypes(self) -> Any: ...
    def GetNodeByIdentifier(self, identifier: object, typePriority: object = ...) -> Node: ...
    def GetNodeByIdentifierAndType(self, identifier: object, nodeType: object) -> Node: ...
    def GetNodeByName(self, name: object, typePriority: object = ..., filter: object = ...) -> Node: ...
    def GetNodeByNameAndType(self, name: object, nodeType: object, filter: object = ...) -> Node: ...
    def GetNodeFromAsset(self, asset: pxr.Sdf.AssetPath, metadata: object = ..., subIdentifier: object = ..., sourceType: object = ...) -> Node: ...
    def GetNodeFromSourceCode(self, sourceCode: object, sourceType: object, metadata: object = ...) -> Node: ...
    def GetNodeIdentifiers(self, family: object = ..., filter: object = ...) -> Any: ...
    def GetNodeNames(self, family: object = ...) -> Any: ...
    def GetNodesByFamily(self, family: object = ..., filter: object = ...) -> NodeList: ...
    def GetNodesByIdentifier(self, identifier: object) -> NodeList: ...
    def GetNodesByName(self, name: object, filter: object = ...) -> NodeList: ...
    def GetSearchURIs(self) -> Any: ...
    def SetExtraDiscoveryPlugins(self, arg2: list) -> None: ...
    def SetExtraParserPlugins(self, arg2: object) -> None: ...
    def __reduce__(self) -> Any: ...

class Version(Boost.Python.instance):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: int) -> None: ...
    @overload
    def __init__(self, arg2: object) -> None: ...
    def GetAsDefault(self) -> Version: ...
    def GetMajor(self) -> int: ...
    def GetMinor(self) -> int: ...
    def GetStringSuffix(self) -> str: ...
    def IsDefault(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class VersionFilter(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> Any: ...
    def __reduce__(self) -> Any: ...

class _AnnotatedBool(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: bool, arg3: object) -> None: ...
    def __bool__(self) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool: ...
    def __getitem__(self, arg2: int) -> Any: ...
    @overload
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def message(self) -> Any: ...

class _FilesystemDiscoveryPlugin(DiscoveryPlugin):
    class Context(DiscoveryPluginContext):
        def __init__(self) -> None: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __reduce__(self) -> Any: ...
        @property
        def expired(self) -> Any: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: object) -> None: ...
    def DiscoverNodes(self, arg2: DiscoveryPluginContext) -> list: ...
    def GetSearchURIs(self) -> Any: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def expired(self) -> Any: ...

def FsHelpersDiscoverFiles(searchPaths: object, allowedExtensions: object, followSymlinks: bool = ...) -> list: ...
def FsHelpersDiscoverNodes(searchPaths: object, allowedExtensions: object, followSymlinks: bool = ..., context: DiscoveryPluginContext = ...) -> Any: ...
def FsHelpersSplitShaderIdentifier(identifier: object) -> Any: ...
def _ValidateProperty(arg1: Node, arg2: Property) -> _AnnotatedBool: ...