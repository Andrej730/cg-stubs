import Boost.Python
import pxr.Tf
import types
from typing import Any, ClassVar, overload

class AssetInfo(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    assetName: Any
    resolverInfo: Any
    version: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class DefaultResolver(Resolver):
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def SetDefaultSearchPath(cls, searchPath: list[str]) -> None: ...
    def __reduce__(self) -> Any: ...

class DefaultResolverContext(Boost.Python.instance):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, searchPaths: object) -> None: ...
    def GetSearchPath(self) -> list[str]: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class Notice(Boost.Python.instance):
    class ResolverChanged(Notice.ResolverNotice):
        def __init__(self, *args, **kwargs) -> None: ...
        def AffectsContext(self, context: ResolverContext) -> bool: ...
        def __reduce__(self) -> Any: ...
    class ResolverNotice(pxr.Tf.Notice):
        def __init__(self, *args, **kwargs) -> None: ...
        def __reduce__(self) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class ResolvedPath(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: object) -> None: ...
    def GetPathString(self) -> str: ...
    def __bool__(self) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __ge__(self, other: object) -> bool: ...
    @overload
    def __ge__(self, other: object) -> bool: ...
    @overload
    def __gt__(self, other: object) -> bool: ...
    @overload
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    @overload
    def __le__(self, other: object) -> bool: ...
    @overload
    def __le__(self, other: object) -> bool: ...
    @overload
    def __lt__(self, other: object) -> bool: ...
    @overload
    def __lt__(self, other: object) -> bool: ...
    @overload
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class Resolver(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def CanWriteAssetToPath(self, resolvedPath: ResolvedPath) -> _PyAnnotatedBoolResult: ...
    @overload
    def CreateContextFromString(self, contextStr: str) -> ResolverContext: ...
    @overload
    def CreateContextFromString(self, uriScheme: str, contextStr: str) -> ResolverContext: ...
    def CreateContextFromStrings(self, contextStrs: list[tuple[str, str]]) -> ResolverContext: ...
    def CreateDefaultContext(self) -> ResolverContext: ...
    def CreateDefaultContextForAsset(self, assetPath: str) -> ResolverContext: ...
    def CreateIdentifier(self, assetPath: str, anchorAssetPath: ResolvedPath = ...) -> str: ...
    def CreateIdentifierForNewAsset(self, assetPath: str, anchorAssetPath: ResolvedPath = ...) -> str: ...
    def GetAssetInfo(self, assetPath: str, resolvedPath: ResolvedPath) -> AssetInfo: ...
    def GetCurrentContext(self) -> ResolverContext: ...
    def GetExtension(self, assetPath: str) -> str: ...
    def GetModificationTimestamp(self, assetPath: str, resolvedPath: ResolvedPath) -> Timestamp: ...
    def IsContextDependentPath(self, assetPath: str) -> bool: ...
    def RefreshContext(self, arg2: ResolverContext) -> None: ...
    def Resolve(self, assetPath: str) -> ResolvedPath: ...
    def ResolveForNewAsset(self, assetPath: str) -> ResolvedPath: ...
    def __reduce__(self) -> Any: ...

class ResolverContext(Boost.Python.instance):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: object) -> None: ...
    def Get(self) -> list: ...
    def GetDebugString(self) -> str: ...
    def IsEmpty(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class ResolverContextBinder(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: ResolverContext) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType) -> bool: ...
    def __reduce__(self) -> Any: ...

class ResolverScopedCache(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType) -> bool: ...
    def __reduce__(self) -> Any: ...

class Timestamp(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: float) -> None: ...
    @overload
    def __init__(self, arg2: Timestamp) -> None: ...
    def GetTime(self) -> float: ...
    def IsValid(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class _PyAnnotatedBoolResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: bool, arg3: object) -> None: ...
    def __bool__(self) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __eq__(self, other: object) -> bool: ...
    def __getitem__(self, arg2: int) -> Any: ...
    @overload
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...

def GetResolver() -> Resolver: ...
def GetUnderlyingResolver() -> Resolver: ...
def IsPackageRelativePath(path: str) -> bool: ...
@overload
def JoinPackageRelativePath(paths: list[str]) -> str: ...
@overload
def JoinPackageRelativePath(paths: tuple[str, str]) -> str: ...
@overload
def JoinPackageRelativePath(packagePath: str, packagedPath: str) -> str: ...
def SetPreferredResolver(resolverTypeName: str) -> None: ...
def SplitPackageRelativePathInner(path: str) -> tuple[str, str]: ...
def SplitPackageRelativePathOuter(path: str) -> tuple[str, str]: ...
def _TestImplicitConversion(arg1: ResolverContext) -> ResolverContext: ...