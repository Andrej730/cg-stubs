import Boost.Python
import pxr.Usd
from typing import Any, ClassVar, overload

class MaterialAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    @overload
    def __init__(self, arg1: object, material: Material) -> None: ...
    def Apply(self, prim: Prim) -> MaterialAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def ComputeInterfaceInputConsumersMap(self, arg1: MaterialAPI, computeTransitiveConsumers: bool = ...) -> dict: ...
    def CreateDisplacementAttr(self, arg1: MaterialAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateSurfaceAttr(self, arg1: MaterialAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVolumeAttr(self, arg1: MaterialAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> MaterialAPI: ...
    def GetDisplacement(self, arg1: MaterialAPI, ignoreBaseMaterial: bool = ...) -> Shader: ...
    def GetDisplacementAttr(self, arg1: MaterialAPI) -> Attribute: ...
    def GetDisplacementOutput(self, arg1: MaterialAPI) -> Output: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetSurface(self, arg1: MaterialAPI, ignoreBaseMaterial: bool = ...) -> Shader: ...
    def GetSurfaceAttr(self, arg1: MaterialAPI) -> Attribute: ...
    def GetSurfaceOutput(self, arg1: MaterialAPI) -> Output: ...
    def GetVolume(self, arg1: MaterialAPI, ignoreBaseMaterial: bool = ...) -> Shader: ...
    def GetVolumeAttr(self, arg1: MaterialAPI) -> Attribute: ...
    def GetVolumeOutput(self, arg1: MaterialAPI) -> Output: ...
    def SetDisplacementSource(self, arg1: MaterialAPI, arg2: Path) -> bool: ...
    def SetSurfaceSource(self, arg1: MaterialAPI, arg2: Path) -> bool: ...
    def SetVolumeSource(self, arg1: MaterialAPI, arg2: Path) -> bool: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: MaterialAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class RenderPassAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> RenderPassAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def Get(self, stage: Stage, path: Path) -> RenderPassAPI: ...
    def GetCameraVisibilityCollectionAPI(self, arg1: RenderPassAPI) -> CollectionAPI: ...
    def GetMatteCollectionAPI(self, arg1: RenderPassAPI) -> CollectionAPI: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: RenderPassAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class SplineAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    @overload
    def __init__(self, arg1: object, arg2: Prim, arg3: object, arg4: ValueTypeName, arg5: bool) -> None: ...
    @overload
    def __init__(self, arg1: object, arg2: SchemaBase, arg3: object, arg4: ValueTypeName, arg5: bool) -> None: ...
    def Apply(self, prim: Prim) -> SplineAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def CreateInterpolationAttr(self, arg1: SplineAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreatePositionsAttr(self, arg1: SplineAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateValuesAttr(self, arg1: SplineAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> SplineAPI: ...
    def GetInterpolationAttr(self, arg1: SplineAPI) -> Attribute: ...
    def GetPositionsAttr(self, arg1: SplineAPI) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetValuesAttr(self, arg1: SplineAPI) -> Attribute: ...
    def GetValuesTypeName(self, arg1: SplineAPI) -> ValueTypeName: ...
    def Validate(self, arg1: SplineAPI) -> tuple: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: SplineAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class StatementsAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> StatementsAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    @overload
    def CreateRiAttribute(self, arg1: StatementsAPI, name: object, tfType: Type, nameSpace: object = ...) -> Attribute: ...
    @overload
    def CreateRiAttribute(self, arg1: StatementsAPI, name: object, riType: object, nameSpace: object = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> StatementsAPI: ...
    def GetCoordinateSystem(self, arg1: StatementsAPI) -> str: ...
    def GetModelCoordinateSystems(self, arg1: StatementsAPI) -> list: ...
    def GetModelScopedCoordinateSystems(self, arg1: StatementsAPI) -> list: ...
    def GetRiAttribute(self, arg1: StatementsAPI, name: object, nameSpace: object = ...) -> Attribute: ...
    def GetRiAttributeName(self, prop: Property) -> object: ...
    def GetRiAttributeNameSpace(self, prop: Property) -> object: ...
    def GetRiAttributes(self, arg1: StatementsAPI, nameSpace: object = ...) -> list: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetScopedCoordinateSystem(self, arg1: StatementsAPI) -> str: ...
    def HasCoordinateSystem(self, arg1: StatementsAPI) -> bool: ...
    def HasScopedCoordinateSystem(self, arg1: StatementsAPI) -> bool: ...
    def IsRiAttribute(self, prop: Property) -> bool: ...
    def MakeRiAttributePropertyName(self, attrName: object) -> str: ...
    def SetCoordinateSystem(self, arg1: StatementsAPI, coordSysName: object) -> None: ...
    def SetScopedCoordinateSystem(self, arg1: StatementsAPI, coordSysName: object) -> None: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: StatementsAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def RiMaterialAPI(self) -> Any: ...
    @property
    def RiRenderPassAPI(self) -> Any: ...
    @property
    def RiSplineAPI(self) -> Any: ...
    @property
    def StatementsAPI(self) -> Any: ...
    @property
    def bspline(self) -> Any: ...
    @property
    def cameraVisibility(self) -> Any: ...
    @property
    def catmullRom(self) -> Any: ...
    @property
    def collectionCameraVisibilityIncludeRoot(self) -> Any: ...
    @property
    def constant(self) -> Any: ...
    @property
    def interpolation(self) -> Any: ...
    @property
    def linear(self) -> Any: ...
    @property
    def matte(self) -> Any: ...
    @property
    def outputsRiDisplacement(self) -> Any: ...
    @property
    def outputsRiSurface(self) -> Any: ...
    @property
    def outputsRiVolume(self) -> Any: ...
    @property
    def positions(self) -> Any: ...
    @property
    def renderContext(self) -> Any: ...
    @property
    def spline(self) -> Any: ...
    @property
    def values(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg1: object, arg2: bool, arg3: object) -> None: ...
    def __bool__(self, arg1: _CanApplyResult) -> bool: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __getitem__(self, arg1: _CanApplyResult, arg2: int) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...

def ConvertFromRManFaceVaryingLinearInterpolation(arg1: int) -> object: ...
def ConvertFromRManInterpolateBoundary(arg1: int) -> object: ...
def ConvertToRManFaceVaryingLinearInterpolation(arg1: object) -> int: ...
def ConvertToRManInterpolateBoundary(arg1: object) -> int: ...