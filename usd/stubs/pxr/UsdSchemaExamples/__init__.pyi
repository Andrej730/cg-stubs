import Boost.Python
import pxr.Usd
from typing import Any, ClassVar, overload

class Complex(Simple):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateComplexStringAttr(self, arg1: Complex, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Define(self, stage: Stage, path: Path) -> Complex: ...
    def Get(self, stage: Stage, path: Path) -> Complex: ...
    def GetComplexStringAttr(self, arg1: Complex) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Complex) -> object: ...
    def __reduce__(self) -> Any: ...

class ParamsAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def Apply(self, prim: Prim) -> ParamsAPI: ...
    def CanApply(self, prim: Prim) -> _CanApplyResult: ...
    def CreateMassAttr(self, arg1: ParamsAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVelocityAttr(self, arg1: ParamsAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateVolumeAttr(self, arg1: ParamsAPI, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def Get(self, stage: Stage, path: Path) -> ParamsAPI: ...
    def GetMassAttr(self, arg1: ParamsAPI) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetVelocityAttr(self, arg1: ParamsAPI) -> Attribute: ...
    def GetVolumeAttr(self, arg1: ParamsAPI) -> Attribute: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: ParamsAPI) -> object: ...
    def __reduce__(self) -> Any: ...

class Simple(pxr.Usd.Typed):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg1: object) -> None: ...
    @overload
    def __init__(self, arg1: object, prim: Prim) -> None: ...
    @overload
    def __init__(self, arg1: object, schemaObj: SchemaBase) -> None: ...
    def CreateIntAttrAttr(self, arg1: Simple, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateTargetRel(self, arg1: Simple) -> Relationship: ...
    def Get(self, stage: Stage, path: Path) -> Simple: ...
    def GetIntAttrAttr(self, arg1: Simple) -> Attribute: ...
    def GetSchemaAttributeNames(self, includeInherited: bool = ...) -> list: ...
    def GetTargetRel(self, arg1: Simple) -> Relationship: ...
    def _GetStaticTfType(self) -> Type: ...
    def __bool__(self, arg1: Simple) -> object: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def ComplexPrim(self) -> Any: ...
    @property
    def ParamsAPI(self) -> Any: ...
    @property
    def SimplePrim(self) -> Any: ...
    @property
    def complexString(self) -> Any: ...
    @property
    def intAttr(self) -> Any: ...
    @property
    def paramsMass(self) -> Any: ...
    @property
    def paramsVelocity(self) -> Any: ...
    @property
    def paramsVolume(self) -> Any: ...
    @property
    def target(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg1: object, arg2: bool, arg3: object) -> None: ...
    def __bool__(self, arg1: _CanApplyResult) -> bool: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __eq__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __getitem__(self, arg1: _CanApplyResult, arg2: int) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    @overload
    def __ne__(self, arg1: _CanApplyResult, arg2: bool) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...