import Boost.Python
import pxr.Gf
from typing import Any, ClassVar, overload

class BoolArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: BoolArray) -> Any: ...
    @overload
    def __add__(self, arg2: bool) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> BoolArray: ...
    @overload
    def __add__(self, arg2: list) -> BoolArray: ...
    @overload
    def __div__(self, arg2: tuple) -> BoolArray: ...
    @overload
    def __div__(self, arg2: list) -> BoolArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mod__(self, arg2: BoolArray) -> Any: ...
    @overload
    def __mod__(self, arg2: bool) -> Any: ...
    @overload
    def __mod__(self, arg2: tuple) -> BoolArray: ...
    @overload
    def __mod__(self, arg2: list) -> BoolArray: ...
    @overload
    def __mul__(self, arg2: BoolArray) -> Any: ...
    @overload
    def __mul__(self, arg2: bool) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> BoolArray: ...
    @overload
    def __mul__(self, arg2: list) -> BoolArray: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: bool) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> BoolArray: ...
    @overload
    def __radd__(self, arg2: list) -> BoolArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> BoolArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> BoolArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmod__(self, arg2: bool) -> Any: ...
    @overload
    def __rmod__(self, arg2: tuple) -> BoolArray: ...
    @overload
    def __rmod__(self, arg2: list) -> BoolArray: ...
    @overload
    def __rmul__(self, arg2: bool) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> BoolArray: ...
    @overload
    def __rmul__(self, arg2: list) -> BoolArray: ...
    @overload
    def __rsub__(self, arg2: bool) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> BoolArray: ...
    @overload
    def __rsub__(self, arg2: list) -> BoolArray: ...
    def __rtruediv__(self, arg2: bool) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: BoolArray) -> Any: ...
    @overload
    def __sub__(self, arg2: bool) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> BoolArray: ...
    @overload
    def __sub__(self, arg2: list) -> BoolArray: ...
    @overload
    def __truediv__(self, arg2: BoolArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: bool) -> Any: ...

class CharArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: CharArray) -> Any: ...
    @overload
    def __add__(self, arg2: str) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> CharArray: ...
    @overload
    def __add__(self, arg2: list) -> CharArray: ...
    @overload
    def __div__(self, arg2: tuple) -> CharArray: ...
    @overload
    def __div__(self, arg2: list) -> CharArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mod__(self, arg2: CharArray) -> Any: ...
    @overload
    def __mod__(self, arg2: str) -> Any: ...
    @overload
    def __mod__(self, arg2: tuple) -> CharArray: ...
    @overload
    def __mod__(self, arg2: list) -> CharArray: ...
    @overload
    def __mul__(self, arg2: CharArray) -> Any: ...
    @overload
    def __mul__(self, arg2: str) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> CharArray: ...
    @overload
    def __mul__(self, arg2: list) -> CharArray: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: str) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> CharArray: ...
    @overload
    def __radd__(self, arg2: list) -> CharArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> CharArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> CharArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmod__(self, arg2: str) -> Any: ...
    @overload
    def __rmod__(self, arg2: tuple) -> CharArray: ...
    @overload
    def __rmod__(self, arg2: list) -> CharArray: ...
    @overload
    def __rmul__(self, arg2: str) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> CharArray: ...
    @overload
    def __rmul__(self, arg2: list) -> CharArray: ...
    @overload
    def __rsub__(self, arg2: str) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> CharArray: ...
    @overload
    def __rsub__(self, arg2: list) -> CharArray: ...
    def __rtruediv__(self, arg2: str) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: CharArray) -> Any: ...
    @overload
    def __sub__(self, arg2: str) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> CharArray: ...
    @overload
    def __sub__(self, arg2: list) -> CharArray: ...
    @overload
    def __truediv__(self, arg2: CharArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: str) -> Any: ...

class DoubleArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: DoubleArray) -> Any: ...
    @overload
    def __add__(self, arg2: float) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> DoubleArray: ...
    @overload
    def __add__(self, arg2: list) -> DoubleArray: ...
    @overload
    def __div__(self, arg2: tuple) -> DoubleArray: ...
    @overload
    def __div__(self, arg2: list) -> DoubleArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: DoubleArray) -> Any: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> DoubleArray: ...
    @overload
    def __mul__(self, arg2: list) -> DoubleArray: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: float) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> DoubleArray: ...
    @overload
    def __radd__(self, arg2: list) -> DoubleArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> DoubleArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> DoubleArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> DoubleArray: ...
    @overload
    def __rmul__(self, arg2: list) -> DoubleArray: ...
    @overload
    def __rsub__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> DoubleArray: ...
    @overload
    def __rsub__(self, arg2: list) -> DoubleArray: ...
    def __rtruediv__(self, arg2: float) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: DoubleArray) -> Any: ...
    @overload
    def __sub__(self, arg2: float) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> DoubleArray: ...
    @overload
    def __sub__(self, arg2: list) -> DoubleArray: ...
    @overload
    def __truediv__(self, arg2: DoubleArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: float) -> Any: ...

class DualQuatdArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: DualQuatdArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.DualQuatd) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> DualQuatdArray: ...
    @overload
    def __add__(self, arg2: list) -> DualQuatdArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: DualQuatdArray) -> Any: ...
    @overload
    def __mul__(self, arg2: pxr.Gf.DualQuatd) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> DualQuatdArray: ...
    @overload
    def __mul__(self, arg2: list) -> DualQuatdArray: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.DualQuatd) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> DualQuatdArray: ...
    @overload
    def __radd__(self, arg2: list) -> DualQuatdArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: pxr.Gf.DualQuatd) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> DualQuatdArray: ...
    @overload
    def __rmul__(self, arg2: list) -> DualQuatdArray: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.DualQuatd) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> DualQuatdArray: ...
    @overload
    def __rsub__(self, arg2: list) -> DualQuatdArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: DualQuatdArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.DualQuatd) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> DualQuatdArray: ...
    @overload
    def __sub__(self, arg2: list) -> DualQuatdArray: ...
    def __truediv__(self, arg2: float) -> Any: ...

class DualQuatfArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: DualQuatfArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.DualQuatf) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> DualQuatfArray: ...
    @overload
    def __add__(self, arg2: list) -> DualQuatfArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: DualQuatfArray) -> Any: ...
    @overload
    def __mul__(self, arg2: pxr.Gf.DualQuatf) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> DualQuatfArray: ...
    @overload
    def __mul__(self, arg2: list) -> DualQuatfArray: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.DualQuatf) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> DualQuatfArray: ...
    @overload
    def __radd__(self, arg2: list) -> DualQuatfArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: pxr.Gf.DualQuatf) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> DualQuatfArray: ...
    @overload
    def __rmul__(self, arg2: list) -> DualQuatfArray: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.DualQuatf) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> DualQuatfArray: ...
    @overload
    def __rsub__(self, arg2: list) -> DualQuatfArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: DualQuatfArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.DualQuatf) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> DualQuatfArray: ...
    @overload
    def __sub__(self, arg2: list) -> DualQuatfArray: ...
    def __truediv__(self, arg2: float) -> Any: ...

class DualQuathArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: DualQuathArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.DualQuath) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> DualQuathArray: ...
    @overload
    def __add__(self, arg2: list) -> DualQuathArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: DualQuathArray) -> Any: ...
    @overload
    def __mul__(self, arg2: pxr.Gf.DualQuath) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> DualQuathArray: ...
    @overload
    def __mul__(self, arg2: list) -> DualQuathArray: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.DualQuath) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> DualQuathArray: ...
    @overload
    def __radd__(self, arg2: list) -> DualQuathArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: pxr.Gf.DualQuath) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> DualQuathArray: ...
    @overload
    def __rmul__(self, arg2: list) -> DualQuathArray: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.DualQuath) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> DualQuathArray: ...
    @overload
    def __rsub__(self, arg2: list) -> DualQuathArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: DualQuathArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.DualQuath) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> DualQuathArray: ...
    @overload
    def __sub__(self, arg2: list) -> DualQuathArray: ...
    def __truediv__(self, arg2: float) -> Any: ...

class FloatArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: FloatArray) -> Any: ...
    @overload
    def __add__(self, arg2: float) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> FloatArray: ...
    @overload
    def __add__(self, arg2: list) -> FloatArray: ...
    @overload
    def __div__(self, arg2: tuple) -> FloatArray: ...
    @overload
    def __div__(self, arg2: list) -> FloatArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: FloatArray) -> Any: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> FloatArray: ...
    @overload
    def __mul__(self, arg2: list) -> FloatArray: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: float) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> FloatArray: ...
    @overload
    def __radd__(self, arg2: list) -> FloatArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> FloatArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> FloatArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> FloatArray: ...
    @overload
    def __rmul__(self, arg2: list) -> FloatArray: ...
    @overload
    def __rsub__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> FloatArray: ...
    @overload
    def __rsub__(self, arg2: list) -> FloatArray: ...
    def __rtruediv__(self, arg2: float) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: FloatArray) -> Any: ...
    @overload
    def __sub__(self, arg2: float) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> FloatArray: ...
    @overload
    def __sub__(self, arg2: list) -> FloatArray: ...
    @overload
    def __truediv__(self, arg2: FloatArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: float) -> Any: ...

class HalfArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: HalfArray) -> Any: ...
    @overload
    def __add__(self, arg2: object) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> HalfArray: ...
    @overload
    def __add__(self, arg2: list) -> HalfArray: ...
    @overload
    def __div__(self, arg2: tuple) -> HalfArray: ...
    @overload
    def __div__(self, arg2: list) -> HalfArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: HalfArray) -> Any: ...
    @overload
    def __mul__(self, arg2: object) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> HalfArray: ...
    @overload
    def __mul__(self, arg2: list) -> HalfArray: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: object) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> HalfArray: ...
    @overload
    def __radd__(self, arg2: list) -> HalfArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> HalfArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> HalfArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: object) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> HalfArray: ...
    @overload
    def __rmul__(self, arg2: list) -> HalfArray: ...
    @overload
    def __rsub__(self, arg2: object) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> HalfArray: ...
    @overload
    def __rsub__(self, arg2: list) -> HalfArray: ...
    def __rtruediv__(self, arg2: object) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: HalfArray) -> Any: ...
    @overload
    def __sub__(self, arg2: object) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> HalfArray: ...
    @overload
    def __sub__(self, arg2: list) -> HalfArray: ...
    @overload
    def __truediv__(self, arg2: HalfArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: object) -> Any: ...

class Int64Array(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Int64Array) -> Any: ...
    @overload
    def __add__(self, arg2: int) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Int64Array: ...
    @overload
    def __add__(self, arg2: list) -> Int64Array: ...
    @overload
    def __div__(self, arg2: tuple) -> Int64Array: ...
    @overload
    def __div__(self, arg2: list) -> Int64Array: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mod__(self, arg2: Int64Array) -> Any: ...
    @overload
    def __mod__(self, arg2: int) -> Any: ...
    @overload
    def __mod__(self, arg2: tuple) -> Int64Array: ...
    @overload
    def __mod__(self, arg2: list) -> Int64Array: ...
    @overload
    def __mul__(self, arg2: Int64Array) -> Any: ...
    @overload
    def __mul__(self, arg2: int) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> Int64Array: ...
    @overload
    def __mul__(self, arg2: list) -> Int64Array: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: int) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Int64Array: ...
    @overload
    def __radd__(self, arg2: list) -> Int64Array: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> Int64Array: ...
    @overload
    def __rdiv__(self, arg2: list) -> Int64Array: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmod__(self, arg2: int) -> Any: ...
    @overload
    def __rmod__(self, arg2: tuple) -> Int64Array: ...
    @overload
    def __rmod__(self, arg2: list) -> Int64Array: ...
    @overload
    def __rmul__(self, arg2: int) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> Int64Array: ...
    @overload
    def __rmul__(self, arg2: list) -> Int64Array: ...
    @overload
    def __rsub__(self, arg2: int) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Int64Array: ...
    @overload
    def __rsub__(self, arg2: list) -> Int64Array: ...
    def __rtruediv__(self, arg2: int) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Int64Array) -> Any: ...
    @overload
    def __sub__(self, arg2: int) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Int64Array: ...
    @overload
    def __sub__(self, arg2: list) -> Int64Array: ...
    @overload
    def __truediv__(self, arg2: Int64Array) -> Any: ...
    @overload
    def __truediv__(self, arg2: int) -> Any: ...

class IntArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: IntArray) -> Any: ...
    @overload
    def __add__(self, arg2: int) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> IntArray: ...
    @overload
    def __add__(self, arg2: list) -> IntArray: ...
    @overload
    def __div__(self, arg2: tuple) -> IntArray: ...
    @overload
    def __div__(self, arg2: list) -> IntArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mod__(self, arg2: IntArray) -> Any: ...
    @overload
    def __mod__(self, arg2: int) -> Any: ...
    @overload
    def __mod__(self, arg2: tuple) -> IntArray: ...
    @overload
    def __mod__(self, arg2: list) -> IntArray: ...
    @overload
    def __mul__(self, arg2: IntArray) -> Any: ...
    @overload
    def __mul__(self, arg2: int) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> IntArray: ...
    @overload
    def __mul__(self, arg2: list) -> IntArray: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: int) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> IntArray: ...
    @overload
    def __radd__(self, arg2: list) -> IntArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> IntArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> IntArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmod__(self, arg2: int) -> Any: ...
    @overload
    def __rmod__(self, arg2: tuple) -> IntArray: ...
    @overload
    def __rmod__(self, arg2: list) -> IntArray: ...
    @overload
    def __rmul__(self, arg2: int) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> IntArray: ...
    @overload
    def __rmul__(self, arg2: list) -> IntArray: ...
    @overload
    def __rsub__(self, arg2: int) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> IntArray: ...
    @overload
    def __rsub__(self, arg2: list) -> IntArray: ...
    def __rtruediv__(self, arg2: int) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: IntArray) -> Any: ...
    @overload
    def __sub__(self, arg2: int) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> IntArray: ...
    @overload
    def __sub__(self, arg2: list) -> IntArray: ...
    @overload
    def __truediv__(self, arg2: IntArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: int) -> Any: ...

class IntervalArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    @overload
    def __add__(self, arg2: IntervalArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Interval) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> IntervalArray: ...
    @overload
    def __add__(self, arg2: list) -> IntervalArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Interval) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> IntervalArray: ...
    @overload
    def __radd__(self, arg2: list) -> IntervalArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...

class Matrix2dArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Matrix2dArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Matrix2d) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Matrix2dArray: ...
    @overload
    def __add__(self, arg2: list) -> Matrix2dArray: ...
    @overload
    def __div__(self, arg2: tuple) -> Matrix2dArray: ...
    @overload
    def __div__(self, arg2: list) -> Matrix2dArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: Matrix2dArray) -> Any: ...
    @overload
    def __mul__(self, arg2: pxr.Gf.Matrix2d) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> Matrix2dArray: ...
    @overload
    def __mul__(self, arg2: list) -> Matrix2dArray: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Matrix2d) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Matrix2dArray: ...
    @overload
    def __radd__(self, arg2: list) -> Matrix2dArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> Matrix2dArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> Matrix2dArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: pxr.Gf.Matrix2d) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> Matrix2dArray: ...
    @overload
    def __rmul__(self, arg2: list) -> Matrix2dArray: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Matrix2d) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Matrix2dArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Matrix2dArray: ...
    def __rtruediv__(self, arg2: pxr.Gf.Matrix2d) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Matrix2dArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Matrix2d) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Matrix2dArray: ...
    @overload
    def __sub__(self, arg2: list) -> Matrix2dArray: ...
    @overload
    def __truediv__(self, arg2: Matrix2dArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: pxr.Gf.Matrix2d) -> Any: ...

class Matrix2fArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Matrix2fArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Matrix2f) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Matrix2fArray: ...
    @overload
    def __add__(self, arg2: list) -> Matrix2fArray: ...
    @overload
    def __div__(self, arg2: tuple) -> Matrix2fArray: ...
    @overload
    def __div__(self, arg2: list) -> Matrix2fArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: Matrix2fArray) -> Any: ...
    @overload
    def __mul__(self, arg2: pxr.Gf.Matrix2f) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> Matrix2fArray: ...
    @overload
    def __mul__(self, arg2: list) -> Matrix2fArray: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Matrix2f) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Matrix2fArray: ...
    @overload
    def __radd__(self, arg2: list) -> Matrix2fArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> Matrix2fArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> Matrix2fArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: pxr.Gf.Matrix2f) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> Matrix2fArray: ...
    @overload
    def __rmul__(self, arg2: list) -> Matrix2fArray: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Matrix2f) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Matrix2fArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Matrix2fArray: ...
    def __rtruediv__(self, arg2: pxr.Gf.Matrix2f) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Matrix2fArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Matrix2f) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Matrix2fArray: ...
    @overload
    def __sub__(self, arg2: list) -> Matrix2fArray: ...
    @overload
    def __truediv__(self, arg2: Matrix2fArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: pxr.Gf.Matrix2f) -> Any: ...

class Matrix3dArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Matrix3dArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Matrix3d) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Matrix3dArray: ...
    @overload
    def __add__(self, arg2: list) -> Matrix3dArray: ...
    @overload
    def __div__(self, arg2: tuple) -> Matrix3dArray: ...
    @overload
    def __div__(self, arg2: list) -> Matrix3dArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: Matrix3dArray) -> Any: ...
    @overload
    def __mul__(self, arg2: pxr.Gf.Matrix3d) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> Matrix3dArray: ...
    @overload
    def __mul__(self, arg2: list) -> Matrix3dArray: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Matrix3d) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Matrix3dArray: ...
    @overload
    def __radd__(self, arg2: list) -> Matrix3dArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> Matrix3dArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> Matrix3dArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: pxr.Gf.Matrix3d) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> Matrix3dArray: ...
    @overload
    def __rmul__(self, arg2: list) -> Matrix3dArray: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Matrix3d) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Matrix3dArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Matrix3dArray: ...
    def __rtruediv__(self, arg2: pxr.Gf.Matrix3d) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Matrix3dArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Matrix3d) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Matrix3dArray: ...
    @overload
    def __sub__(self, arg2: list) -> Matrix3dArray: ...
    @overload
    def __truediv__(self, arg2: Matrix3dArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: pxr.Gf.Matrix3d) -> Any: ...

class Matrix3fArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Matrix3fArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Matrix3f) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Matrix3fArray: ...
    @overload
    def __add__(self, arg2: list) -> Matrix3fArray: ...
    @overload
    def __div__(self, arg2: tuple) -> Matrix3fArray: ...
    @overload
    def __div__(self, arg2: list) -> Matrix3fArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: Matrix3fArray) -> Any: ...
    @overload
    def __mul__(self, arg2: pxr.Gf.Matrix3f) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> Matrix3fArray: ...
    @overload
    def __mul__(self, arg2: list) -> Matrix3fArray: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Matrix3f) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Matrix3fArray: ...
    @overload
    def __radd__(self, arg2: list) -> Matrix3fArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> Matrix3fArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> Matrix3fArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: pxr.Gf.Matrix3f) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> Matrix3fArray: ...
    @overload
    def __rmul__(self, arg2: list) -> Matrix3fArray: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Matrix3f) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Matrix3fArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Matrix3fArray: ...
    def __rtruediv__(self, arg2: pxr.Gf.Matrix3f) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Matrix3fArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Matrix3f) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Matrix3fArray: ...
    @overload
    def __sub__(self, arg2: list) -> Matrix3fArray: ...
    @overload
    def __truediv__(self, arg2: Matrix3fArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: pxr.Gf.Matrix3f) -> Any: ...

class Matrix4dArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Matrix4dArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Matrix4d) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Matrix4dArray: ...
    @overload
    def __add__(self, arg2: list) -> Matrix4dArray: ...
    @overload
    def __div__(self, arg2: tuple) -> Matrix4dArray: ...
    @overload
    def __div__(self, arg2: list) -> Matrix4dArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: Matrix4dArray) -> Any: ...
    @overload
    def __mul__(self, arg2: pxr.Gf.Matrix4d) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> Matrix4dArray: ...
    @overload
    def __mul__(self, arg2: list) -> Matrix4dArray: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Matrix4d) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Matrix4dArray: ...
    @overload
    def __radd__(self, arg2: list) -> Matrix4dArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> Matrix4dArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> Matrix4dArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: pxr.Gf.Matrix4d) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> Matrix4dArray: ...
    @overload
    def __rmul__(self, arg2: list) -> Matrix4dArray: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Matrix4d) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Matrix4dArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Matrix4dArray: ...
    def __rtruediv__(self, arg2: pxr.Gf.Matrix4d) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Matrix4dArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Matrix4d) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Matrix4dArray: ...
    @overload
    def __sub__(self, arg2: list) -> Matrix4dArray: ...
    @overload
    def __truediv__(self, arg2: Matrix4dArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: pxr.Gf.Matrix4d) -> Any: ...

class Matrix4fArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Matrix4fArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Matrix4f) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Matrix4fArray: ...
    @overload
    def __add__(self, arg2: list) -> Matrix4fArray: ...
    @overload
    def __div__(self, arg2: tuple) -> Matrix4fArray: ...
    @overload
    def __div__(self, arg2: list) -> Matrix4fArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: Matrix4fArray) -> Any: ...
    @overload
    def __mul__(self, arg2: pxr.Gf.Matrix4f) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> Matrix4fArray: ...
    @overload
    def __mul__(self, arg2: list) -> Matrix4fArray: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Matrix4f) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Matrix4fArray: ...
    @overload
    def __radd__(self, arg2: list) -> Matrix4fArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> Matrix4fArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> Matrix4fArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: pxr.Gf.Matrix4f) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> Matrix4fArray: ...
    @overload
    def __rmul__(self, arg2: list) -> Matrix4fArray: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Matrix4f) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Matrix4fArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Matrix4fArray: ...
    def __rtruediv__(self, arg2: pxr.Gf.Matrix4f) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Matrix4fArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Matrix4f) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Matrix4fArray: ...
    @overload
    def __sub__(self, arg2: list) -> Matrix4fArray: ...
    @overload
    def __truediv__(self, arg2: Matrix4fArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: pxr.Gf.Matrix4f) -> Any: ...

class QuatdArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: QuatdArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Quatd) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> QuatdArray: ...
    @overload
    def __add__(self, arg2: list) -> QuatdArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: QuatdArray) -> Any: ...
    @overload
    def __mul__(self, arg2: pxr.Gf.Quatd) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> QuatdArray: ...
    @overload
    def __mul__(self, arg2: list) -> QuatdArray: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Quatd) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> QuatdArray: ...
    @overload
    def __radd__(self, arg2: list) -> QuatdArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: pxr.Gf.Quatd) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> QuatdArray: ...
    @overload
    def __rmul__(self, arg2: list) -> QuatdArray: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Quatd) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> QuatdArray: ...
    @overload
    def __rsub__(self, arg2: list) -> QuatdArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: QuatdArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Quatd) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> QuatdArray: ...
    @overload
    def __sub__(self, arg2: list) -> QuatdArray: ...
    def __truediv__(self, arg2: float) -> Any: ...

class QuaternionArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    @overload
    def __add__(self, arg2: QuaternionArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Quaternion) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> QuaternionArray: ...
    @overload
    def __add__(self, arg2: list) -> QuaternionArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: QuaternionArray) -> Any: ...
    @overload
    def __mul__(self, arg2: pxr.Gf.Quaternion) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> QuaternionArray: ...
    @overload
    def __mul__(self, arg2: list) -> QuaternionArray: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Quaternion) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> QuaternionArray: ...
    @overload
    def __radd__(self, arg2: list) -> QuaternionArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: pxr.Gf.Quaternion) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> QuaternionArray: ...
    @overload
    def __rmul__(self, arg2: list) -> QuaternionArray: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Quaternion) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> QuaternionArray: ...
    @overload
    def __rsub__(self, arg2: list) -> QuaternionArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: QuaternionArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Quaternion) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> QuaternionArray: ...
    @overload
    def __sub__(self, arg2: list) -> QuaternionArray: ...
    def __truediv__(self, arg2: float) -> Any: ...

class QuatfArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: QuatfArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Quatf) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> QuatfArray: ...
    @overload
    def __add__(self, arg2: list) -> QuatfArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: QuatfArray) -> Any: ...
    @overload
    def __mul__(self, arg2: pxr.Gf.Quatf) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> QuatfArray: ...
    @overload
    def __mul__(self, arg2: list) -> QuatfArray: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Quatf) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> QuatfArray: ...
    @overload
    def __radd__(self, arg2: list) -> QuatfArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: pxr.Gf.Quatf) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> QuatfArray: ...
    @overload
    def __rmul__(self, arg2: list) -> QuatfArray: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Quatf) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> QuatfArray: ...
    @overload
    def __rsub__(self, arg2: list) -> QuatfArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: QuatfArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Quatf) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> QuatfArray: ...
    @overload
    def __sub__(self, arg2: list) -> QuatfArray: ...
    def __truediv__(self, arg2: float) -> Any: ...

class QuathArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: QuathArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Quath) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> QuathArray: ...
    @overload
    def __add__(self, arg2: list) -> QuathArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mul__(self, arg2: QuathArray) -> Any: ...
    @overload
    def __mul__(self, arg2: pxr.Gf.Quath) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> QuathArray: ...
    @overload
    def __mul__(self, arg2: list) -> QuathArray: ...
    @overload
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Quath) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> QuathArray: ...
    @overload
    def __radd__(self, arg2: list) -> QuathArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmul__(self, arg2: pxr.Gf.Quath) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> QuathArray: ...
    @overload
    def __rmul__(self, arg2: list) -> QuathArray: ...
    @overload
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Quath) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> QuathArray: ...
    @overload
    def __rsub__(self, arg2: list) -> QuathArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: QuathArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Quath) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> QuathArray: ...
    @overload
    def __sub__(self, arg2: list) -> QuathArray: ...
    def __truediv__(self, arg2: float) -> Any: ...

class Range1dArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Range1dArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Range1d) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Range1dArray: ...
    @overload
    def __add__(self, arg2: list) -> Range1dArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Range1d) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Range1dArray: ...
    @overload
    def __radd__(self, arg2: list) -> Range1dArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...

class Range1fArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Range1fArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Range1f) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Range1fArray: ...
    @overload
    def __add__(self, arg2: list) -> Range1fArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Range1f) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Range1fArray: ...
    @overload
    def __radd__(self, arg2: list) -> Range1fArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...

class Range2dArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Range2dArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Range2d) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Range2dArray: ...
    @overload
    def __add__(self, arg2: list) -> Range2dArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Range2d) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Range2dArray: ...
    @overload
    def __radd__(self, arg2: list) -> Range2dArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...

class Range2fArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Range2fArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Range2f) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Range2fArray: ...
    @overload
    def __add__(self, arg2: list) -> Range2fArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Range2f) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Range2fArray: ...
    @overload
    def __radd__(self, arg2: list) -> Range2fArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...

class Range3dArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Range3dArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Range3d) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Range3dArray: ...
    @overload
    def __add__(self, arg2: list) -> Range3dArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Range3d) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Range3dArray: ...
    @overload
    def __radd__(self, arg2: list) -> Range3dArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...

class Range3fArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Range3fArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Range3f) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Range3fArray: ...
    @overload
    def __add__(self, arg2: list) -> Range3fArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Range3f) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Range3fArray: ...
    @overload
    def __radd__(self, arg2: list) -> Range3fArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...

class Rect2iArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Rect2iArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Rect2i) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Rect2iArray: ...
    @overload
    def __add__(self, arg2: list) -> Rect2iArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Rect2i) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Rect2iArray: ...
    @overload
    def __radd__(self, arg2: list) -> Rect2iArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...

class ShortArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: ShortArray) -> Any: ...
    @overload
    def __add__(self, arg2: int) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> ShortArray: ...
    @overload
    def __add__(self, arg2: list) -> ShortArray: ...
    @overload
    def __div__(self, arg2: tuple) -> ShortArray: ...
    @overload
    def __div__(self, arg2: list) -> ShortArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mod__(self, arg2: ShortArray) -> Any: ...
    @overload
    def __mod__(self, arg2: int) -> Any: ...
    @overload
    def __mod__(self, arg2: tuple) -> ShortArray: ...
    @overload
    def __mod__(self, arg2: list) -> ShortArray: ...
    @overload
    def __mul__(self, arg2: ShortArray) -> Any: ...
    @overload
    def __mul__(self, arg2: int) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> ShortArray: ...
    @overload
    def __mul__(self, arg2: list) -> ShortArray: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: int) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> ShortArray: ...
    @overload
    def __radd__(self, arg2: list) -> ShortArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> ShortArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> ShortArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmod__(self, arg2: int) -> Any: ...
    @overload
    def __rmod__(self, arg2: tuple) -> ShortArray: ...
    @overload
    def __rmod__(self, arg2: list) -> ShortArray: ...
    @overload
    def __rmul__(self, arg2: int) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> ShortArray: ...
    @overload
    def __rmul__(self, arg2: list) -> ShortArray: ...
    @overload
    def __rsub__(self, arg2: int) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> ShortArray: ...
    @overload
    def __rsub__(self, arg2: list) -> ShortArray: ...
    def __rtruediv__(self, arg2: int) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: ShortArray) -> Any: ...
    @overload
    def __sub__(self, arg2: int) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> ShortArray: ...
    @overload
    def __sub__(self, arg2: list) -> ShortArray: ...
    @overload
    def __truediv__(self, arg2: ShortArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: int) -> Any: ...

class StringArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    @overload
    def __add__(self, arg2: StringArray) -> Any: ...
    @overload
    def __add__(self, arg2: str) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> StringArray: ...
    @overload
    def __add__(self, arg2: list) -> StringArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @overload
    def __radd__(self, arg2: str) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> StringArray: ...
    @overload
    def __radd__(self, arg2: list) -> StringArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...

class TokenArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...

class UCharArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: UCharArray) -> Any: ...
    @overload
    def __add__(self, arg2: int) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> UCharArray: ...
    @overload
    def __add__(self, arg2: list) -> UCharArray: ...
    @overload
    def __div__(self, arg2: tuple) -> UCharArray: ...
    @overload
    def __div__(self, arg2: list) -> UCharArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mod__(self, arg2: UCharArray) -> Any: ...
    @overload
    def __mod__(self, arg2: int) -> Any: ...
    @overload
    def __mod__(self, arg2: tuple) -> UCharArray: ...
    @overload
    def __mod__(self, arg2: list) -> UCharArray: ...
    @overload
    def __mul__(self, arg2: UCharArray) -> Any: ...
    @overload
    def __mul__(self, arg2: int) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> UCharArray: ...
    @overload
    def __mul__(self, arg2: list) -> UCharArray: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: int) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> UCharArray: ...
    @overload
    def __radd__(self, arg2: list) -> UCharArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> UCharArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> UCharArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmod__(self, arg2: int) -> Any: ...
    @overload
    def __rmod__(self, arg2: tuple) -> UCharArray: ...
    @overload
    def __rmod__(self, arg2: list) -> UCharArray: ...
    @overload
    def __rmul__(self, arg2: int) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> UCharArray: ...
    @overload
    def __rmul__(self, arg2: list) -> UCharArray: ...
    @overload
    def __rsub__(self, arg2: int) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> UCharArray: ...
    @overload
    def __rsub__(self, arg2: list) -> UCharArray: ...
    def __rtruediv__(self, arg2: int) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: UCharArray) -> Any: ...
    @overload
    def __sub__(self, arg2: int) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> UCharArray: ...
    @overload
    def __sub__(self, arg2: list) -> UCharArray: ...
    @overload
    def __truediv__(self, arg2: UCharArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: int) -> Any: ...

class UInt64Array(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: UInt64Array) -> Any: ...
    @overload
    def __add__(self, arg2: int) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> UInt64Array: ...
    @overload
    def __add__(self, arg2: list) -> UInt64Array: ...
    @overload
    def __div__(self, arg2: tuple) -> UInt64Array: ...
    @overload
    def __div__(self, arg2: list) -> UInt64Array: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mod__(self, arg2: UInt64Array) -> Any: ...
    @overload
    def __mod__(self, arg2: int) -> Any: ...
    @overload
    def __mod__(self, arg2: tuple) -> UInt64Array: ...
    @overload
    def __mod__(self, arg2: list) -> UInt64Array: ...
    @overload
    def __mul__(self, arg2: UInt64Array) -> Any: ...
    @overload
    def __mul__(self, arg2: int) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> UInt64Array: ...
    @overload
    def __mul__(self, arg2: list) -> UInt64Array: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: int) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> UInt64Array: ...
    @overload
    def __radd__(self, arg2: list) -> UInt64Array: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> UInt64Array: ...
    @overload
    def __rdiv__(self, arg2: list) -> UInt64Array: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmod__(self, arg2: int) -> Any: ...
    @overload
    def __rmod__(self, arg2: tuple) -> UInt64Array: ...
    @overload
    def __rmod__(self, arg2: list) -> UInt64Array: ...
    @overload
    def __rmul__(self, arg2: int) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> UInt64Array: ...
    @overload
    def __rmul__(self, arg2: list) -> UInt64Array: ...
    @overload
    def __rsub__(self, arg2: int) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> UInt64Array: ...
    @overload
    def __rsub__(self, arg2: list) -> UInt64Array: ...
    def __rtruediv__(self, arg2: int) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: UInt64Array) -> Any: ...
    @overload
    def __sub__(self, arg2: int) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> UInt64Array: ...
    @overload
    def __sub__(self, arg2: list) -> UInt64Array: ...
    @overload
    def __truediv__(self, arg2: UInt64Array) -> Any: ...
    @overload
    def __truediv__(self, arg2: int) -> Any: ...

class UIntArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: UIntArray) -> Any: ...
    @overload
    def __add__(self, arg2: int) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> UIntArray: ...
    @overload
    def __add__(self, arg2: list) -> UIntArray: ...
    @overload
    def __div__(self, arg2: tuple) -> UIntArray: ...
    @overload
    def __div__(self, arg2: list) -> UIntArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mod__(self, arg2: UIntArray) -> Any: ...
    @overload
    def __mod__(self, arg2: int) -> Any: ...
    @overload
    def __mod__(self, arg2: tuple) -> UIntArray: ...
    @overload
    def __mod__(self, arg2: list) -> UIntArray: ...
    @overload
    def __mul__(self, arg2: UIntArray) -> Any: ...
    @overload
    def __mul__(self, arg2: int) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> UIntArray: ...
    @overload
    def __mul__(self, arg2: list) -> UIntArray: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: int) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> UIntArray: ...
    @overload
    def __radd__(self, arg2: list) -> UIntArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> UIntArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> UIntArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmod__(self, arg2: int) -> Any: ...
    @overload
    def __rmod__(self, arg2: tuple) -> UIntArray: ...
    @overload
    def __rmod__(self, arg2: list) -> UIntArray: ...
    @overload
    def __rmul__(self, arg2: int) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> UIntArray: ...
    @overload
    def __rmul__(self, arg2: list) -> UIntArray: ...
    @overload
    def __rsub__(self, arg2: int) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> UIntArray: ...
    @overload
    def __rsub__(self, arg2: list) -> UIntArray: ...
    def __rtruediv__(self, arg2: int) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: UIntArray) -> Any: ...
    @overload
    def __sub__(self, arg2: int) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> UIntArray: ...
    @overload
    def __sub__(self, arg2: list) -> UIntArray: ...
    @overload
    def __truediv__(self, arg2: UIntArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: int) -> Any: ...

class UShortArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: UShortArray) -> Any: ...
    @overload
    def __add__(self, arg2: int) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> UShortArray: ...
    @overload
    def __add__(self, arg2: list) -> UShortArray: ...
    @overload
    def __div__(self, arg2: tuple) -> UShortArray: ...
    @overload
    def __div__(self, arg2: list) -> UShortArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    @overload
    def __mod__(self, arg2: UShortArray) -> Any: ...
    @overload
    def __mod__(self, arg2: int) -> Any: ...
    @overload
    def __mod__(self, arg2: tuple) -> UShortArray: ...
    @overload
    def __mod__(self, arg2: list) -> UShortArray: ...
    @overload
    def __mul__(self, arg2: UShortArray) -> Any: ...
    @overload
    def __mul__(self, arg2: int) -> Any: ...
    @overload
    def __mul__(self, arg2: tuple) -> UShortArray: ...
    @overload
    def __mul__(self, arg2: list) -> UShortArray: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: int) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> UShortArray: ...
    @overload
    def __radd__(self, arg2: list) -> UShortArray: ...
    @overload
    def __rdiv__(self, arg2: tuple) -> UShortArray: ...
    @overload
    def __rdiv__(self, arg2: list) -> UShortArray: ...
    def __reduce__(self) -> Any: ...
    @overload
    def __rmod__(self, arg2: int) -> Any: ...
    @overload
    def __rmod__(self, arg2: tuple) -> UShortArray: ...
    @overload
    def __rmod__(self, arg2: list) -> UShortArray: ...
    @overload
    def __rmul__(self, arg2: int) -> Any: ...
    @overload
    def __rmul__(self, arg2: tuple) -> UShortArray: ...
    @overload
    def __rmul__(self, arg2: list) -> UShortArray: ...
    @overload
    def __rsub__(self, arg2: int) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> UShortArray: ...
    @overload
    def __rsub__(self, arg2: list) -> UShortArray: ...
    def __rtruediv__(self, arg2: int) -> Any: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: UShortArray) -> Any: ...
    @overload
    def __sub__(self, arg2: int) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> UShortArray: ...
    @overload
    def __sub__(self, arg2: list) -> UShortArray: ...
    @overload
    def __truediv__(self, arg2: UShortArray) -> Any: ...
    @overload
    def __truediv__(self, arg2: int) -> Any: ...

class Vec2dArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Vec2dArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Vec2d) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Vec2dArray: ...
    @overload
    def __add__(self, arg2: list) -> Vec2dArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Vec2d) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Vec2dArray: ...
    @overload
    def __radd__(self, arg2: list) -> Vec2dArray: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Vec2d) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Vec2dArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Vec2dArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Vec2dArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Vec2d) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Vec2dArray: ...
    @overload
    def __sub__(self, arg2: list) -> Vec2dArray: ...

class Vec2fArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Vec2fArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Vec2f) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Vec2fArray: ...
    @overload
    def __add__(self, arg2: list) -> Vec2fArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Vec2f) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Vec2fArray: ...
    @overload
    def __radd__(self, arg2: list) -> Vec2fArray: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Vec2f) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Vec2fArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Vec2fArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Vec2fArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Vec2f) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Vec2fArray: ...
    @overload
    def __sub__(self, arg2: list) -> Vec2fArray: ...

class Vec2hArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Vec2hArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Vec2h) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Vec2hArray: ...
    @overload
    def __add__(self, arg2: list) -> Vec2hArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Vec2h) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Vec2hArray: ...
    @overload
    def __radd__(self, arg2: list) -> Vec2hArray: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Vec2h) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Vec2hArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Vec2hArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Vec2hArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Vec2h) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Vec2hArray: ...
    @overload
    def __sub__(self, arg2: list) -> Vec2hArray: ...

class Vec2iArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Vec2iArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Vec2i) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Vec2iArray: ...
    @overload
    def __add__(self, arg2: list) -> Vec2iArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Vec2i) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Vec2iArray: ...
    @overload
    def __radd__(self, arg2: list) -> Vec2iArray: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Vec2i) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Vec2iArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Vec2iArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Vec2iArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Vec2i) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Vec2iArray: ...
    @overload
    def __sub__(self, arg2: list) -> Vec2iArray: ...

class Vec3dArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Vec3dArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Vec3d) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Vec3dArray: ...
    @overload
    def __add__(self, arg2: list) -> Vec3dArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Vec3d) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Vec3dArray: ...
    @overload
    def __radd__(self, arg2: list) -> Vec3dArray: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Vec3d) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Vec3dArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Vec3dArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Vec3dArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Vec3d) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Vec3dArray: ...
    @overload
    def __sub__(self, arg2: list) -> Vec3dArray: ...

class Vec3fArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Vec3fArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Vec3f) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Vec3fArray: ...
    @overload
    def __add__(self, arg2: list) -> Vec3fArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Vec3f) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Vec3fArray: ...
    @overload
    def __radd__(self, arg2: list) -> Vec3fArray: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Vec3f) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Vec3fArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Vec3fArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Vec3fArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Vec3f) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Vec3fArray: ...
    @overload
    def __sub__(self, arg2: list) -> Vec3fArray: ...

class Vec3hArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Vec3hArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Vec3h) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Vec3hArray: ...
    @overload
    def __add__(self, arg2: list) -> Vec3hArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Vec3h) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Vec3hArray: ...
    @overload
    def __radd__(self, arg2: list) -> Vec3hArray: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Vec3h) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Vec3hArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Vec3hArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Vec3hArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Vec3h) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Vec3hArray: ...
    @overload
    def __sub__(self, arg2: list) -> Vec3hArray: ...

class Vec3iArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Vec3iArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Vec3i) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Vec3iArray: ...
    @overload
    def __add__(self, arg2: list) -> Vec3iArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Vec3i) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Vec3iArray: ...
    @overload
    def __radd__(self, arg2: list) -> Vec3iArray: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Vec3i) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Vec3iArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Vec3iArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Vec3iArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Vec3i) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Vec3iArray: ...
    @overload
    def __sub__(self, arg2: list) -> Vec3iArray: ...

class Vec4dArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Vec4dArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Vec4d) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Vec4dArray: ...
    @overload
    def __add__(self, arg2: list) -> Vec4dArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Vec4d) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Vec4dArray: ...
    @overload
    def __radd__(self, arg2: list) -> Vec4dArray: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Vec4d) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Vec4dArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Vec4dArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Vec4dArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Vec4d) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Vec4dArray: ...
    @overload
    def __sub__(self, arg2: list) -> Vec4dArray: ...

class Vec4fArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Vec4fArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Vec4f) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Vec4fArray: ...
    @overload
    def __add__(self, arg2: list) -> Vec4fArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Vec4f) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Vec4fArray: ...
    @overload
    def __radd__(self, arg2: list) -> Vec4fArray: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Vec4f) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Vec4fArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Vec4fArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Vec4fArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Vec4f) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Vec4fArray: ...
    @overload
    def __sub__(self, arg2: list) -> Vec4fArray: ...

class Vec4hArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Vec4hArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Vec4h) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Vec4hArray: ...
    @overload
    def __add__(self, arg2: list) -> Vec4hArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Vec4h) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Vec4hArray: ...
    @overload
    def __radd__(self, arg2: list) -> Vec4hArray: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Vec4h) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Vec4hArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Vec4hArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Vec4hArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Vec4h) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Vec4hArray: ...
    @overload
    def __sub__(self, arg2: list) -> Vec4hArray: ...

class Vec4iArray(Boost.Python.instance):
    _isVtArray: ClassVar[bool] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, values) -> None: ...
    @overload
    def __init__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    def FromBuffer(self, *args, **kwargs) -> Any: ...
    def FromNumpy(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg2: Vec4iArray) -> Any: ...
    @overload
    def __add__(self, arg2: pxr.Gf.Vec4i) -> Any: ...
    @overload
    def __add__(self, arg2: tuple) -> Vec4iArray: ...
    @overload
    def __add__(self, arg2: list) -> Vec4iArray: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: object) -> Any: ...
    @overload
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg2: float) -> Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Any: ...
    @overload
    def __radd__(self, arg2: pxr.Gf.Vec4i) -> Any: ...
    @overload
    def __radd__(self, arg2: tuple) -> Vec4iArray: ...
    @overload
    def __radd__(self, arg2: list) -> Vec4iArray: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, arg2: float) -> Any: ...
    @overload
    def __rsub__(self, arg2: pxr.Gf.Vec4i) -> Any: ...
    @overload
    def __rsub__(self, arg2: tuple) -> Vec4iArray: ...
    @overload
    def __rsub__(self, arg2: list) -> Vec4iArray: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __setitem__(self, arg2: int, arg3: object) -> None: ...
    @overload
    def __sub__(self, arg2: Vec4iArray) -> Any: ...
    @overload
    def __sub__(self, arg2: pxr.Gf.Vec4i) -> Any: ...
    @overload
    def __sub__(self, arg2: tuple) -> Vec4iArray: ...
    @overload
    def __sub__(self, arg2: list) -> Vec4iArray: ...

class _ValueWrapper(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

@overload
def AllTrue(arg1: DoubleArray) -> bool: ...
@overload
def AllTrue(arg1: FloatArray) -> bool: ...
@overload
def AllTrue(arg1: HalfArray) -> bool: ...
@overload
def AllTrue(arg1: BoolArray) -> bool: ...
@overload
def AllTrue(arg1: CharArray) -> bool: ...
@overload
def AllTrue(arg1: UCharArray) -> bool: ...
@overload
def AllTrue(arg1: ShortArray) -> bool: ...
@overload
def AllTrue(arg1: UShortArray) -> bool: ...
@overload
def AllTrue(arg1: IntArray) -> bool: ...
@overload
def AllTrue(arg1: UIntArray) -> bool: ...
@overload
def AllTrue(arg1: Int64Array) -> bool: ...
@overload
def AllTrue(arg1: UInt64Array) -> bool: ...
@overload
def AllTrue(arg1: StringArray) -> bool: ...
@overload
def AllTrue(arg1: TokenArray) -> bool: ...
@overload
def AnyTrue(arg1: DoubleArray) -> bool: ...
@overload
def AnyTrue(arg1: FloatArray) -> bool: ...
@overload
def AnyTrue(arg1: HalfArray) -> bool: ...
@overload
def AnyTrue(arg1: BoolArray) -> bool: ...
@overload
def AnyTrue(arg1: CharArray) -> bool: ...
@overload
def AnyTrue(arg1: UCharArray) -> bool: ...
@overload
def AnyTrue(arg1: ShortArray) -> bool: ...
@overload
def AnyTrue(arg1: UShortArray) -> bool: ...
@overload
def AnyTrue(arg1: IntArray) -> bool: ...
@overload
def AnyTrue(arg1: UIntArray) -> bool: ...
@overload
def AnyTrue(arg1: Int64Array) -> bool: ...
@overload
def AnyTrue(arg1: UInt64Array) -> bool: ...
@overload
def AnyTrue(arg1: StringArray) -> bool: ...
@overload
def AnyTrue(arg1: TokenArray) -> bool: ...
def Bool(value) -> _ValueWrapper: ...
def BoolArrayFromBuffer(arg1: object) -> Any: ...
@overload
def Cat(arg1: DualQuathArray) -> DualQuathArray: ...
@overload
def Cat(arg1: DualQuathArray, arg2: DualQuathArray) -> DualQuathArray: ...
@overload
def Cat(arg1: DualQuathArray, arg2: DualQuathArray, arg3: DualQuathArray) -> DualQuathArray: ...
@overload
def Cat(arg1: DualQuathArray, arg2: DualQuathArray, arg3: DualQuathArray, arg4: DualQuathArray) -> DualQuathArray: ...
@overload
def Cat(arg1: DualQuathArray, arg2: DualQuathArray, arg3: DualQuathArray, arg4: DualQuathArray, arg5: DualQuathArray) -> DualQuathArray: ...
@overload
def Cat(arg1: DualQuatfArray) -> DualQuatfArray: ...
@overload
def Cat(arg1: DualQuatfArray, arg2: DualQuatfArray) -> DualQuatfArray: ...
@overload
def Cat(arg1: DualQuatfArray, arg2: DualQuatfArray, arg3: DualQuatfArray) -> DualQuatfArray: ...
@overload
def Cat(arg1: DualQuatfArray, arg2: DualQuatfArray, arg3: DualQuatfArray, arg4: DualQuatfArray) -> DualQuatfArray: ...
@overload
def Cat(arg1: DualQuatfArray, arg2: DualQuatfArray, arg3: DualQuatfArray, arg4: DualQuatfArray, arg5: DualQuatfArray) -> DualQuatfArray: ...
@overload
def Cat(arg1: DualQuatdArray) -> DualQuatdArray: ...
@overload
def Cat(arg1: DualQuatdArray, arg2: DualQuatdArray) -> DualQuatdArray: ...
@overload
def Cat(arg1: DualQuatdArray, arg2: DualQuatdArray, arg3: DualQuatdArray) -> DualQuatdArray: ...
@overload
def Cat(arg1: DualQuatdArray, arg2: DualQuatdArray, arg3: DualQuatdArray, arg4: DualQuatdArray) -> DualQuatdArray: ...
@overload
def Cat(arg1: DualQuatdArray, arg2: DualQuatdArray, arg3: DualQuatdArray, arg4: DualQuatdArray, arg5: DualQuatdArray) -> DualQuatdArray: ...
@overload
def Cat(arg1: DoubleArray) -> DoubleArray: ...
@overload
def Cat(arg1: DoubleArray, arg2: DoubleArray) -> DoubleArray: ...
@overload
def Cat(arg1: DoubleArray, arg2: DoubleArray, arg3: DoubleArray) -> DoubleArray: ...
@overload
def Cat(arg1: DoubleArray, arg2: DoubleArray, arg3: DoubleArray, arg4: DoubleArray) -> DoubleArray: ...
@overload
def Cat(arg1: DoubleArray, arg2: DoubleArray, arg3: DoubleArray, arg4: DoubleArray, arg5: DoubleArray) -> DoubleArray: ...
@overload
def Cat(arg1: FloatArray) -> FloatArray: ...
@overload
def Cat(arg1: FloatArray, arg2: FloatArray) -> FloatArray: ...
@overload
def Cat(arg1: FloatArray, arg2: FloatArray, arg3: FloatArray) -> FloatArray: ...
@overload
def Cat(arg1: FloatArray, arg2: FloatArray, arg3: FloatArray, arg4: FloatArray) -> FloatArray: ...
@overload
def Cat(arg1: FloatArray, arg2: FloatArray, arg3: FloatArray, arg4: FloatArray, arg5: FloatArray) -> FloatArray: ...
@overload
def Cat(arg1: HalfArray) -> HalfArray: ...
@overload
def Cat(arg1: HalfArray, arg2: HalfArray) -> HalfArray: ...
@overload
def Cat(arg1: HalfArray, arg2: HalfArray, arg3: HalfArray) -> HalfArray: ...
@overload
def Cat(arg1: HalfArray, arg2: HalfArray, arg3: HalfArray, arg4: HalfArray) -> HalfArray: ...
@overload
def Cat(arg1: HalfArray, arg2: HalfArray, arg3: HalfArray, arg4: HalfArray, arg5: HalfArray) -> HalfArray: ...
@overload
def Cat(arg1: BoolArray) -> BoolArray: ...
@overload
def Cat(arg1: BoolArray, arg2: BoolArray) -> BoolArray: ...
@overload
def Cat(arg1: BoolArray, arg2: BoolArray, arg3: BoolArray) -> BoolArray: ...
@overload
def Cat(arg1: BoolArray, arg2: BoolArray, arg3: BoolArray, arg4: BoolArray) -> BoolArray: ...
@overload
def Cat(arg1: BoolArray, arg2: BoolArray, arg3: BoolArray, arg4: BoolArray, arg5: BoolArray) -> BoolArray: ...
@overload
def Cat(arg1: CharArray) -> CharArray: ...
@overload
def Cat(arg1: CharArray, arg2: CharArray) -> CharArray: ...
@overload
def Cat(arg1: CharArray, arg2: CharArray, arg3: CharArray) -> CharArray: ...
@overload
def Cat(arg1: CharArray, arg2: CharArray, arg3: CharArray, arg4: CharArray) -> CharArray: ...
@overload
def Cat(arg1: CharArray, arg2: CharArray, arg3: CharArray, arg4: CharArray, arg5: CharArray) -> CharArray: ...
@overload
def Cat(arg1: UCharArray) -> UCharArray: ...
@overload
def Cat(arg1: UCharArray, arg2: UCharArray) -> UCharArray: ...
@overload
def Cat(arg1: UCharArray, arg2: UCharArray, arg3: UCharArray) -> UCharArray: ...
@overload
def Cat(arg1: UCharArray, arg2: UCharArray, arg3: UCharArray, arg4: UCharArray) -> UCharArray: ...
@overload
def Cat(arg1: UCharArray, arg2: UCharArray, arg3: UCharArray, arg4: UCharArray, arg5: UCharArray) -> UCharArray: ...
@overload
def Cat(arg1: ShortArray) -> ShortArray: ...
@overload
def Cat(arg1: ShortArray, arg2: ShortArray) -> ShortArray: ...
@overload
def Cat(arg1: ShortArray, arg2: ShortArray, arg3: ShortArray) -> ShortArray: ...
@overload
def Cat(arg1: ShortArray, arg2: ShortArray, arg3: ShortArray, arg4: ShortArray) -> ShortArray: ...
@overload
def Cat(arg1: ShortArray, arg2: ShortArray, arg3: ShortArray, arg4: ShortArray, arg5: ShortArray) -> ShortArray: ...
@overload
def Cat(arg1: UShortArray) -> UShortArray: ...
@overload
def Cat(arg1: UShortArray, arg2: UShortArray) -> UShortArray: ...
@overload
def Cat(arg1: UShortArray, arg2: UShortArray, arg3: UShortArray) -> UShortArray: ...
@overload
def Cat(arg1: UShortArray, arg2: UShortArray, arg3: UShortArray, arg4: UShortArray) -> UShortArray: ...
@overload
def Cat(arg1: UShortArray, arg2: UShortArray, arg3: UShortArray, arg4: UShortArray, arg5: UShortArray) -> UShortArray: ...
@overload
def Cat(arg1: IntArray) -> IntArray: ...
@overload
def Cat(arg1: IntArray, arg2: IntArray) -> IntArray: ...
@overload
def Cat(arg1: IntArray, arg2: IntArray, arg3: IntArray) -> IntArray: ...
@overload
def Cat(arg1: IntArray, arg2: IntArray, arg3: IntArray, arg4: IntArray) -> IntArray: ...
@overload
def Cat(arg1: IntArray, arg2: IntArray, arg3: IntArray, arg4: IntArray, arg5: IntArray) -> IntArray: ...
@overload
def Cat(arg1: UIntArray) -> UIntArray: ...
@overload
def Cat(arg1: UIntArray, arg2: UIntArray) -> UIntArray: ...
@overload
def Cat(arg1: UIntArray, arg2: UIntArray, arg3: UIntArray) -> UIntArray: ...
@overload
def Cat(arg1: UIntArray, arg2: UIntArray, arg3: UIntArray, arg4: UIntArray) -> UIntArray: ...
@overload
def Cat(arg1: UIntArray, arg2: UIntArray, arg3: UIntArray, arg4: UIntArray, arg5: UIntArray) -> UIntArray: ...
@overload
def Cat(arg1: Int64Array) -> Int64Array: ...
@overload
def Cat(arg1: Int64Array, arg2: Int64Array) -> Int64Array: ...
@overload
def Cat(arg1: Int64Array, arg2: Int64Array, arg3: Int64Array) -> Int64Array: ...
@overload
def Cat(arg1: Int64Array, arg2: Int64Array, arg3: Int64Array, arg4: Int64Array) -> Int64Array: ...
@overload
def Cat(arg1: Int64Array, arg2: Int64Array, arg3: Int64Array, arg4: Int64Array, arg5: Int64Array) -> Int64Array: ...
@overload
def Cat(arg1: UInt64Array) -> UInt64Array: ...
@overload
def Cat(arg1: UInt64Array, arg2: UInt64Array) -> UInt64Array: ...
@overload
def Cat(arg1: UInt64Array, arg2: UInt64Array, arg3: UInt64Array) -> UInt64Array: ...
@overload
def Cat(arg1: UInt64Array, arg2: UInt64Array, arg3: UInt64Array, arg4: UInt64Array) -> UInt64Array: ...
@overload
def Cat(arg1: UInt64Array, arg2: UInt64Array, arg3: UInt64Array, arg4: UInt64Array, arg5: UInt64Array) -> UInt64Array: ...
@overload
def Cat(arg1: Matrix4fArray) -> Matrix4fArray: ...
@overload
def Cat(arg1: Matrix4fArray, arg2: Matrix4fArray) -> Matrix4fArray: ...
@overload
def Cat(arg1: Matrix4fArray, arg2: Matrix4fArray, arg3: Matrix4fArray) -> Matrix4fArray: ...
@overload
def Cat(arg1: Matrix4fArray, arg2: Matrix4fArray, arg3: Matrix4fArray, arg4: Matrix4fArray) -> Matrix4fArray: ...
@overload
def Cat(arg1: Matrix4fArray, arg2: Matrix4fArray, arg3: Matrix4fArray, arg4: Matrix4fArray, arg5: Matrix4fArray) -> Matrix4fArray: ...
@overload
def Cat(arg1: Matrix3fArray) -> Matrix3fArray: ...
@overload
def Cat(arg1: Matrix3fArray, arg2: Matrix3fArray) -> Matrix3fArray: ...
@overload
def Cat(arg1: Matrix3fArray, arg2: Matrix3fArray, arg3: Matrix3fArray) -> Matrix3fArray: ...
@overload
def Cat(arg1: Matrix3fArray, arg2: Matrix3fArray, arg3: Matrix3fArray, arg4: Matrix3fArray) -> Matrix3fArray: ...
@overload
def Cat(arg1: Matrix3fArray, arg2: Matrix3fArray, arg3: Matrix3fArray, arg4: Matrix3fArray, arg5: Matrix3fArray) -> Matrix3fArray: ...
@overload
def Cat(arg1: Matrix2fArray) -> Matrix2fArray: ...
@overload
def Cat(arg1: Matrix2fArray, arg2: Matrix2fArray) -> Matrix2fArray: ...
@overload
def Cat(arg1: Matrix2fArray, arg2: Matrix2fArray, arg3: Matrix2fArray) -> Matrix2fArray: ...
@overload
def Cat(arg1: Matrix2fArray, arg2: Matrix2fArray, arg3: Matrix2fArray, arg4: Matrix2fArray) -> Matrix2fArray: ...
@overload
def Cat(arg1: Matrix2fArray, arg2: Matrix2fArray, arg3: Matrix2fArray, arg4: Matrix2fArray, arg5: Matrix2fArray) -> Matrix2fArray: ...
@overload
def Cat(arg1: Matrix4dArray) -> Matrix4dArray: ...
@overload
def Cat(arg1: Matrix4dArray, arg2: Matrix4dArray) -> Matrix4dArray: ...
@overload
def Cat(arg1: Matrix4dArray, arg2: Matrix4dArray, arg3: Matrix4dArray) -> Matrix4dArray: ...
@overload
def Cat(arg1: Matrix4dArray, arg2: Matrix4dArray, arg3: Matrix4dArray, arg4: Matrix4dArray) -> Matrix4dArray: ...
@overload
def Cat(arg1: Matrix4dArray, arg2: Matrix4dArray, arg3: Matrix4dArray, arg4: Matrix4dArray, arg5: Matrix4dArray) -> Matrix4dArray: ...
@overload
def Cat(arg1: Matrix3dArray) -> Matrix3dArray: ...
@overload
def Cat(arg1: Matrix3dArray, arg2: Matrix3dArray) -> Matrix3dArray: ...
@overload
def Cat(arg1: Matrix3dArray, arg2: Matrix3dArray, arg3: Matrix3dArray) -> Matrix3dArray: ...
@overload
def Cat(arg1: Matrix3dArray, arg2: Matrix3dArray, arg3: Matrix3dArray, arg4: Matrix3dArray) -> Matrix3dArray: ...
@overload
def Cat(arg1: Matrix3dArray, arg2: Matrix3dArray, arg3: Matrix3dArray, arg4: Matrix3dArray, arg5: Matrix3dArray) -> Matrix3dArray: ...
@overload
def Cat(arg1: Matrix2dArray) -> Matrix2dArray: ...
@overload
def Cat(arg1: Matrix2dArray, arg2: Matrix2dArray) -> Matrix2dArray: ...
@overload
def Cat(arg1: Matrix2dArray, arg2: Matrix2dArray, arg3: Matrix2dArray) -> Matrix2dArray: ...
@overload
def Cat(arg1: Matrix2dArray, arg2: Matrix2dArray, arg3: Matrix2dArray, arg4: Matrix2dArray) -> Matrix2dArray: ...
@overload
def Cat(arg1: Matrix2dArray, arg2: Matrix2dArray, arg3: Matrix2dArray, arg4: Matrix2dArray, arg5: Matrix2dArray) -> Matrix2dArray: ...
@overload
def Cat(arg1: QuathArray) -> QuathArray: ...
@overload
def Cat(arg1: QuathArray, arg2: QuathArray) -> QuathArray: ...
@overload
def Cat(arg1: QuathArray, arg2: QuathArray, arg3: QuathArray) -> QuathArray: ...
@overload
def Cat(arg1: QuathArray, arg2: QuathArray, arg3: QuathArray, arg4: QuathArray) -> QuathArray: ...
@overload
def Cat(arg1: QuathArray, arg2: QuathArray, arg3: QuathArray, arg4: QuathArray, arg5: QuathArray) -> QuathArray: ...
@overload
def Cat(arg1: QuatfArray) -> QuatfArray: ...
@overload
def Cat(arg1: QuatfArray, arg2: QuatfArray) -> QuatfArray: ...
@overload
def Cat(arg1: QuatfArray, arg2: QuatfArray, arg3: QuatfArray) -> QuatfArray: ...
@overload
def Cat(arg1: QuatfArray, arg2: QuatfArray, arg3: QuatfArray, arg4: QuatfArray) -> QuatfArray: ...
@overload
def Cat(arg1: QuatfArray, arg2: QuatfArray, arg3: QuatfArray, arg4: QuatfArray, arg5: QuatfArray) -> QuatfArray: ...
@overload
def Cat(arg1: QuatdArray) -> QuatdArray: ...
@overload
def Cat(arg1: QuatdArray, arg2: QuatdArray) -> QuatdArray: ...
@overload
def Cat(arg1: QuatdArray, arg2: QuatdArray, arg3: QuatdArray) -> QuatdArray: ...
@overload
def Cat(arg1: QuatdArray, arg2: QuatdArray, arg3: QuatdArray, arg4: QuatdArray) -> QuatdArray: ...
@overload
def Cat(arg1: QuatdArray, arg2: QuatdArray, arg3: QuatdArray, arg4: QuatdArray, arg5: QuatdArray) -> QuatdArray: ...
@overload
def Cat(arg1: QuaternionArray) -> QuaternionArray: ...
@overload
def Cat(arg1: QuaternionArray, arg2: QuaternionArray) -> QuaternionArray: ...
@overload
def Cat(arg1: QuaternionArray, arg2: QuaternionArray, arg3: QuaternionArray) -> QuaternionArray: ...
@overload
def Cat(arg1: QuaternionArray, arg2: QuaternionArray, arg3: QuaternionArray, arg4: QuaternionArray) -> QuaternionArray: ...
@overload
def Cat(arg1: QuaternionArray, arg2: QuaternionArray, arg3: QuaternionArray, arg4: QuaternionArray, arg5: QuaternionArray) -> QuaternionArray: ...
@overload
def Cat(arg1: Range3fArray) -> Range3fArray: ...
@overload
def Cat(arg1: Range3fArray, arg2: Range3fArray) -> Range3fArray: ...
@overload
def Cat(arg1: Range3fArray, arg2: Range3fArray, arg3: Range3fArray) -> Range3fArray: ...
@overload
def Cat(arg1: Range3fArray, arg2: Range3fArray, arg3: Range3fArray, arg4: Range3fArray) -> Range3fArray: ...
@overload
def Cat(arg1: Range3fArray, arg2: Range3fArray, arg3: Range3fArray, arg4: Range3fArray, arg5: Range3fArray) -> Range3fArray: ...
@overload
def Cat(arg1: Range3dArray) -> Range3dArray: ...
@overload
def Cat(arg1: Range3dArray, arg2: Range3dArray) -> Range3dArray: ...
@overload
def Cat(arg1: Range3dArray, arg2: Range3dArray, arg3: Range3dArray) -> Range3dArray: ...
@overload
def Cat(arg1: Range3dArray, arg2: Range3dArray, arg3: Range3dArray, arg4: Range3dArray) -> Range3dArray: ...
@overload
def Cat(arg1: Range3dArray, arg2: Range3dArray, arg3: Range3dArray, arg4: Range3dArray, arg5: Range3dArray) -> Range3dArray: ...
@overload
def Cat(arg1: Range2fArray) -> Range2fArray: ...
@overload
def Cat(arg1: Range2fArray, arg2: Range2fArray) -> Range2fArray: ...
@overload
def Cat(arg1: Range2fArray, arg2: Range2fArray, arg3: Range2fArray) -> Range2fArray: ...
@overload
def Cat(arg1: Range2fArray, arg2: Range2fArray, arg3: Range2fArray, arg4: Range2fArray) -> Range2fArray: ...
@overload
def Cat(arg1: Range2fArray, arg2: Range2fArray, arg3: Range2fArray, arg4: Range2fArray, arg5: Range2fArray) -> Range2fArray: ...
@overload
def Cat(arg1: Range2dArray) -> Range2dArray: ...
@overload
def Cat(arg1: Range2dArray, arg2: Range2dArray) -> Range2dArray: ...
@overload
def Cat(arg1: Range2dArray, arg2: Range2dArray, arg3: Range2dArray) -> Range2dArray: ...
@overload
def Cat(arg1: Range2dArray, arg2: Range2dArray, arg3: Range2dArray, arg4: Range2dArray) -> Range2dArray: ...
@overload
def Cat(arg1: Range2dArray, arg2: Range2dArray, arg3: Range2dArray, arg4: Range2dArray, arg5: Range2dArray) -> Range2dArray: ...
@overload
def Cat(arg1: Range1fArray) -> Range1fArray: ...
@overload
def Cat(arg1: Range1fArray, arg2: Range1fArray) -> Range1fArray: ...
@overload
def Cat(arg1: Range1fArray, arg2: Range1fArray, arg3: Range1fArray) -> Range1fArray: ...
@overload
def Cat(arg1: Range1fArray, arg2: Range1fArray, arg3: Range1fArray, arg4: Range1fArray) -> Range1fArray: ...
@overload
def Cat(arg1: Range1fArray, arg2: Range1fArray, arg3: Range1fArray, arg4: Range1fArray, arg5: Range1fArray) -> Range1fArray: ...
@overload
def Cat(arg1: Range1dArray) -> Range1dArray: ...
@overload
def Cat(arg1: Range1dArray, arg2: Range1dArray) -> Range1dArray: ...
@overload
def Cat(arg1: Range1dArray, arg2: Range1dArray, arg3: Range1dArray) -> Range1dArray: ...
@overload
def Cat(arg1: Range1dArray, arg2: Range1dArray, arg3: Range1dArray, arg4: Range1dArray) -> Range1dArray: ...
@overload
def Cat(arg1: Range1dArray, arg2: Range1dArray, arg3: Range1dArray, arg4: Range1dArray, arg5: Range1dArray) -> Range1dArray: ...
@overload
def Cat(arg1: IntervalArray) -> IntervalArray: ...
@overload
def Cat(arg1: IntervalArray, arg2: IntervalArray) -> IntervalArray: ...
@overload
def Cat(arg1: IntervalArray, arg2: IntervalArray, arg3: IntervalArray) -> IntervalArray: ...
@overload
def Cat(arg1: IntervalArray, arg2: IntervalArray, arg3: IntervalArray, arg4: IntervalArray) -> IntervalArray: ...
@overload
def Cat(arg1: IntervalArray, arg2: IntervalArray, arg3: IntervalArray, arg4: IntervalArray, arg5: IntervalArray) -> IntervalArray: ...
@overload
def Cat(arg1: Rect2iArray) -> Rect2iArray: ...
@overload
def Cat(arg1: Rect2iArray, arg2: Rect2iArray) -> Rect2iArray: ...
@overload
def Cat(arg1: Rect2iArray, arg2: Rect2iArray, arg3: Rect2iArray) -> Rect2iArray: ...
@overload
def Cat(arg1: Rect2iArray, arg2: Rect2iArray, arg3: Rect2iArray, arg4: Rect2iArray) -> Rect2iArray: ...
@overload
def Cat(arg1: Rect2iArray, arg2: Rect2iArray, arg3: Rect2iArray, arg4: Rect2iArray, arg5: Rect2iArray) -> Rect2iArray: ...
@overload
def Cat(arg1: StringArray) -> StringArray: ...
@overload
def Cat(arg1: StringArray, arg2: StringArray) -> StringArray: ...
@overload
def Cat(arg1: StringArray, arg2: StringArray, arg3: StringArray) -> StringArray: ...
@overload
def Cat(arg1: StringArray, arg2: StringArray, arg3: StringArray, arg4: StringArray) -> StringArray: ...
@overload
def Cat(arg1: StringArray, arg2: StringArray, arg3: StringArray, arg4: StringArray, arg5: StringArray) -> StringArray: ...
@overload
def Cat(arg1: TokenArray) -> TokenArray: ...
@overload
def Cat(arg1: TokenArray, arg2: TokenArray) -> TokenArray: ...
@overload
def Cat(arg1: TokenArray, arg2: TokenArray, arg3: TokenArray) -> TokenArray: ...
@overload
def Cat(arg1: TokenArray, arg2: TokenArray, arg3: TokenArray, arg4: TokenArray) -> TokenArray: ...
@overload
def Cat(arg1: TokenArray, arg2: TokenArray, arg3: TokenArray, arg4: TokenArray, arg5: TokenArray) -> TokenArray: ...
@overload
def Cat(arg1: Vec4iArray) -> Vec4iArray: ...
@overload
def Cat(arg1: Vec4iArray, arg2: Vec4iArray) -> Vec4iArray: ...
@overload
def Cat(arg1: Vec4iArray, arg2: Vec4iArray, arg3: Vec4iArray) -> Vec4iArray: ...
@overload
def Cat(arg1: Vec4iArray, arg2: Vec4iArray, arg3: Vec4iArray, arg4: Vec4iArray) -> Vec4iArray: ...
@overload
def Cat(arg1: Vec4iArray, arg2: Vec4iArray, arg3: Vec4iArray, arg4: Vec4iArray, arg5: Vec4iArray) -> Vec4iArray: ...
@overload
def Cat(arg1: Vec3iArray) -> Vec3iArray: ...
@overload
def Cat(arg1: Vec3iArray, arg2: Vec3iArray) -> Vec3iArray: ...
@overload
def Cat(arg1: Vec3iArray, arg2: Vec3iArray, arg3: Vec3iArray) -> Vec3iArray: ...
@overload
def Cat(arg1: Vec3iArray, arg2: Vec3iArray, arg3: Vec3iArray, arg4: Vec3iArray) -> Vec3iArray: ...
@overload
def Cat(arg1: Vec3iArray, arg2: Vec3iArray, arg3: Vec3iArray, arg4: Vec3iArray, arg5: Vec3iArray) -> Vec3iArray: ...
@overload
def Cat(arg1: Vec2iArray) -> Vec2iArray: ...
@overload
def Cat(arg1: Vec2iArray, arg2: Vec2iArray) -> Vec2iArray: ...
@overload
def Cat(arg1: Vec2iArray, arg2: Vec2iArray, arg3: Vec2iArray) -> Vec2iArray: ...
@overload
def Cat(arg1: Vec2iArray, arg2: Vec2iArray, arg3: Vec2iArray, arg4: Vec2iArray) -> Vec2iArray: ...
@overload
def Cat(arg1: Vec2iArray, arg2: Vec2iArray, arg3: Vec2iArray, arg4: Vec2iArray, arg5: Vec2iArray) -> Vec2iArray: ...
@overload
def Cat(arg1: Vec4hArray) -> Vec4hArray: ...
@overload
def Cat(arg1: Vec4hArray, arg2: Vec4hArray) -> Vec4hArray: ...
@overload
def Cat(arg1: Vec4hArray, arg2: Vec4hArray, arg3: Vec4hArray) -> Vec4hArray: ...
@overload
def Cat(arg1: Vec4hArray, arg2: Vec4hArray, arg3: Vec4hArray, arg4: Vec4hArray) -> Vec4hArray: ...
@overload
def Cat(arg1: Vec4hArray, arg2: Vec4hArray, arg3: Vec4hArray, arg4: Vec4hArray, arg5: Vec4hArray) -> Vec4hArray: ...
@overload
def Cat(arg1: Vec3hArray) -> Vec3hArray: ...
@overload
def Cat(arg1: Vec3hArray, arg2: Vec3hArray) -> Vec3hArray: ...
@overload
def Cat(arg1: Vec3hArray, arg2: Vec3hArray, arg3: Vec3hArray) -> Vec3hArray: ...
@overload
def Cat(arg1: Vec3hArray, arg2: Vec3hArray, arg3: Vec3hArray, arg4: Vec3hArray) -> Vec3hArray: ...
@overload
def Cat(arg1: Vec3hArray, arg2: Vec3hArray, arg3: Vec3hArray, arg4: Vec3hArray, arg5: Vec3hArray) -> Vec3hArray: ...
@overload
def Cat(arg1: Vec2hArray) -> Vec2hArray: ...
@overload
def Cat(arg1: Vec2hArray, arg2: Vec2hArray) -> Vec2hArray: ...
@overload
def Cat(arg1: Vec2hArray, arg2: Vec2hArray, arg3: Vec2hArray) -> Vec2hArray: ...
@overload
def Cat(arg1: Vec2hArray, arg2: Vec2hArray, arg3: Vec2hArray, arg4: Vec2hArray) -> Vec2hArray: ...
@overload
def Cat(arg1: Vec2hArray, arg2: Vec2hArray, arg3: Vec2hArray, arg4: Vec2hArray, arg5: Vec2hArray) -> Vec2hArray: ...
@overload
def Cat(arg1: Vec4fArray) -> Vec4fArray: ...
@overload
def Cat(arg1: Vec4fArray, arg2: Vec4fArray) -> Vec4fArray: ...
@overload
def Cat(arg1: Vec4fArray, arg2: Vec4fArray, arg3: Vec4fArray) -> Vec4fArray: ...
@overload
def Cat(arg1: Vec4fArray, arg2: Vec4fArray, arg3: Vec4fArray, arg4: Vec4fArray) -> Vec4fArray: ...
@overload
def Cat(arg1: Vec4fArray, arg2: Vec4fArray, arg3: Vec4fArray, arg4: Vec4fArray, arg5: Vec4fArray) -> Vec4fArray: ...
@overload
def Cat(arg1: Vec3fArray) -> Vec3fArray: ...
@overload
def Cat(arg1: Vec3fArray, arg2: Vec3fArray) -> Vec3fArray: ...
@overload
def Cat(arg1: Vec3fArray, arg2: Vec3fArray, arg3: Vec3fArray) -> Vec3fArray: ...
@overload
def Cat(arg1: Vec3fArray, arg2: Vec3fArray, arg3: Vec3fArray, arg4: Vec3fArray) -> Vec3fArray: ...
@overload
def Cat(arg1: Vec3fArray, arg2: Vec3fArray, arg3: Vec3fArray, arg4: Vec3fArray, arg5: Vec3fArray) -> Vec3fArray: ...
@overload
def Cat(arg1: Vec2fArray) -> Vec2fArray: ...
@overload
def Cat(arg1: Vec2fArray, arg2: Vec2fArray) -> Vec2fArray: ...
@overload
def Cat(arg1: Vec2fArray, arg2: Vec2fArray, arg3: Vec2fArray) -> Vec2fArray: ...
@overload
def Cat(arg1: Vec2fArray, arg2: Vec2fArray, arg3: Vec2fArray, arg4: Vec2fArray) -> Vec2fArray: ...
@overload
def Cat(arg1: Vec2fArray, arg2: Vec2fArray, arg3: Vec2fArray, arg4: Vec2fArray, arg5: Vec2fArray) -> Vec2fArray: ...
@overload
def Cat(arg1: Vec4dArray) -> Vec4dArray: ...
@overload
def Cat(arg1: Vec4dArray, arg2: Vec4dArray) -> Vec4dArray: ...
@overload
def Cat(arg1: Vec4dArray, arg2: Vec4dArray, arg3: Vec4dArray) -> Vec4dArray: ...
@overload
def Cat(arg1: Vec4dArray, arg2: Vec4dArray, arg3: Vec4dArray, arg4: Vec4dArray) -> Vec4dArray: ...
@overload
def Cat(arg1: Vec4dArray, arg2: Vec4dArray, arg3: Vec4dArray, arg4: Vec4dArray, arg5: Vec4dArray) -> Vec4dArray: ...
@overload
def Cat(arg1: Vec3dArray) -> Vec3dArray: ...
@overload
def Cat(arg1: Vec3dArray, arg2: Vec3dArray) -> Vec3dArray: ...
@overload
def Cat(arg1: Vec3dArray, arg2: Vec3dArray, arg3: Vec3dArray) -> Vec3dArray: ...
@overload
def Cat(arg1: Vec3dArray, arg2: Vec3dArray, arg3: Vec3dArray, arg4: Vec3dArray) -> Vec3dArray: ...
@overload
def Cat(arg1: Vec3dArray, arg2: Vec3dArray, arg3: Vec3dArray, arg4: Vec3dArray, arg5: Vec3dArray) -> Vec3dArray: ...
@overload
def Cat(arg1: Vec2dArray) -> Vec2dArray: ...
@overload
def Cat(arg1: Vec2dArray, arg2: Vec2dArray) -> Vec2dArray: ...
@overload
def Cat(arg1: Vec2dArray, arg2: Vec2dArray, arg3: Vec2dArray) -> Vec2dArray: ...
@overload
def Cat(arg1: Vec2dArray, arg2: Vec2dArray, arg3: Vec2dArray, arg4: Vec2dArray) -> Vec2dArray: ...
@overload
def Cat(arg1: Vec2dArray, arg2: Vec2dArray, arg3: Vec2dArray, arg4: Vec2dArray, arg5: Vec2dArray) -> Vec2dArray: ...
def CharArrayFromBuffer(arg1: object) -> Any: ...
def Double(value) -> _ValueWrapper: ...
def DoubleArrayFromBuffer(arg1: object) -> Any: ...
def DualQuatdArrayFromBuffer(arg1: object) -> Any: ...
def DualQuatfArrayFromBuffer(arg1: object) -> Any: ...
def DualQuathArrayFromBuffer(arg1: object) -> Any: ...
@overload
def Equal(arg1: DualQuathArray, arg2: DualQuathArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.DualQuath, arg2: DualQuathArray) -> BoolArray: ...
@overload
def Equal(arg1: DualQuathArray, arg2: pxr.Gf.DualQuath) -> BoolArray: ...
@overload
def Equal(arg1: DualQuathArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: DualQuathArray) -> BoolArray: ...
@overload
def Equal(arg1: DualQuathArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: DualQuathArray) -> BoolArray: ...
@overload
def Equal(arg1: DualQuatfArray, arg2: DualQuatfArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.DualQuatf, arg2: DualQuatfArray) -> BoolArray: ...
@overload
def Equal(arg1: DualQuatfArray, arg2: pxr.Gf.DualQuatf) -> BoolArray: ...
@overload
def Equal(arg1: DualQuatfArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: DualQuatfArray) -> BoolArray: ...
@overload
def Equal(arg1: DualQuatfArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: DualQuatfArray) -> BoolArray: ...
@overload
def Equal(arg1: DualQuatdArray, arg2: DualQuatdArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.DualQuatd, arg2: DualQuatdArray) -> BoolArray: ...
@overload
def Equal(arg1: DualQuatdArray, arg2: pxr.Gf.DualQuatd) -> BoolArray: ...
@overload
def Equal(arg1: DualQuatdArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: DualQuatdArray) -> BoolArray: ...
@overload
def Equal(arg1: DualQuatdArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: DualQuatdArray) -> BoolArray: ...
@overload
def Equal(arg1: DoubleArray, arg2: DoubleArray) -> BoolArray: ...
@overload
def Equal(arg1: float, arg2: DoubleArray) -> BoolArray: ...
@overload
def Equal(arg1: DoubleArray, arg2: float) -> BoolArray: ...
@overload
def Equal(arg1: DoubleArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: DoubleArray) -> BoolArray: ...
@overload
def Equal(arg1: DoubleArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: DoubleArray) -> BoolArray: ...
@overload
def Equal(arg1: FloatArray, arg2: FloatArray) -> BoolArray: ...
@overload
def Equal(arg1: float, arg2: FloatArray) -> BoolArray: ...
@overload
def Equal(arg1: FloatArray, arg2: float) -> BoolArray: ...
@overload
def Equal(arg1: FloatArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: FloatArray) -> BoolArray: ...
@overload
def Equal(arg1: FloatArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: FloatArray) -> BoolArray: ...
@overload
def Equal(arg1: HalfArray, arg2: HalfArray) -> BoolArray: ...
@overload
def Equal(arg1: object, arg2: HalfArray) -> BoolArray: ...
@overload
def Equal(arg1: HalfArray, arg2: object) -> BoolArray: ...
@overload
def Equal(arg1: HalfArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: HalfArray) -> BoolArray: ...
@overload
def Equal(arg1: HalfArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: HalfArray) -> BoolArray: ...
@overload
def Equal(arg1: BoolArray, arg2: BoolArray) -> BoolArray: ...
@overload
def Equal(arg1: bool, arg2: BoolArray) -> BoolArray: ...
@overload
def Equal(arg1: BoolArray, arg2: bool) -> BoolArray: ...
@overload
def Equal(arg1: BoolArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: BoolArray) -> BoolArray: ...
@overload
def Equal(arg1: BoolArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: BoolArray) -> BoolArray: ...
@overload
def Equal(arg1: CharArray, arg2: CharArray) -> BoolArray: ...
@overload
def Equal(arg1: str, arg2: CharArray) -> BoolArray: ...
@overload
def Equal(arg1: CharArray, arg2: str) -> BoolArray: ...
@overload
def Equal(arg1: CharArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: CharArray) -> BoolArray: ...
@overload
def Equal(arg1: CharArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: CharArray) -> BoolArray: ...
@overload
def Equal(arg1: UCharArray, arg2: UCharArray) -> BoolArray: ...
@overload
def Equal(arg1: int, arg2: UCharArray) -> BoolArray: ...
@overload
def Equal(arg1: UCharArray, arg2: int) -> BoolArray: ...
@overload
def Equal(arg1: UCharArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: UCharArray) -> BoolArray: ...
@overload
def Equal(arg1: UCharArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: UCharArray) -> BoolArray: ...
@overload
def Equal(arg1: ShortArray, arg2: ShortArray) -> BoolArray: ...
@overload
def Equal(arg1: int, arg2: ShortArray) -> BoolArray: ...
@overload
def Equal(arg1: ShortArray, arg2: int) -> BoolArray: ...
@overload
def Equal(arg1: ShortArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: ShortArray) -> BoolArray: ...
@overload
def Equal(arg1: ShortArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: ShortArray) -> BoolArray: ...
@overload
def Equal(arg1: UShortArray, arg2: UShortArray) -> BoolArray: ...
@overload
def Equal(arg1: int, arg2: UShortArray) -> BoolArray: ...
@overload
def Equal(arg1: UShortArray, arg2: int) -> BoolArray: ...
@overload
def Equal(arg1: UShortArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: UShortArray) -> BoolArray: ...
@overload
def Equal(arg1: UShortArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: UShortArray) -> BoolArray: ...
@overload
def Equal(arg1: IntArray, arg2: IntArray) -> BoolArray: ...
@overload
def Equal(arg1: int, arg2: IntArray) -> BoolArray: ...
@overload
def Equal(arg1: IntArray, arg2: int) -> BoolArray: ...
@overload
def Equal(arg1: IntArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: IntArray) -> BoolArray: ...
@overload
def Equal(arg1: IntArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: IntArray) -> BoolArray: ...
@overload
def Equal(arg1: UIntArray, arg2: UIntArray) -> BoolArray: ...
@overload
def Equal(arg1: int, arg2: UIntArray) -> BoolArray: ...
@overload
def Equal(arg1: UIntArray, arg2: int) -> BoolArray: ...
@overload
def Equal(arg1: UIntArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: UIntArray) -> BoolArray: ...
@overload
def Equal(arg1: UIntArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: UIntArray) -> BoolArray: ...
@overload
def Equal(arg1: Int64Array, arg2: Int64Array) -> BoolArray: ...
@overload
def Equal(arg1: int, arg2: Int64Array) -> BoolArray: ...
@overload
def Equal(arg1: Int64Array, arg2: int) -> BoolArray: ...
@overload
def Equal(arg1: Int64Array, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Int64Array) -> BoolArray: ...
@overload
def Equal(arg1: Int64Array, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Int64Array) -> BoolArray: ...
@overload
def Equal(arg1: UInt64Array, arg2: UInt64Array) -> BoolArray: ...
@overload
def Equal(arg1: int, arg2: UInt64Array) -> BoolArray: ...
@overload
def Equal(arg1: UInt64Array, arg2: int) -> BoolArray: ...
@overload
def Equal(arg1: UInt64Array, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: UInt64Array) -> BoolArray: ...
@overload
def Equal(arg1: UInt64Array, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: UInt64Array) -> BoolArray: ...
@overload
def Equal(arg1: Matrix4fArray, arg2: Matrix4fArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Matrix4f, arg2: Matrix4fArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix4fArray, arg2: pxr.Gf.Matrix4f) -> BoolArray: ...
@overload
def Equal(arg1: Matrix4fArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Matrix4fArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix4fArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Matrix4fArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix3fArray, arg2: Matrix3fArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Matrix3f, arg2: Matrix3fArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix3fArray, arg2: pxr.Gf.Matrix3f) -> BoolArray: ...
@overload
def Equal(arg1: Matrix3fArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Matrix3fArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix3fArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Matrix3fArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix2fArray, arg2: Matrix2fArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Matrix2f, arg2: Matrix2fArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix2fArray, arg2: pxr.Gf.Matrix2f) -> BoolArray: ...
@overload
def Equal(arg1: Matrix2fArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Matrix2fArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix2fArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Matrix2fArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix4dArray, arg2: Matrix4dArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Matrix4d, arg2: Matrix4dArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix4dArray, arg2: pxr.Gf.Matrix4d) -> BoolArray: ...
@overload
def Equal(arg1: Matrix4dArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Matrix4dArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix4dArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Matrix4dArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix3dArray, arg2: Matrix3dArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Matrix3d, arg2: Matrix3dArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix3dArray, arg2: pxr.Gf.Matrix3d) -> BoolArray: ...
@overload
def Equal(arg1: Matrix3dArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Matrix3dArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix3dArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Matrix3dArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix2dArray, arg2: Matrix2dArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Matrix2d, arg2: Matrix2dArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix2dArray, arg2: pxr.Gf.Matrix2d) -> BoolArray: ...
@overload
def Equal(arg1: Matrix2dArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Matrix2dArray) -> BoolArray: ...
@overload
def Equal(arg1: Matrix2dArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Matrix2dArray) -> BoolArray: ...
@overload
def Equal(arg1: QuathArray, arg2: QuathArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Quath, arg2: QuathArray) -> BoolArray: ...
@overload
def Equal(arg1: QuathArray, arg2: pxr.Gf.Quath) -> BoolArray: ...
@overload
def Equal(arg1: QuathArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: QuathArray) -> BoolArray: ...
@overload
def Equal(arg1: QuathArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: QuathArray) -> BoolArray: ...
@overload
def Equal(arg1: QuatfArray, arg2: QuatfArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Quatf, arg2: QuatfArray) -> BoolArray: ...
@overload
def Equal(arg1: QuatfArray, arg2: pxr.Gf.Quatf) -> BoolArray: ...
@overload
def Equal(arg1: QuatfArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: QuatfArray) -> BoolArray: ...
@overload
def Equal(arg1: QuatfArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: QuatfArray) -> BoolArray: ...
@overload
def Equal(arg1: QuatdArray, arg2: QuatdArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Quatd, arg2: QuatdArray) -> BoolArray: ...
@overload
def Equal(arg1: QuatdArray, arg2: pxr.Gf.Quatd) -> BoolArray: ...
@overload
def Equal(arg1: QuatdArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: QuatdArray) -> BoolArray: ...
@overload
def Equal(arg1: QuatdArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: QuatdArray) -> BoolArray: ...
@overload
def Equal(arg1: QuaternionArray, arg2: QuaternionArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Quaternion, arg2: QuaternionArray) -> BoolArray: ...
@overload
def Equal(arg1: QuaternionArray, arg2: pxr.Gf.Quaternion) -> BoolArray: ...
@overload
def Equal(arg1: QuaternionArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: QuaternionArray) -> BoolArray: ...
@overload
def Equal(arg1: QuaternionArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: QuaternionArray) -> BoolArray: ...
@overload
def Equal(arg1: Range3fArray, arg2: Range3fArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Range3f, arg2: Range3fArray) -> BoolArray: ...
@overload
def Equal(arg1: Range3fArray, arg2: pxr.Gf.Range3f) -> BoolArray: ...
@overload
def Equal(arg1: Range3fArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Range3fArray) -> BoolArray: ...
@overload
def Equal(arg1: Range3fArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Range3fArray) -> BoolArray: ...
@overload
def Equal(arg1: Range3dArray, arg2: Range3dArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Range3d, arg2: Range3dArray) -> BoolArray: ...
@overload
def Equal(arg1: Range3dArray, arg2: pxr.Gf.Range3d) -> BoolArray: ...
@overload
def Equal(arg1: Range3dArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Range3dArray) -> BoolArray: ...
@overload
def Equal(arg1: Range3dArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Range3dArray) -> BoolArray: ...
@overload
def Equal(arg1: Range2fArray, arg2: Range2fArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Range2f, arg2: Range2fArray) -> BoolArray: ...
@overload
def Equal(arg1: Range2fArray, arg2: pxr.Gf.Range2f) -> BoolArray: ...
@overload
def Equal(arg1: Range2fArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Range2fArray) -> BoolArray: ...
@overload
def Equal(arg1: Range2fArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Range2fArray) -> BoolArray: ...
@overload
def Equal(arg1: Range2dArray, arg2: Range2dArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Range2d, arg2: Range2dArray) -> BoolArray: ...
@overload
def Equal(arg1: Range2dArray, arg2: pxr.Gf.Range2d) -> BoolArray: ...
@overload
def Equal(arg1: Range2dArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Range2dArray) -> BoolArray: ...
@overload
def Equal(arg1: Range2dArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Range2dArray) -> BoolArray: ...
@overload
def Equal(arg1: Range1fArray, arg2: Range1fArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Range1f, arg2: Range1fArray) -> BoolArray: ...
@overload
def Equal(arg1: Range1fArray, arg2: pxr.Gf.Range1f) -> BoolArray: ...
@overload
def Equal(arg1: Range1fArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Range1fArray) -> BoolArray: ...
@overload
def Equal(arg1: Range1fArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Range1fArray) -> BoolArray: ...
@overload
def Equal(arg1: Range1dArray, arg2: Range1dArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Range1d, arg2: Range1dArray) -> BoolArray: ...
@overload
def Equal(arg1: Range1dArray, arg2: pxr.Gf.Range1d) -> BoolArray: ...
@overload
def Equal(arg1: Range1dArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Range1dArray) -> BoolArray: ...
@overload
def Equal(arg1: Range1dArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Range1dArray) -> BoolArray: ...
@overload
def Equal(arg1: IntervalArray, arg2: IntervalArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Interval, arg2: IntervalArray) -> BoolArray: ...
@overload
def Equal(arg1: IntervalArray, arg2: pxr.Gf.Interval) -> BoolArray: ...
@overload
def Equal(arg1: IntervalArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: IntervalArray) -> BoolArray: ...
@overload
def Equal(arg1: IntervalArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: IntervalArray) -> BoolArray: ...
@overload
def Equal(arg1: Rect2iArray, arg2: Rect2iArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Rect2i, arg2: Rect2iArray) -> BoolArray: ...
@overload
def Equal(arg1: Rect2iArray, arg2: pxr.Gf.Rect2i) -> BoolArray: ...
@overload
def Equal(arg1: Rect2iArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Rect2iArray) -> BoolArray: ...
@overload
def Equal(arg1: Rect2iArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Rect2iArray) -> BoolArray: ...
@overload
def Equal(arg1: StringArray, arg2: StringArray) -> BoolArray: ...
@overload
def Equal(arg1: str, arg2: StringArray) -> BoolArray: ...
@overload
def Equal(arg1: StringArray, arg2: str) -> BoolArray: ...
@overload
def Equal(arg1: StringArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: StringArray) -> BoolArray: ...
@overload
def Equal(arg1: StringArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: StringArray) -> BoolArray: ...
@overload
def Equal(arg1: TokenArray, arg2: TokenArray) -> BoolArray: ...
@overload
def Equal(arg1: object, arg2: TokenArray) -> BoolArray: ...
@overload
def Equal(arg1: TokenArray, arg2: object) -> BoolArray: ...
@overload
def Equal(arg1: TokenArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: TokenArray) -> BoolArray: ...
@overload
def Equal(arg1: TokenArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: TokenArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec4iArray, arg2: Vec4iArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Vec4i, arg2: Vec4iArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec4iArray, arg2: pxr.Gf.Vec4i) -> BoolArray: ...
@overload
def Equal(arg1: Vec4iArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Vec4iArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec4iArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Vec4iArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec3iArray, arg2: Vec3iArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Vec3i, arg2: Vec3iArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec3iArray, arg2: pxr.Gf.Vec3i) -> BoolArray: ...
@overload
def Equal(arg1: Vec3iArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Vec3iArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec3iArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Vec3iArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec2iArray, arg2: Vec2iArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Vec2i, arg2: Vec2iArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec2iArray, arg2: pxr.Gf.Vec2i) -> BoolArray: ...
@overload
def Equal(arg1: Vec2iArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Vec2iArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec2iArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Vec2iArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec4hArray, arg2: Vec4hArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Vec4h, arg2: Vec4hArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec4hArray, arg2: pxr.Gf.Vec4h) -> BoolArray: ...
@overload
def Equal(arg1: Vec4hArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Vec4hArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec4hArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Vec4hArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec3hArray, arg2: Vec3hArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Vec3h, arg2: Vec3hArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec3hArray, arg2: pxr.Gf.Vec3h) -> BoolArray: ...
@overload
def Equal(arg1: Vec3hArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Vec3hArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec3hArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Vec3hArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec2hArray, arg2: Vec2hArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Vec2h, arg2: Vec2hArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec2hArray, arg2: pxr.Gf.Vec2h) -> BoolArray: ...
@overload
def Equal(arg1: Vec2hArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Vec2hArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec2hArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Vec2hArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec4fArray, arg2: Vec4fArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Vec4f, arg2: Vec4fArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec4fArray, arg2: pxr.Gf.Vec4f) -> BoolArray: ...
@overload
def Equal(arg1: Vec4fArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Vec4fArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec4fArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Vec4fArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec3fArray, arg2: Vec3fArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Vec3f, arg2: Vec3fArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec3fArray, arg2: pxr.Gf.Vec3f) -> BoolArray: ...
@overload
def Equal(arg1: Vec3fArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Vec3fArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec3fArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Vec3fArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec2fArray, arg2: Vec2fArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Vec2f, arg2: Vec2fArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec2fArray, arg2: pxr.Gf.Vec2f) -> BoolArray: ...
@overload
def Equal(arg1: Vec2fArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Vec2fArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec2fArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Vec2fArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec4dArray, arg2: Vec4dArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Vec4d, arg2: Vec4dArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec4dArray, arg2: pxr.Gf.Vec4d) -> BoolArray: ...
@overload
def Equal(arg1: Vec4dArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Vec4dArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec4dArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Vec4dArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec3dArray, arg2: Vec3dArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Vec3d, arg2: Vec3dArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec3dArray, arg2: pxr.Gf.Vec3d) -> BoolArray: ...
@overload
def Equal(arg1: Vec3dArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Vec3dArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec3dArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Vec3dArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec2dArray, arg2: Vec2dArray) -> BoolArray: ...
@overload
def Equal(arg1: pxr.Gf.Vec2d, arg2: Vec2dArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec2dArray, arg2: pxr.Gf.Vec2d) -> BoolArray: ...
@overload
def Equal(arg1: Vec2dArray, arg2: tuple) -> BoolArray: ...
@overload
def Equal(arg1: tuple, arg2: Vec2dArray) -> BoolArray: ...
@overload
def Equal(arg1: Vec2dArray, arg2: list) -> BoolArray: ...
@overload
def Equal(arg1: list, arg2: Vec2dArray) -> BoolArray: ...
def Float(value) -> _ValueWrapper: ...
def FloatArrayFromBuffer(arg1: object) -> Any: ...
@overload
def Greater(arg1: DoubleArray, arg2: DoubleArray) -> BoolArray: ...
@overload
def Greater(arg1: float, arg2: DoubleArray) -> BoolArray: ...
@overload
def Greater(arg1: DoubleArray, arg2: float) -> BoolArray: ...
@overload
def Greater(arg1: DoubleArray, arg2: tuple) -> BoolArray: ...
@overload
def Greater(arg1: tuple, arg2: DoubleArray) -> BoolArray: ...
@overload
def Greater(arg1: DoubleArray, arg2: list) -> BoolArray: ...
@overload
def Greater(arg1: list, arg2: DoubleArray) -> BoolArray: ...
@overload
def Greater(arg1: FloatArray, arg2: FloatArray) -> BoolArray: ...
@overload
def Greater(arg1: float, arg2: FloatArray) -> BoolArray: ...
@overload
def Greater(arg1: FloatArray, arg2: float) -> BoolArray: ...
@overload
def Greater(arg1: FloatArray, arg2: tuple) -> BoolArray: ...
@overload
def Greater(arg1: tuple, arg2: FloatArray) -> BoolArray: ...
@overload
def Greater(arg1: FloatArray, arg2: list) -> BoolArray: ...
@overload
def Greater(arg1: list, arg2: FloatArray) -> BoolArray: ...
@overload
def Greater(arg1: HalfArray, arg2: HalfArray) -> BoolArray: ...
@overload
def Greater(arg1: object, arg2: HalfArray) -> BoolArray: ...
@overload
def Greater(arg1: HalfArray, arg2: object) -> BoolArray: ...
@overload
def Greater(arg1: HalfArray, arg2: tuple) -> BoolArray: ...
@overload
def Greater(arg1: tuple, arg2: HalfArray) -> BoolArray: ...
@overload
def Greater(arg1: HalfArray, arg2: list) -> BoolArray: ...
@overload
def Greater(arg1: list, arg2: HalfArray) -> BoolArray: ...
@overload
def Greater(arg1: BoolArray, arg2: BoolArray) -> BoolArray: ...
@overload
def Greater(arg1: bool, arg2: BoolArray) -> BoolArray: ...
@overload
def Greater(arg1: BoolArray, arg2: bool) -> BoolArray: ...
@overload
def Greater(arg1: BoolArray, arg2: tuple) -> BoolArray: ...
@overload
def Greater(arg1: tuple, arg2: BoolArray) -> BoolArray: ...
@overload
def Greater(arg1: BoolArray, arg2: list) -> BoolArray: ...
@overload
def Greater(arg1: list, arg2: BoolArray) -> BoolArray: ...
@overload
def Greater(arg1: CharArray, arg2: CharArray) -> BoolArray: ...
@overload
def Greater(arg1: str, arg2: CharArray) -> BoolArray: ...
@overload
def Greater(arg1: CharArray, arg2: str) -> BoolArray: ...
@overload
def Greater(arg1: CharArray, arg2: tuple) -> BoolArray: ...
@overload
def Greater(arg1: tuple, arg2: CharArray) -> BoolArray: ...
@overload
def Greater(arg1: CharArray, arg2: list) -> BoolArray: ...
@overload
def Greater(arg1: list, arg2: CharArray) -> BoolArray: ...
@overload
def Greater(arg1: UCharArray, arg2: UCharArray) -> BoolArray: ...
@overload
def Greater(arg1: int, arg2: UCharArray) -> BoolArray: ...
@overload
def Greater(arg1: UCharArray, arg2: int) -> BoolArray: ...
@overload
def Greater(arg1: UCharArray, arg2: tuple) -> BoolArray: ...
@overload
def Greater(arg1: tuple, arg2: UCharArray) -> BoolArray: ...
@overload
def Greater(arg1: UCharArray, arg2: list) -> BoolArray: ...
@overload
def Greater(arg1: list, arg2: UCharArray) -> BoolArray: ...
@overload
def Greater(arg1: ShortArray, arg2: ShortArray) -> BoolArray: ...
@overload
def Greater(arg1: int, arg2: ShortArray) -> BoolArray: ...
@overload
def Greater(arg1: ShortArray, arg2: int) -> BoolArray: ...
@overload
def Greater(arg1: ShortArray, arg2: tuple) -> BoolArray: ...
@overload
def Greater(arg1: tuple, arg2: ShortArray) -> BoolArray: ...
@overload
def Greater(arg1: ShortArray, arg2: list) -> BoolArray: ...
@overload
def Greater(arg1: list, arg2: ShortArray) -> BoolArray: ...
@overload
def Greater(arg1: UShortArray, arg2: UShortArray) -> BoolArray: ...
@overload
def Greater(arg1: int, arg2: UShortArray) -> BoolArray: ...
@overload
def Greater(arg1: UShortArray, arg2: int) -> BoolArray: ...
@overload
def Greater(arg1: UShortArray, arg2: tuple) -> BoolArray: ...
@overload
def Greater(arg1: tuple, arg2: UShortArray) -> BoolArray: ...
@overload
def Greater(arg1: UShortArray, arg2: list) -> BoolArray: ...
@overload
def Greater(arg1: list, arg2: UShortArray) -> BoolArray: ...
@overload
def Greater(arg1: IntArray, arg2: IntArray) -> BoolArray: ...
@overload
def Greater(arg1: int, arg2: IntArray) -> BoolArray: ...
@overload
def Greater(arg1: IntArray, arg2: int) -> BoolArray: ...
@overload
def Greater(arg1: IntArray, arg2: tuple) -> BoolArray: ...
@overload
def Greater(arg1: tuple, arg2: IntArray) -> BoolArray: ...
@overload
def Greater(arg1: IntArray, arg2: list) -> BoolArray: ...
@overload
def Greater(arg1: list, arg2: IntArray) -> BoolArray: ...
@overload
def Greater(arg1: UIntArray, arg2: UIntArray) -> BoolArray: ...
@overload
def Greater(arg1: int, arg2: UIntArray) -> BoolArray: ...
@overload
def Greater(arg1: UIntArray, arg2: int) -> BoolArray: ...
@overload
def Greater(arg1: UIntArray, arg2: tuple) -> BoolArray: ...
@overload
def Greater(arg1: tuple, arg2: UIntArray) -> BoolArray: ...
@overload
def Greater(arg1: UIntArray, arg2: list) -> BoolArray: ...
@overload
def Greater(arg1: list, arg2: UIntArray) -> BoolArray: ...
@overload
def Greater(arg1: Int64Array, arg2: Int64Array) -> BoolArray: ...
@overload
def Greater(arg1: int, arg2: Int64Array) -> BoolArray: ...
@overload
def Greater(arg1: Int64Array, arg2: int) -> BoolArray: ...
@overload
def Greater(arg1: Int64Array, arg2: tuple) -> BoolArray: ...
@overload
def Greater(arg1: tuple, arg2: Int64Array) -> BoolArray: ...
@overload
def Greater(arg1: Int64Array, arg2: list) -> BoolArray: ...
@overload
def Greater(arg1: list, arg2: Int64Array) -> BoolArray: ...
@overload
def Greater(arg1: UInt64Array, arg2: UInt64Array) -> BoolArray: ...
@overload
def Greater(arg1: int, arg2: UInt64Array) -> BoolArray: ...
@overload
def Greater(arg1: UInt64Array, arg2: int) -> BoolArray: ...
@overload
def Greater(arg1: UInt64Array, arg2: tuple) -> BoolArray: ...
@overload
def Greater(arg1: tuple, arg2: UInt64Array) -> BoolArray: ...
@overload
def Greater(arg1: UInt64Array, arg2: list) -> BoolArray: ...
@overload
def Greater(arg1: list, arg2: UInt64Array) -> BoolArray: ...
@overload
def Greater(arg1: StringArray, arg2: StringArray) -> BoolArray: ...
@overload
def Greater(arg1: str, arg2: StringArray) -> BoolArray: ...
@overload
def Greater(arg1: StringArray, arg2: str) -> BoolArray: ...
@overload
def Greater(arg1: StringArray, arg2: tuple) -> BoolArray: ...
@overload
def Greater(arg1: tuple, arg2: StringArray) -> BoolArray: ...
@overload
def Greater(arg1: StringArray, arg2: list) -> BoolArray: ...
@overload
def Greater(arg1: list, arg2: StringArray) -> BoolArray: ...
@overload
def Greater(arg1: TokenArray, arg2: TokenArray) -> BoolArray: ...
@overload
def Greater(arg1: object, arg2: TokenArray) -> BoolArray: ...
@overload
def Greater(arg1: TokenArray, arg2: object) -> BoolArray: ...
@overload
def Greater(arg1: TokenArray, arg2: tuple) -> BoolArray: ...
@overload
def Greater(arg1: tuple, arg2: TokenArray) -> BoolArray: ...
@overload
def Greater(arg1: TokenArray, arg2: list) -> BoolArray: ...
@overload
def Greater(arg1: list, arg2: TokenArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: DoubleArray, arg2: DoubleArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: float, arg2: DoubleArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: DoubleArray, arg2: float) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: DoubleArray, arg2: tuple) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: tuple, arg2: DoubleArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: DoubleArray, arg2: list) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: list, arg2: DoubleArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: FloatArray, arg2: FloatArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: float, arg2: FloatArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: FloatArray, arg2: float) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: FloatArray, arg2: tuple) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: tuple, arg2: FloatArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: FloatArray, arg2: list) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: list, arg2: FloatArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: HalfArray, arg2: HalfArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: object, arg2: HalfArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: HalfArray, arg2: object) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: HalfArray, arg2: tuple) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: tuple, arg2: HalfArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: HalfArray, arg2: list) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: list, arg2: HalfArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: BoolArray, arg2: BoolArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: bool, arg2: BoolArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: BoolArray, arg2: bool) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: BoolArray, arg2: tuple) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: tuple, arg2: BoolArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: BoolArray, arg2: list) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: list, arg2: BoolArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: CharArray, arg2: CharArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: str, arg2: CharArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: CharArray, arg2: str) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: CharArray, arg2: tuple) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: tuple, arg2: CharArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: CharArray, arg2: list) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: list, arg2: CharArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UCharArray, arg2: UCharArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: int, arg2: UCharArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UCharArray, arg2: int) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UCharArray, arg2: tuple) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: tuple, arg2: UCharArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UCharArray, arg2: list) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: list, arg2: UCharArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: ShortArray, arg2: ShortArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: int, arg2: ShortArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: ShortArray, arg2: int) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: ShortArray, arg2: tuple) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: tuple, arg2: ShortArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: ShortArray, arg2: list) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: list, arg2: ShortArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UShortArray, arg2: UShortArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: int, arg2: UShortArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UShortArray, arg2: int) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UShortArray, arg2: tuple) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: tuple, arg2: UShortArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UShortArray, arg2: list) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: list, arg2: UShortArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: IntArray, arg2: IntArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: int, arg2: IntArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: IntArray, arg2: int) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: IntArray, arg2: tuple) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: tuple, arg2: IntArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: IntArray, arg2: list) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: list, arg2: IntArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UIntArray, arg2: UIntArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: int, arg2: UIntArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UIntArray, arg2: int) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UIntArray, arg2: tuple) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: tuple, arg2: UIntArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UIntArray, arg2: list) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: list, arg2: UIntArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: Int64Array, arg2: Int64Array) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: int, arg2: Int64Array) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: Int64Array, arg2: int) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: Int64Array, arg2: tuple) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: tuple, arg2: Int64Array) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: Int64Array, arg2: list) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: list, arg2: Int64Array) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UInt64Array, arg2: UInt64Array) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: int, arg2: UInt64Array) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UInt64Array, arg2: int) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UInt64Array, arg2: tuple) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: tuple, arg2: UInt64Array) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: UInt64Array, arg2: list) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: list, arg2: UInt64Array) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: StringArray, arg2: StringArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: str, arg2: StringArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: StringArray, arg2: str) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: StringArray, arg2: tuple) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: tuple, arg2: StringArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: StringArray, arg2: list) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: list, arg2: StringArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: TokenArray, arg2: TokenArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: object, arg2: TokenArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: TokenArray, arg2: object) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: TokenArray, arg2: tuple) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: tuple, arg2: TokenArray) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: TokenArray, arg2: list) -> BoolArray: ...
@overload
def GreaterOrEqual(arg1: list, arg2: TokenArray) -> BoolArray: ...
def Half(value) -> _ValueWrapper: ...
def HalfArrayFromBuffer(arg1: object) -> Any: ...
def Int(value) -> _ValueWrapper: ...
def Int64(value) -> _ValueWrapper: ...
def Int64ArrayFromBuffer(arg1: object) -> Any: ...
def IntArrayFromBuffer(arg1: object) -> Any: ...
@overload
def Less(arg1: DoubleArray, arg2: DoubleArray) -> BoolArray: ...
@overload
def Less(arg1: float, arg2: DoubleArray) -> BoolArray: ...
@overload
def Less(arg1: DoubleArray, arg2: float) -> BoolArray: ...
@overload
def Less(arg1: DoubleArray, arg2: tuple) -> BoolArray: ...
@overload
def Less(arg1: tuple, arg2: DoubleArray) -> BoolArray: ...
@overload
def Less(arg1: DoubleArray, arg2: list) -> BoolArray: ...
@overload
def Less(arg1: list, arg2: DoubleArray) -> BoolArray: ...
@overload
def Less(arg1: FloatArray, arg2: FloatArray) -> BoolArray: ...
@overload
def Less(arg1: float, arg2: FloatArray) -> BoolArray: ...
@overload
def Less(arg1: FloatArray, arg2: float) -> BoolArray: ...
@overload
def Less(arg1: FloatArray, arg2: tuple) -> BoolArray: ...
@overload
def Less(arg1: tuple, arg2: FloatArray) -> BoolArray: ...
@overload
def Less(arg1: FloatArray, arg2: list) -> BoolArray: ...
@overload
def Less(arg1: list, arg2: FloatArray) -> BoolArray: ...
@overload
def Less(arg1: HalfArray, arg2: HalfArray) -> BoolArray: ...
@overload
def Less(arg1: object, arg2: HalfArray) -> BoolArray: ...
@overload
def Less(arg1: HalfArray, arg2: object) -> BoolArray: ...
@overload
def Less(arg1: HalfArray, arg2: tuple) -> BoolArray: ...
@overload
def Less(arg1: tuple, arg2: HalfArray) -> BoolArray: ...
@overload
def Less(arg1: HalfArray, arg2: list) -> BoolArray: ...
@overload
def Less(arg1: list, arg2: HalfArray) -> BoolArray: ...
@overload
def Less(arg1: BoolArray, arg2: BoolArray) -> BoolArray: ...
@overload
def Less(arg1: bool, arg2: BoolArray) -> BoolArray: ...
@overload
def Less(arg1: BoolArray, arg2: bool) -> BoolArray: ...
@overload
def Less(arg1: BoolArray, arg2: tuple) -> BoolArray: ...
@overload
def Less(arg1: tuple, arg2: BoolArray) -> BoolArray: ...
@overload
def Less(arg1: BoolArray, arg2: list) -> BoolArray: ...
@overload
def Less(arg1: list, arg2: BoolArray) -> BoolArray: ...
@overload
def Less(arg1: CharArray, arg2: CharArray) -> BoolArray: ...
@overload
def Less(arg1: str, arg2: CharArray) -> BoolArray: ...
@overload
def Less(arg1: CharArray, arg2: str) -> BoolArray: ...
@overload
def Less(arg1: CharArray, arg2: tuple) -> BoolArray: ...
@overload
def Less(arg1: tuple, arg2: CharArray) -> BoolArray: ...
@overload
def Less(arg1: CharArray, arg2: list) -> BoolArray: ...
@overload
def Less(arg1: list, arg2: CharArray) -> BoolArray: ...
@overload
def Less(arg1: UCharArray, arg2: UCharArray) -> BoolArray: ...
@overload
def Less(arg1: int, arg2: UCharArray) -> BoolArray: ...
@overload
def Less(arg1: UCharArray, arg2: int) -> BoolArray: ...
@overload
def Less(arg1: UCharArray, arg2: tuple) -> BoolArray: ...
@overload
def Less(arg1: tuple, arg2: UCharArray) -> BoolArray: ...
@overload
def Less(arg1: UCharArray, arg2: list) -> BoolArray: ...
@overload
def Less(arg1: list, arg2: UCharArray) -> BoolArray: ...
@overload
def Less(arg1: ShortArray, arg2: ShortArray) -> BoolArray: ...
@overload
def Less(arg1: int, arg2: ShortArray) -> BoolArray: ...
@overload
def Less(arg1: ShortArray, arg2: int) -> BoolArray: ...
@overload
def Less(arg1: ShortArray, arg2: tuple) -> BoolArray: ...
@overload
def Less(arg1: tuple, arg2: ShortArray) -> BoolArray: ...
@overload
def Less(arg1: ShortArray, arg2: list) -> BoolArray: ...
@overload
def Less(arg1: list, arg2: ShortArray) -> BoolArray: ...
@overload
def Less(arg1: UShortArray, arg2: UShortArray) -> BoolArray: ...
@overload
def Less(arg1: int, arg2: UShortArray) -> BoolArray: ...
@overload
def Less(arg1: UShortArray, arg2: int) -> BoolArray: ...
@overload
def Less(arg1: UShortArray, arg2: tuple) -> BoolArray: ...
@overload
def Less(arg1: tuple, arg2: UShortArray) -> BoolArray: ...
@overload
def Less(arg1: UShortArray, arg2: list) -> BoolArray: ...
@overload
def Less(arg1: list, arg2: UShortArray) -> BoolArray: ...
@overload
def Less(arg1: IntArray, arg2: IntArray) -> BoolArray: ...
@overload
def Less(arg1: int, arg2: IntArray) -> BoolArray: ...
@overload
def Less(arg1: IntArray, arg2: int) -> BoolArray: ...
@overload
def Less(arg1: IntArray, arg2: tuple) -> BoolArray: ...
@overload
def Less(arg1: tuple, arg2: IntArray) -> BoolArray: ...
@overload
def Less(arg1: IntArray, arg2: list) -> BoolArray: ...
@overload
def Less(arg1: list, arg2: IntArray) -> BoolArray: ...
@overload
def Less(arg1: UIntArray, arg2: UIntArray) -> BoolArray: ...
@overload
def Less(arg1: int, arg2: UIntArray) -> BoolArray: ...
@overload
def Less(arg1: UIntArray, arg2: int) -> BoolArray: ...
@overload
def Less(arg1: UIntArray, arg2: tuple) -> BoolArray: ...
@overload
def Less(arg1: tuple, arg2: UIntArray) -> BoolArray: ...
@overload
def Less(arg1: UIntArray, arg2: list) -> BoolArray: ...
@overload
def Less(arg1: list, arg2: UIntArray) -> BoolArray: ...
@overload
def Less(arg1: Int64Array, arg2: Int64Array) -> BoolArray: ...
@overload
def Less(arg1: int, arg2: Int64Array) -> BoolArray: ...
@overload
def Less(arg1: Int64Array, arg2: int) -> BoolArray: ...
@overload
def Less(arg1: Int64Array, arg2: tuple) -> BoolArray: ...
@overload
def Less(arg1: tuple, arg2: Int64Array) -> BoolArray: ...
@overload
def Less(arg1: Int64Array, arg2: list) -> BoolArray: ...
@overload
def Less(arg1: list, arg2: Int64Array) -> BoolArray: ...
@overload
def Less(arg1: UInt64Array, arg2: UInt64Array) -> BoolArray: ...
@overload
def Less(arg1: int, arg2: UInt64Array) -> BoolArray: ...
@overload
def Less(arg1: UInt64Array, arg2: int) -> BoolArray: ...
@overload
def Less(arg1: UInt64Array, arg2: tuple) -> BoolArray: ...
@overload
def Less(arg1: tuple, arg2: UInt64Array) -> BoolArray: ...
@overload
def Less(arg1: UInt64Array, arg2: list) -> BoolArray: ...
@overload
def Less(arg1: list, arg2: UInt64Array) -> BoolArray: ...
@overload
def Less(arg1: StringArray, arg2: StringArray) -> BoolArray: ...
@overload
def Less(arg1: str, arg2: StringArray) -> BoolArray: ...
@overload
def Less(arg1: StringArray, arg2: str) -> BoolArray: ...
@overload
def Less(arg1: StringArray, arg2: tuple) -> BoolArray: ...
@overload
def Less(arg1: tuple, arg2: StringArray) -> BoolArray: ...
@overload
def Less(arg1: StringArray, arg2: list) -> BoolArray: ...
@overload
def Less(arg1: list, arg2: StringArray) -> BoolArray: ...
@overload
def Less(arg1: TokenArray, arg2: TokenArray) -> BoolArray: ...
@overload
def Less(arg1: object, arg2: TokenArray) -> BoolArray: ...
@overload
def Less(arg1: TokenArray, arg2: object) -> BoolArray: ...
@overload
def Less(arg1: TokenArray, arg2: tuple) -> BoolArray: ...
@overload
def Less(arg1: tuple, arg2: TokenArray) -> BoolArray: ...
@overload
def Less(arg1: TokenArray, arg2: list) -> BoolArray: ...
@overload
def Less(arg1: list, arg2: TokenArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: DoubleArray, arg2: DoubleArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: float, arg2: DoubleArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: DoubleArray, arg2: float) -> BoolArray: ...
@overload
def LessOrEqual(arg1: DoubleArray, arg2: tuple) -> BoolArray: ...
@overload
def LessOrEqual(arg1: tuple, arg2: DoubleArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: DoubleArray, arg2: list) -> BoolArray: ...
@overload
def LessOrEqual(arg1: list, arg2: DoubleArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: FloatArray, arg2: FloatArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: float, arg2: FloatArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: FloatArray, arg2: float) -> BoolArray: ...
@overload
def LessOrEqual(arg1: FloatArray, arg2: tuple) -> BoolArray: ...
@overload
def LessOrEqual(arg1: tuple, arg2: FloatArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: FloatArray, arg2: list) -> BoolArray: ...
@overload
def LessOrEqual(arg1: list, arg2: FloatArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: HalfArray, arg2: HalfArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: object, arg2: HalfArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: HalfArray, arg2: object) -> BoolArray: ...
@overload
def LessOrEqual(arg1: HalfArray, arg2: tuple) -> BoolArray: ...
@overload
def LessOrEqual(arg1: tuple, arg2: HalfArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: HalfArray, arg2: list) -> BoolArray: ...
@overload
def LessOrEqual(arg1: list, arg2: HalfArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: BoolArray, arg2: BoolArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: bool, arg2: BoolArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: BoolArray, arg2: bool) -> BoolArray: ...
@overload
def LessOrEqual(arg1: BoolArray, arg2: tuple) -> BoolArray: ...
@overload
def LessOrEqual(arg1: tuple, arg2: BoolArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: BoolArray, arg2: list) -> BoolArray: ...
@overload
def LessOrEqual(arg1: list, arg2: BoolArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: CharArray, arg2: CharArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: str, arg2: CharArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: CharArray, arg2: str) -> BoolArray: ...
@overload
def LessOrEqual(arg1: CharArray, arg2: tuple) -> BoolArray: ...
@overload
def LessOrEqual(arg1: tuple, arg2: CharArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: CharArray, arg2: list) -> BoolArray: ...
@overload
def LessOrEqual(arg1: list, arg2: CharArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UCharArray, arg2: UCharArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: int, arg2: UCharArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UCharArray, arg2: int) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UCharArray, arg2: tuple) -> BoolArray: ...
@overload
def LessOrEqual(arg1: tuple, arg2: UCharArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UCharArray, arg2: list) -> BoolArray: ...
@overload
def LessOrEqual(arg1: list, arg2: UCharArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: ShortArray, arg2: ShortArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: int, arg2: ShortArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: ShortArray, arg2: int) -> BoolArray: ...
@overload
def LessOrEqual(arg1: ShortArray, arg2: tuple) -> BoolArray: ...
@overload
def LessOrEqual(arg1: tuple, arg2: ShortArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: ShortArray, arg2: list) -> BoolArray: ...
@overload
def LessOrEqual(arg1: list, arg2: ShortArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UShortArray, arg2: UShortArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: int, arg2: UShortArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UShortArray, arg2: int) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UShortArray, arg2: tuple) -> BoolArray: ...
@overload
def LessOrEqual(arg1: tuple, arg2: UShortArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UShortArray, arg2: list) -> BoolArray: ...
@overload
def LessOrEqual(arg1: list, arg2: UShortArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: IntArray, arg2: IntArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: int, arg2: IntArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: IntArray, arg2: int) -> BoolArray: ...
@overload
def LessOrEqual(arg1: IntArray, arg2: tuple) -> BoolArray: ...
@overload
def LessOrEqual(arg1: tuple, arg2: IntArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: IntArray, arg2: list) -> BoolArray: ...
@overload
def LessOrEqual(arg1: list, arg2: IntArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UIntArray, arg2: UIntArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: int, arg2: UIntArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UIntArray, arg2: int) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UIntArray, arg2: tuple) -> BoolArray: ...
@overload
def LessOrEqual(arg1: tuple, arg2: UIntArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UIntArray, arg2: list) -> BoolArray: ...
@overload
def LessOrEqual(arg1: list, arg2: UIntArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: Int64Array, arg2: Int64Array) -> BoolArray: ...
@overload
def LessOrEqual(arg1: int, arg2: Int64Array) -> BoolArray: ...
@overload
def LessOrEqual(arg1: Int64Array, arg2: int) -> BoolArray: ...
@overload
def LessOrEqual(arg1: Int64Array, arg2: tuple) -> BoolArray: ...
@overload
def LessOrEqual(arg1: tuple, arg2: Int64Array) -> BoolArray: ...
@overload
def LessOrEqual(arg1: Int64Array, arg2: list) -> BoolArray: ...
@overload
def LessOrEqual(arg1: list, arg2: Int64Array) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UInt64Array, arg2: UInt64Array) -> BoolArray: ...
@overload
def LessOrEqual(arg1: int, arg2: UInt64Array) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UInt64Array, arg2: int) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UInt64Array, arg2: tuple) -> BoolArray: ...
@overload
def LessOrEqual(arg1: tuple, arg2: UInt64Array) -> BoolArray: ...
@overload
def LessOrEqual(arg1: UInt64Array, arg2: list) -> BoolArray: ...
@overload
def LessOrEqual(arg1: list, arg2: UInt64Array) -> BoolArray: ...
@overload
def LessOrEqual(arg1: StringArray, arg2: StringArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: str, arg2: StringArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: StringArray, arg2: str) -> BoolArray: ...
@overload
def LessOrEqual(arg1: StringArray, arg2: tuple) -> BoolArray: ...
@overload
def LessOrEqual(arg1: tuple, arg2: StringArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: StringArray, arg2: list) -> BoolArray: ...
@overload
def LessOrEqual(arg1: list, arg2: StringArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: TokenArray, arg2: TokenArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: object, arg2: TokenArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: TokenArray, arg2: object) -> BoolArray: ...
@overload
def LessOrEqual(arg1: TokenArray, arg2: tuple) -> BoolArray: ...
@overload
def LessOrEqual(arg1: tuple, arg2: TokenArray) -> BoolArray: ...
@overload
def LessOrEqual(arg1: TokenArray, arg2: list) -> BoolArray: ...
@overload
def LessOrEqual(arg1: list, arg2: TokenArray) -> BoolArray: ...
def Long(value) -> _ValueWrapper: ...
def Matrix2dArrayFromBuffer(arg1: object) -> Any: ...
def Matrix2fArrayFromBuffer(arg1: object) -> Any: ...
def Matrix3dArrayFromBuffer(arg1: object) -> Any: ...
def Matrix3fArrayFromBuffer(arg1: object) -> Any: ...
def Matrix4dArrayFromBuffer(arg1: object) -> Any: ...
def Matrix4fArrayFromBuffer(arg1: object) -> Any: ...
@overload
def NotEqual(arg1: DualQuathArray, arg2: DualQuathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.DualQuath, arg2: DualQuathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: DualQuathArray, arg2: pxr.Gf.DualQuath) -> BoolArray: ...
@overload
def NotEqual(arg1: DualQuathArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: DualQuathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: DualQuathArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: DualQuathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: DualQuatfArray, arg2: DualQuatfArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.DualQuatf, arg2: DualQuatfArray) -> BoolArray: ...
@overload
def NotEqual(arg1: DualQuatfArray, arg2: pxr.Gf.DualQuatf) -> BoolArray: ...
@overload
def NotEqual(arg1: DualQuatfArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: DualQuatfArray) -> BoolArray: ...
@overload
def NotEqual(arg1: DualQuatfArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: DualQuatfArray) -> BoolArray: ...
@overload
def NotEqual(arg1: DualQuatdArray, arg2: DualQuatdArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.DualQuatd, arg2: DualQuatdArray) -> BoolArray: ...
@overload
def NotEqual(arg1: DualQuatdArray, arg2: pxr.Gf.DualQuatd) -> BoolArray: ...
@overload
def NotEqual(arg1: DualQuatdArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: DualQuatdArray) -> BoolArray: ...
@overload
def NotEqual(arg1: DualQuatdArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: DualQuatdArray) -> BoolArray: ...
@overload
def NotEqual(arg1: DoubleArray, arg2: DoubleArray) -> BoolArray: ...
@overload
def NotEqual(arg1: float, arg2: DoubleArray) -> BoolArray: ...
@overload
def NotEqual(arg1: DoubleArray, arg2: float) -> BoolArray: ...
@overload
def NotEqual(arg1: DoubleArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: DoubleArray) -> BoolArray: ...
@overload
def NotEqual(arg1: DoubleArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: DoubleArray) -> BoolArray: ...
@overload
def NotEqual(arg1: FloatArray, arg2: FloatArray) -> BoolArray: ...
@overload
def NotEqual(arg1: float, arg2: FloatArray) -> BoolArray: ...
@overload
def NotEqual(arg1: FloatArray, arg2: float) -> BoolArray: ...
@overload
def NotEqual(arg1: FloatArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: FloatArray) -> BoolArray: ...
@overload
def NotEqual(arg1: FloatArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: FloatArray) -> BoolArray: ...
@overload
def NotEqual(arg1: HalfArray, arg2: HalfArray) -> BoolArray: ...
@overload
def NotEqual(arg1: object, arg2: HalfArray) -> BoolArray: ...
@overload
def NotEqual(arg1: HalfArray, arg2: object) -> BoolArray: ...
@overload
def NotEqual(arg1: HalfArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: HalfArray) -> BoolArray: ...
@overload
def NotEqual(arg1: HalfArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: HalfArray) -> BoolArray: ...
@overload
def NotEqual(arg1: BoolArray, arg2: BoolArray) -> BoolArray: ...
@overload
def NotEqual(arg1: bool, arg2: BoolArray) -> BoolArray: ...
@overload
def NotEqual(arg1: BoolArray, arg2: bool) -> BoolArray: ...
@overload
def NotEqual(arg1: BoolArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: BoolArray) -> BoolArray: ...
@overload
def NotEqual(arg1: BoolArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: BoolArray) -> BoolArray: ...
@overload
def NotEqual(arg1: CharArray, arg2: CharArray) -> BoolArray: ...
@overload
def NotEqual(arg1: str, arg2: CharArray) -> BoolArray: ...
@overload
def NotEqual(arg1: CharArray, arg2: str) -> BoolArray: ...
@overload
def NotEqual(arg1: CharArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: CharArray) -> BoolArray: ...
@overload
def NotEqual(arg1: CharArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: CharArray) -> BoolArray: ...
@overload
def NotEqual(arg1: UCharArray, arg2: UCharArray) -> BoolArray: ...
@overload
def NotEqual(arg1: int, arg2: UCharArray) -> BoolArray: ...
@overload
def NotEqual(arg1: UCharArray, arg2: int) -> BoolArray: ...
@overload
def NotEqual(arg1: UCharArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: UCharArray) -> BoolArray: ...
@overload
def NotEqual(arg1: UCharArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: UCharArray) -> BoolArray: ...
@overload
def NotEqual(arg1: ShortArray, arg2: ShortArray) -> BoolArray: ...
@overload
def NotEqual(arg1: int, arg2: ShortArray) -> BoolArray: ...
@overload
def NotEqual(arg1: ShortArray, arg2: int) -> BoolArray: ...
@overload
def NotEqual(arg1: ShortArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: ShortArray) -> BoolArray: ...
@overload
def NotEqual(arg1: ShortArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: ShortArray) -> BoolArray: ...
@overload
def NotEqual(arg1: UShortArray, arg2: UShortArray) -> BoolArray: ...
@overload
def NotEqual(arg1: int, arg2: UShortArray) -> BoolArray: ...
@overload
def NotEqual(arg1: UShortArray, arg2: int) -> BoolArray: ...
@overload
def NotEqual(arg1: UShortArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: UShortArray) -> BoolArray: ...
@overload
def NotEqual(arg1: UShortArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: UShortArray) -> BoolArray: ...
@overload
def NotEqual(arg1: IntArray, arg2: IntArray) -> BoolArray: ...
@overload
def NotEqual(arg1: int, arg2: IntArray) -> BoolArray: ...
@overload
def NotEqual(arg1: IntArray, arg2: int) -> BoolArray: ...
@overload
def NotEqual(arg1: IntArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: IntArray) -> BoolArray: ...
@overload
def NotEqual(arg1: IntArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: IntArray) -> BoolArray: ...
@overload
def NotEqual(arg1: UIntArray, arg2: UIntArray) -> BoolArray: ...
@overload
def NotEqual(arg1: int, arg2: UIntArray) -> BoolArray: ...
@overload
def NotEqual(arg1: UIntArray, arg2: int) -> BoolArray: ...
@overload
def NotEqual(arg1: UIntArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: UIntArray) -> BoolArray: ...
@overload
def NotEqual(arg1: UIntArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: UIntArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Int64Array, arg2: Int64Array) -> BoolArray: ...
@overload
def NotEqual(arg1: int, arg2: Int64Array) -> BoolArray: ...
@overload
def NotEqual(arg1: Int64Array, arg2: int) -> BoolArray: ...
@overload
def NotEqual(arg1: Int64Array, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Int64Array) -> BoolArray: ...
@overload
def NotEqual(arg1: Int64Array, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Int64Array) -> BoolArray: ...
@overload
def NotEqual(arg1: UInt64Array, arg2: UInt64Array) -> BoolArray: ...
@overload
def NotEqual(arg1: int, arg2: UInt64Array) -> BoolArray: ...
@overload
def NotEqual(arg1: UInt64Array, arg2: int) -> BoolArray: ...
@overload
def NotEqual(arg1: UInt64Array, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: UInt64Array) -> BoolArray: ...
@overload
def NotEqual(arg1: UInt64Array, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: UInt64Array) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix4fArray, arg2: Matrix4fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Matrix4f, arg2: Matrix4fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix4fArray, arg2: pxr.Gf.Matrix4f) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix4fArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Matrix4fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix4fArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Matrix4fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix3fArray, arg2: Matrix3fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Matrix3f, arg2: Matrix3fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix3fArray, arg2: pxr.Gf.Matrix3f) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix3fArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Matrix3fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix3fArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Matrix3fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix2fArray, arg2: Matrix2fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Matrix2f, arg2: Matrix2fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix2fArray, arg2: pxr.Gf.Matrix2f) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix2fArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Matrix2fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix2fArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Matrix2fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix4dArray, arg2: Matrix4dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Matrix4d, arg2: Matrix4dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix4dArray, arg2: pxr.Gf.Matrix4d) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix4dArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Matrix4dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix4dArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Matrix4dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix3dArray, arg2: Matrix3dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Matrix3d, arg2: Matrix3dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix3dArray, arg2: pxr.Gf.Matrix3d) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix3dArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Matrix3dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix3dArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Matrix3dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix2dArray, arg2: Matrix2dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Matrix2d, arg2: Matrix2dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix2dArray, arg2: pxr.Gf.Matrix2d) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix2dArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Matrix2dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Matrix2dArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Matrix2dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: QuathArray, arg2: QuathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Quath, arg2: QuathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: QuathArray, arg2: pxr.Gf.Quath) -> BoolArray: ...
@overload
def NotEqual(arg1: QuathArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: QuathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: QuathArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: QuathArray) -> BoolArray: ...
@overload
def NotEqual(arg1: QuatfArray, arg2: QuatfArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Quatf, arg2: QuatfArray) -> BoolArray: ...
@overload
def NotEqual(arg1: QuatfArray, arg2: pxr.Gf.Quatf) -> BoolArray: ...
@overload
def NotEqual(arg1: QuatfArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: QuatfArray) -> BoolArray: ...
@overload
def NotEqual(arg1: QuatfArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: QuatfArray) -> BoolArray: ...
@overload
def NotEqual(arg1: QuatdArray, arg2: QuatdArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Quatd, arg2: QuatdArray) -> BoolArray: ...
@overload
def NotEqual(arg1: QuatdArray, arg2: pxr.Gf.Quatd) -> BoolArray: ...
@overload
def NotEqual(arg1: QuatdArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: QuatdArray) -> BoolArray: ...
@overload
def NotEqual(arg1: QuatdArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: QuatdArray) -> BoolArray: ...
@overload
def NotEqual(arg1: QuaternionArray, arg2: QuaternionArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Quaternion, arg2: QuaternionArray) -> BoolArray: ...
@overload
def NotEqual(arg1: QuaternionArray, arg2: pxr.Gf.Quaternion) -> BoolArray: ...
@overload
def NotEqual(arg1: QuaternionArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: QuaternionArray) -> BoolArray: ...
@overload
def NotEqual(arg1: QuaternionArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: QuaternionArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range3fArray, arg2: Range3fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Range3f, arg2: Range3fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range3fArray, arg2: pxr.Gf.Range3f) -> BoolArray: ...
@overload
def NotEqual(arg1: Range3fArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Range3fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range3fArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Range3fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range3dArray, arg2: Range3dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Range3d, arg2: Range3dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range3dArray, arg2: pxr.Gf.Range3d) -> BoolArray: ...
@overload
def NotEqual(arg1: Range3dArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Range3dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range3dArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Range3dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range2fArray, arg2: Range2fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Range2f, arg2: Range2fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range2fArray, arg2: pxr.Gf.Range2f) -> BoolArray: ...
@overload
def NotEqual(arg1: Range2fArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Range2fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range2fArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Range2fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range2dArray, arg2: Range2dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Range2d, arg2: Range2dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range2dArray, arg2: pxr.Gf.Range2d) -> BoolArray: ...
@overload
def NotEqual(arg1: Range2dArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Range2dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range2dArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Range2dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range1fArray, arg2: Range1fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Range1f, arg2: Range1fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range1fArray, arg2: pxr.Gf.Range1f) -> BoolArray: ...
@overload
def NotEqual(arg1: Range1fArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Range1fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range1fArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Range1fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range1dArray, arg2: Range1dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Range1d, arg2: Range1dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range1dArray, arg2: pxr.Gf.Range1d) -> BoolArray: ...
@overload
def NotEqual(arg1: Range1dArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Range1dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Range1dArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Range1dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: IntervalArray, arg2: IntervalArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Interval, arg2: IntervalArray) -> BoolArray: ...
@overload
def NotEqual(arg1: IntervalArray, arg2: pxr.Gf.Interval) -> BoolArray: ...
@overload
def NotEqual(arg1: IntervalArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: IntervalArray) -> BoolArray: ...
@overload
def NotEqual(arg1: IntervalArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: IntervalArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Rect2iArray, arg2: Rect2iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Rect2i, arg2: Rect2iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Rect2iArray, arg2: pxr.Gf.Rect2i) -> BoolArray: ...
@overload
def NotEqual(arg1: Rect2iArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Rect2iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Rect2iArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Rect2iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: StringArray, arg2: StringArray) -> BoolArray: ...
@overload
def NotEqual(arg1: str, arg2: StringArray) -> BoolArray: ...
@overload
def NotEqual(arg1: StringArray, arg2: str) -> BoolArray: ...
@overload
def NotEqual(arg1: StringArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: StringArray) -> BoolArray: ...
@overload
def NotEqual(arg1: StringArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: StringArray) -> BoolArray: ...
@overload
def NotEqual(arg1: TokenArray, arg2: TokenArray) -> BoolArray: ...
@overload
def NotEqual(arg1: object, arg2: TokenArray) -> BoolArray: ...
@overload
def NotEqual(arg1: TokenArray, arg2: object) -> BoolArray: ...
@overload
def NotEqual(arg1: TokenArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: TokenArray) -> BoolArray: ...
@overload
def NotEqual(arg1: TokenArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: TokenArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4iArray, arg2: Vec4iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Vec4i, arg2: Vec4iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4iArray, arg2: pxr.Gf.Vec4i) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4iArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Vec4iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4iArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Vec4iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3iArray, arg2: Vec3iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Vec3i, arg2: Vec3iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3iArray, arg2: pxr.Gf.Vec3i) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3iArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Vec3iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3iArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Vec3iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2iArray, arg2: Vec2iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Vec2i, arg2: Vec2iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2iArray, arg2: pxr.Gf.Vec2i) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2iArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Vec2iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2iArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Vec2iArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4hArray, arg2: Vec4hArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Vec4h, arg2: Vec4hArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4hArray, arg2: pxr.Gf.Vec4h) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4hArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Vec4hArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4hArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Vec4hArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3hArray, arg2: Vec3hArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Vec3h, arg2: Vec3hArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3hArray, arg2: pxr.Gf.Vec3h) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3hArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Vec3hArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3hArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Vec3hArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2hArray, arg2: Vec2hArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Vec2h, arg2: Vec2hArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2hArray, arg2: pxr.Gf.Vec2h) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2hArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Vec2hArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2hArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Vec2hArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4fArray, arg2: Vec4fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Vec4f, arg2: Vec4fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4fArray, arg2: pxr.Gf.Vec4f) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4fArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Vec4fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4fArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Vec4fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3fArray, arg2: Vec3fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Vec3f, arg2: Vec3fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3fArray, arg2: pxr.Gf.Vec3f) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3fArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Vec3fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3fArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Vec3fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2fArray, arg2: Vec2fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Vec2f, arg2: Vec2fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2fArray, arg2: pxr.Gf.Vec2f) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2fArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Vec2fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2fArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Vec2fArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4dArray, arg2: Vec4dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Vec4d, arg2: Vec4dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4dArray, arg2: pxr.Gf.Vec4d) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4dArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Vec4dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec4dArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Vec4dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3dArray, arg2: Vec3dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Vec3d, arg2: Vec3dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3dArray, arg2: pxr.Gf.Vec3d) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3dArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Vec3dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec3dArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Vec3dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2dArray, arg2: Vec2dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: pxr.Gf.Vec2d, arg2: Vec2dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2dArray, arg2: pxr.Gf.Vec2d) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2dArray, arg2: tuple) -> BoolArray: ...
@overload
def NotEqual(arg1: tuple, arg2: Vec2dArray) -> BoolArray: ...
@overload
def NotEqual(arg1: Vec2dArray, arg2: list) -> BoolArray: ...
@overload
def NotEqual(arg1: list, arg2: Vec2dArray) -> BoolArray: ...
def QuatdArrayFromBuffer(arg1: object) -> Any: ...
def QuatfArrayFromBuffer(arg1: object) -> Any: ...
def QuathArrayFromBuffer(arg1: object) -> Any: ...
def Range1dArrayFromBuffer(arg1: object) -> Any: ...
def Range1fArrayFromBuffer(arg1: object) -> Any: ...
def Range2dArrayFromBuffer(arg1: object) -> Any: ...
def Range2fArrayFromBuffer(arg1: object) -> Any: ...
def Range3dArrayFromBuffer(arg1: object) -> Any: ...
def Range3fArrayFromBuffer(arg1: object) -> Any: ...
def Rect2iArrayFromBuffer(arg1: object) -> Any: ...
def Short(value) -> _ValueWrapper: ...
def ShortArrayFromBuffer(arg1: object) -> Any: ...
def Token(*args, **kwargs) -> Any: ...
def UChar(value) -> _ValueWrapper: ...
def UCharArrayFromBuffer(arg1: object) -> Any: ...
def UInt(value) -> _ValueWrapper: ...
def UInt64(value) -> _ValueWrapper: ...
def UInt64ArrayFromBuffer(arg1: object) -> Any: ...
def UIntArrayFromBuffer(arg1: object) -> Any: ...
def ULong(value) -> _ValueWrapper: ...
def UShort(value) -> _ValueWrapper: ...
def UShortArrayFromBuffer(arg1: object) -> Any: ...
def Vec2dArrayFromBuffer(arg1: object) -> Any: ...
def Vec2fArrayFromBuffer(arg1: object) -> Any: ...
def Vec2hArrayFromBuffer(arg1: object) -> Any: ...
def Vec2iArrayFromBuffer(arg1: object) -> Any: ...
def Vec3dArrayFromBuffer(arg1: object) -> Any: ...
def Vec3fArrayFromBuffer(arg1: object) -> Any: ...
def Vec3hArrayFromBuffer(arg1: object) -> Any: ...
def Vec3iArrayFromBuffer(arg1: object) -> Any: ...
def Vec4dArrayFromBuffer(arg1: object) -> Any: ...
def Vec4fArrayFromBuffer(arg1: object) -> Any: ...
def Vec4hArrayFromBuffer(arg1: object) -> Any: ...
def Vec4iArrayFromBuffer(arg1: object) -> Any: ...
def _ReturnDictionary(arg1: object) -> Any: ...
def _test_Ident(arg1: object) -> Any: ...
def _test_Str(arg1: object) -> str: ...
def _test_ValueTypeName(arg1: object) -> str: ...