import Boost.Python
import pxr.Sdf
from typing import Any, ClassVar, overload

BlockStageCachePopulation: StageCacheContextBlockType
BlockStageCaches: StageCacheContextBlockType
InterpolationTypeHeld: InterpolationType
InterpolationTypeLinear: InterpolationType
ListPositionBackOfAppendList: ListPosition
ListPositionBackOfPrependList: ListPosition
ListPositionFrontOfAppendList: ListPosition
ListPositionFrontOfPrependList: ListPosition
LoadWithDescendants: LoadPolicy
LoadWithoutDescendants: LoadPolicy
PrimAllPrimsPredicate: _PrimFlagsPredicate
PrimDefaultPredicate: _PrimFlagsConjunction
PrimHasDefiningSpecifier: _Term
PrimIsAbstract: _Term
PrimIsActive: _Term
PrimIsDefined: _Term
PrimIsGroup: _Term
PrimIsInstance: _Term
PrimIsLoaded: _Term
PrimIsModel: _Term
ResolveInfoSourceDefault: ResolveInfoSource
ResolveInfoSourceFallback: ResolveInfoSource
ResolveInfoSourceNone: ResolveInfoSource
ResolveInfoSourceTimeSamples: ResolveInfoSource
ResolveInfoSourceValueClips: ResolveInfoSource
_NoBlock: StageCacheContextBlockType

class APISchemaBase(SchemaBase):
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list: ...
    @classmethod
    def _GetStaticTfType(cls) -> Type: ...
    def __bool__(self) -> object: ...
    def __reduce__(self) -> Any: ...

class AssetInfoKeys(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def identifier(self) -> Any: ...
    @property
    def name(self) -> Any: ...
    @property
    def payloadAssetDependencies(self) -> Any: ...
    @property
    def version(self) -> Any: ...

class Attribute(Property):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def AddConnection(self, source: Path, position: object = ...) -> bool: ...
    def Block(self) -> None: ...
    def Clear(self) -> bool: ...
    def ClearAtTime(self, time: TimeCode) -> bool: ...
    def ClearColorSpace(self) -> bool: ...
    def ClearConnections(self) -> bool: ...
    def ClearDefault(self) -> bool: ...
    def Get(self, arg1: Attribute, time: TimeCode = ...) -> object: ...
    def GetBracketingTimeSamples(self, desiredTime: float) -> object: ...
    def GetColorSpace(self) -> object: ...
    def GetConnections(self) -> list: ...
    def GetNumTimeSamples(self) -> int: ...
    def GetResolveInfo(self, arg1: Attribute, time: TimeCode) -> ResolveInfo: ...
    def GetRoleName(self) -> object: ...
    def GetTimeSamples(self) -> list: ...
    def GetTimeSamplesInInterval(self, interval: Interval) -> list: ...
    def GetTypeName(self) -> ValueTypeName: ...
    @classmethod
    def GetUnionedTimeSamples(cls, attrs: object) -> list: ...
    @classmethod
    def GetUnionedTimeSamplesInInterval(cls, attrs: object, interval: Interval) -> list: ...
    def GetVariability(self) -> object: ...
    def HasAuthoredConnections(self) -> bool: ...
    def HasAuthoredValue(self) -> bool: ...
    def HasAuthoredValueOpinion(self) -> bool: ...
    def HasColorSpace(self) -> bool: ...
    def HasFallbackValue(self) -> bool: ...
    def HasValue(self) -> bool: ...
    def RemoveConnection(self, source: Path) -> bool: ...
    def Set(self, arg1: Attribute, value: object, time: TimeCode = ...) -> bool: ...
    def SetColorSpace(self, arg2: object) -> None: ...
    def SetConnections(self, sources: object) -> bool: ...
    def SetTypeName(self, typeName: ValueTypeName) -> bool: ...
    def SetVariability(self, variability: object) -> bool: ...
    def ValueMightBeTimeVarying(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class AttributeQuery(Boost.Python.instance):
    @overload
    def __init__(self, attribute: Attribute) -> None: ...
    @overload
    def __init__(self, prim: Prim, attributeName: object) -> None: ...
    @overload
    def __init__(self, attribute: Attribute, resolveTarget: ResolveTarget) -> None: ...
    @classmethod
    def CreateQueries(cls, prim: Prim, attributeNames: object) -> list: ...
    def Get(self, arg1: AttributeQuery, time: TimeCode = ...) -> object: ...
    def GetAttribute(self) -> Attribute: ...
    def GetBracketingTimeSamples(self, desiredTime: float) -> object: ...
    def GetNumTimeSamples(self) -> int: ...
    def GetTimeSamples(self) -> list: ...
    def GetTimeSamplesInInterval(self, interval: Interval) -> list: ...
    @classmethod
    def GetUnionedTimeSamples(cls, attrQueries: object) -> list: ...
    @classmethod
    def GetUnionedTimeSamplesInInterval(cls, attrQueries: object, interval: Interval) -> list: ...
    def HasAuthoredValue(self) -> bool: ...
    def HasAuthoredValueOpinion(self) -> bool: ...
    def HasFallbackValue(self) -> bool: ...
    def HasValue(self) -> bool: ...
    def IsValid(self) -> bool: ...
    def ValueMightBeTimeVarying(self) -> bool: ...
    def __bool__(self) -> object: ...
    def __reduce__(self) -> Any: ...

class ClipsAPI(APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: SchemaBase) -> None: ...
    @overload
    def ComputeClipAssetPaths(self) -> list: ...
    @overload
    def ComputeClipAssetPaths(self, clipSet: object) -> list: ...
    @overload
    def GenerateClipManifest(self, writeBlocksForClipsWithMissingValues: bool = ...) -> Layer: ...
    @overload
    def GenerateClipManifest(self, clipSet: object, writeBlocksForClipsWithMissingValues: bool = ...) -> Layer: ...
    @classmethod
    def GenerateClipManifestFromLayers(cls, clipLayers: object, clipPrimPath: Path) -> Layer: ...
    @classmethod
    def Get(cls, stage: Stage, path: Path) -> ClipsAPI: ...
    @overload
    def GetClipActive(self) -> object: ...
    @overload
    def GetClipActive(self, clipSet: object) -> object: ...
    @overload
    def GetClipAssetPaths(self) -> list: ...
    @overload
    def GetClipAssetPaths(self, clipSet: object) -> list: ...
    @overload
    def GetClipManifestAssetPath(self) -> AssetPath: ...
    @overload
    def GetClipManifestAssetPath(self, clipSet: object) -> AssetPath: ...
    @overload
    def GetClipPrimPath(self) -> str: ...
    @overload
    def GetClipPrimPath(self, clipSet: object) -> str: ...
    def GetClipSets(self) -> StringListOp: ...
    @overload
    def GetClipTemplateActiveOffset(self) -> float: ...
    @overload
    def GetClipTemplateActiveOffset(self, clipSet: object) -> float: ...
    @overload
    def GetClipTemplateAssetPath(self) -> str: ...
    @overload
    def GetClipTemplateAssetPath(self, clipSet: object) -> str: ...
    @overload
    def GetClipTemplateEndTime(self) -> float: ...
    @overload
    def GetClipTemplateEndTime(self, clipSet: object) -> float: ...
    @overload
    def GetClipTemplateStartTime(self) -> float: ...
    @overload
    def GetClipTemplateStartTime(self, clipSet: object) -> float: ...
    @overload
    def GetClipTemplateStride(self) -> float: ...
    @overload
    def GetClipTemplateStride(self, clipSet: object) -> float: ...
    @overload
    def GetClipTimes(self) -> object: ...
    @overload
    def GetClipTimes(self, clipSet: object) -> object: ...
    def GetClips(self) -> object: ...
    @overload
    def GetInterpolateMissingClipValues(self) -> bool: ...
    @overload
    def GetInterpolateMissingClipValues(self, clipSet: object) -> bool: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list: ...
    @overload
    def SetClipActive(self, activeClips: object) -> None: ...
    @overload
    def SetClipActive(self, activeClips: object, clipSet: object) -> None: ...
    @overload
    def SetClipAssetPaths(self, assetPaths: object) -> None: ...
    @overload
    def SetClipAssetPaths(self, assetPaths: object, clipSet: object) -> None: ...
    @overload
    def SetClipManifestAssetPath(self, manifestAssetPath: AssetPath) -> bool: ...
    @overload
    def SetClipManifestAssetPath(self, manifestAssetPath: AssetPath, clipSet: object) -> bool: ...
    @overload
    def SetClipPrimPath(self, primPath: object) -> bool: ...
    @overload
    def SetClipPrimPath(self, primPath: object, clipSet: object) -> bool: ...
    def SetClipSets(self, clipSets: StringListOp) -> bool: ...
    @overload
    def SetClipTemplateActiveOffset(self, clipTemplateActiveOffset: float) -> bool: ...
    @overload
    def SetClipTemplateActiveOffset(self, clipTemplateActiveOffset: float, clipSet: object) -> bool: ...
    @overload
    def SetClipTemplateAssetPath(self, clipTemplateAssetPath: object) -> None: ...
    @overload
    def SetClipTemplateAssetPath(self, clipTemplateAssetPath: object, clipSet: object) -> None: ...
    @overload
    def SetClipTemplateEndTime(self, clipTemplateEndTime: float) -> bool: ...
    @overload
    def SetClipTemplateEndTime(self, clipTemplateEndTime: float, clipSet: object) -> bool: ...
    @overload
    def SetClipTemplateStartTime(self, clipTemplateStartTime: float) -> bool: ...
    @overload
    def SetClipTemplateStartTime(self, clipTemplateStartTime: float, clipSet: object) -> bool: ...
    @overload
    def SetClipTemplateStride(self, clipTemplateStride: float) -> bool: ...
    @overload
    def SetClipTemplateStride(self, clipTemplateStride: float, clipSet: object) -> bool: ...
    @overload
    def SetClipTimes(self, clipTimes: object) -> None: ...
    @overload
    def SetClipTimes(self, clipTimes: object, clipSet: object) -> None: ...
    def SetClips(self, clips: object) -> bool: ...
    @overload
    def SetInterpolateMissingClipValues(self, interpolate: bool) -> bool: ...
    @overload
    def SetInterpolateMissingClipValues(self, interpolate: bool, clipSet: object) -> bool: ...
    @classmethod
    def _GetStaticTfType(cls) -> Type: ...
    def __bool__(self) -> object: ...
    def __reduce__(self) -> Any: ...

class CollectionAPI(APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: Prim, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: SchemaBase, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: Prim, arg3: object) -> None: ...
    @classmethod
    def Apply(cls, prim: Prim, name: object) -> CollectionAPI: ...
    def BlockCollection(self) -> bool: ...
    @classmethod
    def CanApply(cls, prim: Prim, name: object) -> _CanApplyResult: ...
    @classmethod
    def CanContainPropertyName(cls, name: object) -> bool: ...
    @classmethod
    def ComputeIncludedObjects(cls, query: UsdCollectionMembershipQuery, stage: Stage, predicate: _PrimFlagsPredicate = ...) -> list: ...
    @classmethod
    def ComputeIncludedPaths(cls, query: UsdCollectionMembershipQuery, stage: Stage, predicate: _PrimFlagsPredicate = ...) -> list: ...
    def ComputeMembershipQuery(self, arg1: CollectionAPI) -> UsdCollectionMembershipQuery: ...
    def CreateCollectionAttr(self, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateExcludesRel(self) -> Relationship: ...
    def CreateExpansionRuleAttr(self, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateIncludeRootAttr(self, defaultValue: object = ..., writeSparsely: bool = ...) -> Attribute: ...
    def CreateIncludesRel(self) -> Relationship: ...
    def ExcludePath(self, pathToExclude: Path) -> bool: ...
    @overload
    @classmethod
    def Get(cls, stage: Stage, path: Path) -> CollectionAPI: ...
    @overload
    @classmethod
    def Get(cls, prim: Prim, name: object) -> CollectionAPI: ...
    @classmethod
    def GetAll(cls, prim: Prim) -> list: ...
    @classmethod
    def GetAllCollections(cls, prim: Prim) -> list: ...
    @overload
    @classmethod
    def GetCollection(cls, prim: Prim, name: object) -> CollectionAPI: ...
    @overload
    @classmethod
    def GetCollection(cls, stage: Stage, collectionPath: Path) -> CollectionAPI: ...
    def GetCollectionAttr(self) -> Attribute: ...
    def GetCollectionPath(self) -> Path: ...
    def GetExcludesRel(self) -> Relationship: ...
    def GetExpansionRuleAttr(self) -> Attribute: ...
    def GetIncludeRootAttr(self) -> Attribute: ...
    def GetIncludesRel(self) -> Relationship: ...
    def GetName(self) -> object: ...
    @classmethod
    def GetNamedCollectionPath(cls, prim: Prim, collectionName: object) -> Path: ...
    @overload
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list: ...
    @overload
    @classmethod
    def GetSchemaAttributeNames(cls, arg1: bool, includeInherited: object) -> list: ...
    def HasNoIncludedPaths(self) -> bool: ...
    def IncludePath(self, pathToInclude: Path) -> bool: ...
    @classmethod
    def IsCollectionAPIPath(cls, arg1: Path) -> bool: ...
    @classmethod
    def IsSchemaPropertyBaseName(cls, baseName: object) -> bool: ...
    def ResetCollection(self) -> bool: ...
    def Validate(self) -> object: ...
    @classmethod
    def _GetStaticTfType(cls) -> Type: ...
    def __bool__(self) -> object: ...
    def __reduce__(self) -> Any: ...

class CompositionArc(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def GetArcType(self) -> object: ...
    def GetIntroducingLayer(self) -> Layer: ...
    def GetIntroducingListEditor(self) -> tuple: ...
    def GetIntroducingNode(self) -> NodeRef: ...
    def GetIntroducingPrimPath(self) -> Path: ...
    def GetTargetLayer(self) -> Layer: ...
    def GetTargetNode(self) -> NodeRef: ...
    def GetTargetPrimPath(self) -> Path: ...
    def HasSpecs(self) -> bool: ...
    def IsAncestral(self) -> bool: ...
    def IsImplicit(self) -> bool: ...
    def IsIntroducedInRootLayerPrimSpec(self) -> bool: ...
    def IsIntroducedInRootLayerStack(self) -> bool: ...
    def MakeResolveTargetStrongerThan(self, subLayer: Layer = ...) -> ResolveTarget: ...
    def MakeResolveTargetUpTo(self, subLayer: Layer = ...) -> ResolveTarget: ...
    def __reduce__(self) -> Any: ...

class CrateInfo(Boost.Python.instance):
    class Section(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        name: Any
        size: Any
        start: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, name: object, start: int, size: int) -> None: ...
        def __reduce__(self) -> Any: ...
    class SummaryStats(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        numSpecs: Any
        numUniqueFieldSets: Any
        numUniqueFields: Any
        numUniquePaths: Any
        numUniqueStrings: Any
        numUniqueTokens: Any
        def __init__(self) -> None: ...
        def __reduce__(self) -> Any: ...
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def GetFileVersion(self) -> object: ...
    def GetSections(self) -> list: ...
    def GetSoftwareVersion(self) -> object: ...
    def GetSummaryStats(self) -> SummaryStats: ...
    @classmethod
    def Open(cls, fileName: object) -> CrateInfo: ...
    def __bool__(self) -> object: ...
    def __reduce__(self) -> Any: ...

class EditContext(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, stage: Stage, editTarget: EditTarget = ...) -> None: ...
    def __enter__(self) -> EditContext: ...
    def __exit__(self, arg2: object, arg3: object, arg4: object) -> None: ...
    def __reduce__(self) -> Any: ...

class EditTarget(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, layer: Layer, node: NodeRef) -> None: ...
    def ComposeOver(self, weaker: EditTarget) -> EditTarget: ...
    @classmethod
    def ForLocalDirectVariant(cls, layer: Layer, varSelPath: Path) -> EditTarget: ...
    def GetLayer(self, arg1: EditTarget) -> Layer: ...
    def GetMapFunction(self) -> MapFunction: ...
    def GetPrimSpecForScenePath(self, scenePath: Path) -> PrimSpec: ...
    def GetPropertySpecForScenePath(self, scenePath: Path) -> PropertySpec: ...
    def GetSpecForScenePath(self, scenePath: Path) -> PrimSpec: ...
    def IsNull(self) -> bool: ...
    def IsValid(self) -> bool: ...
    def MapToSpecPath(self, scenePath: Path) -> Path: ...
    def __eq__(self, arg2: EditTarget) -> object: ...
    def __ne__(self, arg2: EditTarget) -> object: ...
    def __reduce__(self) -> Any: ...

class Inherits(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def AddInherit(self, primPath: Path, position: object = ...) -> bool: ...
    def ClearInherits(self) -> bool: ...
    def GetAllDirectInherits(self) -> list: ...
    def GetPrim(self, arg1: Inherits) -> Prim: ...
    def RemoveInherit(self, primPath: Path) -> bool: ...
    def SetInherits(self, arg2: object) -> bool: ...
    def __bool__(self) -> object: ...
    def __reduce__(self) -> Any: ...

class InterpolationType(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> object: ...
    def __reduce__(self) -> Any: ...

class ListPosition(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> object: ...
    def __reduce__(self) -> Any: ...

class LoadPolicy(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> object: ...
    def __reduce__(self) -> Any: ...

class ModelAPI(APISchemaBase):
    class KindValidation(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> object: ...
        def __reduce__(self) -> Any: ...
    KindValidationModelHierarchy: ClassVar[KindValidation] = ...
    KindValidationNone: ClassVar[KindValidation] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: SchemaBase) -> None: ...
    @classmethod
    def Get(cls, stage: Stage, path: Path) -> ModelAPI: ...
    def GetAssetIdentifier(self) -> AssetPath: ...
    def GetAssetInfo(self) -> object: ...
    def GetAssetName(self) -> str: ...
    def GetAssetVersion(self) -> str: ...
    def GetKind(self) -> object: ...
    def GetPayloadAssetDependencies(self) -> AssetPathArray: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list: ...
    def IsGroup(self) -> bool: ...
    def IsKind(self, baseKind: object, validation: object = ...) -> bool: ...
    def IsModel(self) -> bool: ...
    def SetAssetIdentifier(self, arg2: AssetPath) -> None: ...
    def SetAssetInfo(self, arg2: object) -> None: ...
    def SetAssetName(self, arg2: object) -> None: ...
    def SetAssetVersion(self, arg2: object) -> None: ...
    def SetKind(self, value: object) -> bool: ...
    def SetPayloadAssetDependencies(self, arg2: AssetPathArray) -> None: ...
    @classmethod
    def _GetStaticTfType(cls) -> Type: ...
    def __bool__(self) -> object: ...
    def __reduce__(self) -> Any: ...

class Notice(Boost.Python.instance):
    class LayerMutingChanged(StageNotice):
        def __init__(self, *args, **kwargs) -> None: ...
        def GetMutedLayers(self) -> list: ...
        def GetUnmutedLayers(self) -> list: ...
        def __reduce__(self) -> Any: ...
    class ObjectsChanged(StageNotice):
        def __init__(self, *args, **kwargs) -> None: ...
        def AffectedObject(self, arg2: Object) -> bool: ...
        def ChangedInfoOnly(self, arg2: Object) -> bool: ...
        @overload
        def GetChangedFields(self, arg2: Object) -> object: ...
        @overload
        def GetChangedFields(self, arg2: Path) -> object: ...
        def GetChangedInfoOnlyPaths(self) -> object: ...
        def GetResyncedPaths(self) -> object: ...
        @overload
        def HasChangedFields(self, arg2: Object) -> bool: ...
        @overload
        def HasChangedFields(self, arg2: Path) -> bool: ...
        def ResyncedObject(self, arg2: Object) -> bool: ...
        def __reduce__(self) -> Any: ...
    class StageContentsChanged(StageNotice):
        def __init__(self, *args, **kwargs) -> None: ...
        def __reduce__(self) -> Any: ...
    class StageEditTargetChanged(StageNotice):
        def __init__(self, *args, **kwargs) -> None: ...
        def __reduce__(self) -> Any: ...
    class StageNotice(pxr.Tf.Notice):
        def __init__(self, *args, **kwargs) -> None: ...
        def GetStage(self) -> Stage: ...
        def __reduce__(self) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class Object(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def ClearAssetInfo(self) -> None: ...
    def ClearAssetInfoByKey(self, keyPath: object) -> None: ...
    def ClearCustomData(self) -> None: ...
    def ClearCustomDataByKey(self, keyPath: object) -> None: ...
    def ClearDisplayName(self) -> bool: ...
    def ClearDocumentation(self) -> bool: ...
    def ClearHidden(self) -> bool: ...
    def ClearMetadata(self, key: object) -> bool: ...
    def ClearMetadataByDictKey(self, key: object, keyPath: object) -> bool: ...
    def GetAllAuthoredMetadata(self) -> dict: ...
    def GetAllMetadata(self) -> dict: ...
    def GetAssetInfo(self) -> object: ...
    def GetAssetInfoByKey(self, keyPath: object) -> object: ...
    def GetCustomData(self) -> object: ...
    def GetCustomDataByKey(self, keyPath: object) -> object: ...
    def GetDescription(self) -> str: ...
    def GetDisplayName(self) -> str: ...
    def GetDocumentation(self) -> str: ...
    def GetMetadata(self, arg1: Object, key: object) -> object: ...
    def GetMetadataByDictKey(self, arg1: Object, key: object, keyPath: object) -> object: ...
    def GetName(self) -> object: ...
    @classmethod
    def GetNamespaceDelimiter(cls) -> str: ...
    def GetPath(self) -> Path: ...
    def GetPrim(self) -> Prim: ...
    def GetPrimPath(self) -> Path: ...
    def GetStage(self) -> Stage: ...
    def HasAssetInfo(self) -> bool: ...
    def HasAssetInfoKey(self, keyPath: object) -> bool: ...
    def HasAuthoredAssetInfo(self) -> bool: ...
    def HasAuthoredAssetInfoKey(self, keyPath: object) -> bool: ...
    def HasAuthoredCustomData(self) -> bool: ...
    def HasAuthoredCustomDataKey(self, keyPath: object) -> bool: ...
    def HasAuthoredDisplayName(self) -> bool: ...
    def HasAuthoredDocumentation(self) -> bool: ...
    def HasAuthoredHidden(self) -> bool: ...
    def HasAuthoredMetadata(self, key: object) -> bool: ...
    def HasAuthoredMetadataDictKey(self, key: object, keyPath: object) -> bool: ...
    def HasCustomData(self) -> bool: ...
    def HasCustomDataKey(self, keyPath: object) -> bool: ...
    def HasMetadata(self, key: object) -> bool: ...
    def HasMetadataDictKey(self, key: object, keyPath: object) -> bool: ...
    def IsHidden(self) -> bool: ...
    def IsValid(self) -> bool: ...
    def SetAssetInfo(self, assetInfo: object) -> None: ...
    def SetAssetInfoByKey(self, keyPath: object, value: object) -> None: ...
    def SetCustomData(self, customData: object) -> None: ...
    def SetCustomDataByKey(self, keyPath: object, value: object) -> None: ...
    def SetDisplayName(self, name: object) -> bool: ...
    def SetDocumentation(self, doc: object) -> bool: ...
    def SetHidden(self, hidden: bool) -> bool: ...
    def SetMetadata(self, arg1: Object, key: object, value: object) -> bool: ...
    def SetMetadataByDictKey(self, arg1: Object, key: object, keyPath: object, value: object) -> bool: ...
    def __bool__(self) -> object: ...
    def __eq__(self, arg2: Object) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: Object) -> object: ...
    def __reduce__(self) -> Any: ...

class Payloads(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def AddInternalPayload(self, primPath: Path, layerOffset: LayerOffset = ..., position: object = ...) -> bool: ...
    @overload
    def AddPayload(self, payload: Payload, position: object = ...) -> bool: ...
    @overload
    def AddPayload(self, assetPath: object, primPath: Path, layerOffset: LayerOffset = ..., position: object = ...) -> bool: ...
    @overload
    def AddPayload(self, assetPath: object, layerOffset: LayerOffset = ..., position: object = ...) -> bool: ...
    def ClearPayloads(self) -> bool: ...
    def GetPrim(self, arg1: Payloads) -> Prim: ...
    def RemovePayload(self, payload: Payload) -> bool: ...
    def SetPayloads(self, arg2: object) -> bool: ...
    def __bool__(self) -> object: ...
    def __reduce__(self) -> Any: ...

class Prim(Object):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def AddAppliedSchema(self, arg2: object) -> bool: ...
    @overload
    def ApplyAPI(self, arg1: Prim, schemaType: Type) -> bool: ...
    @overload
    def ApplyAPI(self, arg1: Prim, schemaType: Type, instanceName: object) -> bool: ...
    @overload
    def ApplyAPI(self, arg1: Prim, schemaIdentifier: object) -> bool: ...
    @overload
    def ApplyAPI(self, arg1: Prim, schemaIdentifier: object, instanceName: object) -> bool: ...
    @overload
    def ApplyAPI(self, arg1: Prim, schemaFamily: object, schemaVersion: int) -> bool: ...
    @overload
    def ApplyAPI(self, arg1: Prim, schemaFamily: object, schemaVersion: int, instanceName: object) -> bool: ...
    @overload
    def CanApplyAPI(self, arg1: Prim, schemaType: Type) -> _CanApplyAPIResult: ...
    @overload
    def CanApplyAPI(self, arg1: Prim, schemaType: Type, instanceName: object) -> _CanApplyAPIResult: ...
    @overload
    def CanApplyAPI(self, arg1: Prim, schemaIdentifier: object) -> _CanApplyAPIResult: ...
    @overload
    def CanApplyAPI(self, arg1: Prim, schemaIdentifier: object, instanceName: object) -> _CanApplyAPIResult: ...
    @overload
    def CanApplyAPI(self, arg1: Prim, schemaFamily: object, schemaVersion: int) -> _CanApplyAPIResult: ...
    @overload
    def CanApplyAPI(self, arg1: Prim, schemaFamily: object, schemaVersion: int, instanceName: object) -> _CanApplyAPIResult: ...
    def ClearActive(self) -> bool: ...
    def ClearChildrenReorder(self) -> None: ...
    def ClearInstanceable(self) -> bool: ...
    def ClearPayload(self) -> bool: ...
    def ClearPropertyOrder(self) -> None: ...
    def ClearTypeName(self) -> bool: ...
    def ComputeExpandedPrimIndex(self) -> PrimIndex: ...
    @overload
    def CreateAttribute(self, arg1: Prim, name: object, typeName: ValueTypeName, custom: bool = ..., variability: object = ...) -> Attribute: ...
    @overload
    def CreateAttribute(self, arg1: Prim, nameElts: object, typeName: ValueTypeName, custom: bool = ..., variability: object = ...) -> Attribute: ...
    @overload
    def CreateRelationship(self, name: object, custom: bool = ...) -> Relationship: ...
    @overload
    def CreateRelationship(self, nameElts: object, custom: bool = ...) -> Relationship: ...
    def FindAllAttributeConnectionPaths(self, predicate: object = ..., recurseOnSources: bool = ...) -> object: ...
    def FindAllRelationshipTargetPaths(self, predicate: object = ..., recurseOnTargets: bool = ...) -> object: ...
    def GetAllChildren(self) -> list: ...
    def GetAllChildrenNames(self) -> list: ...
    def GetAppliedSchemas(self) -> list: ...
    def GetAttribute(self, attrName: object) -> Attribute: ...
    def GetAttributeAtPath(self, path: Path) -> Attribute: ...
    def GetAttributes(self) -> list: ...
    def GetAuthoredAttributes(self) -> list: ...
    def GetAuthoredProperties(self, predicate: object = ...) -> list: ...
    @overload
    def GetAuthoredPropertiesInNamespace(self, namespaces: object) -> list: ...
    @overload
    def GetAuthoredPropertiesInNamespace(self, namespaces: object) -> list: ...
    def GetAuthoredPropertyNames(self, predicate: object = ...) -> list: ...
    def GetAuthoredRelationships(self) -> list: ...
    def GetChild(self, name: object) -> Prim: ...
    def GetChildren(self) -> list: ...
    def GetChildrenNames(self) -> list: ...
    def GetChildrenReorder(self) -> list: ...
    def GetFilteredChildren(self, predicate: _PrimFlagsPredicate) -> list: ...
    def GetFilteredChildrenNames(self, arg2: _PrimFlagsPredicate) -> list: ...
    def GetFilteredNextSibling(self, arg2: _PrimFlagsPredicate) -> Prim: ...
    def GetInherits(self) -> Inherits: ...
    def GetInstances(self) -> list: ...
    def GetNextSibling(self) -> Prim: ...
    def GetObjectAtPath(self, path: Path) -> Object: ...
    def GetParent(self) -> Prim: ...
    def GetPayloads(self) -> Payloads: ...
    def GetPrimAtPath(self, path: Path) -> Prim: ...
    def GetPrimDefinition(self) -> PrimDefinition: ...
    def GetPrimInPrototype(self) -> Prim: ...
    def GetPrimIndex(self) -> PrimIndex: ...
    def GetPrimStack(self) -> object: ...
    def GetPrimStackWithLayerOffsets(self) -> list: ...
    def GetPrimTypeInfo(self) -> PrimTypeInfo: ...
    def GetProperties(self, predicate: object = ...) -> list: ...
    @overload
    def GetPropertiesInNamespace(self, namespaces: object) -> list: ...
    @overload
    def GetPropertiesInNamespace(self, namespaces: object) -> list: ...
    def GetProperty(self, propName: object) -> Property: ...
    def GetPropertyAtPath(self, path: Path) -> Property: ...
    def GetPropertyNames(self, predicate: object = ...) -> list: ...
    def GetPropertyOrder(self) -> list: ...
    def GetPrototype(self) -> Prim: ...
    def GetReferences(self) -> References: ...
    def GetRelationship(self, relName: object) -> Relationship: ...
    def GetRelationshipAtPath(self, path: Path) -> Relationship: ...
    def GetRelationships(self) -> list: ...
    def GetSpecializes(self) -> Specializes: ...
    def GetSpecifier(self) -> object: ...
    def GetTypeName(self) -> object: ...
    def GetVariantSet(self, arg2: object) -> VariantSet: ...
    def GetVariantSets(self) -> VariantSets: ...
    @overload
    def GetVersionIfHasAPIInFamily(self, arg2: object) -> object: ...
    @overload
    def GetVersionIfHasAPIInFamily(self, arg2: object, arg3: object) -> object: ...
    def GetVersionIfIsInFamily(self, arg2: object) -> object: ...
    @overload
    def HasAPI(self, arg1: Prim, schemaType: Type) -> bool: ...
    @overload
    def HasAPI(self, arg1: Prim, schemaType: Type, instanceName: object) -> bool: ...
    @overload
    def HasAPI(self, arg1: Prim, schemaIdentifier: object) -> bool: ...
    @overload
    def HasAPI(self, arg1: Prim, schemaIdentifier: object, instanceName: object) -> bool: ...
    @overload
    def HasAPI(self, arg1: Prim, schemaFamily: object, schemaVersion: int) -> bool: ...
    @overload
    def HasAPI(self, arg1: Prim, schemaFamily: object, schemaVersion: int, instanceName: object) -> bool: ...
    @overload
    def HasAPIInFamily(self, arg1: Prim, schemaType: Type, versionPolicy: VersionPolicy) -> bool: ...
    @overload
    def HasAPIInFamily(self, arg1: Prim, schemaType: Type, versionPolicy: VersionPolicy, instanceName: object) -> bool: ...
    @overload
    def HasAPIInFamily(self, arg1: Prim, schemaFamily: object) -> bool: ...
    @overload
    def HasAPIInFamily(self, arg1: Prim, schemaFamily: object, instanceName: object) -> bool: ...
    @overload
    def HasAPIInFamily(self, arg1: Prim, schemaFamily: object, schemaVersion: int, versionPolicy: VersionPolicy) -> bool: ...
    @overload
    def HasAPIInFamily(self, arg1: Prim, schemaFamily: object, schemaVersion: int, versionPolicy: VersionPolicy, instanceName: object) -> bool: ...
    @overload
    def HasAPIInFamily(self, arg1: Prim, schemaIdentifier: object, versionPolicy: VersionPolicy) -> bool: ...
    @overload
    def HasAPIInFamily(self, arg1: Prim, schemaIdentifier: object, versionPolicy: VersionPolicy, instanceName: object) -> bool: ...
    def HasAttribute(self, attrName: object) -> bool: ...
    def HasAuthoredActive(self) -> bool: ...
    def HasAuthoredInherits(self) -> bool: ...
    def HasAuthoredInstanceable(self) -> bool: ...
    def HasAuthoredPayloads(self) -> bool: ...
    def HasAuthoredReferences(self) -> bool: ...
    def HasAuthoredSpecializes(self) -> bool: ...
    def HasAuthoredTypeName(self) -> bool: ...
    def HasDefiningSpecifier(self) -> bool: ...
    def HasPayload(self) -> bool: ...
    def HasProperty(self, propName: object) -> bool: ...
    def HasRelationship(self, relName: object) -> bool: ...
    def HasVariantSets(self) -> bool: ...
    @overload
    def IsA(self, arg1: Prim, schemaType: Type) -> bool: ...
    @overload
    def IsA(self, arg1: Prim, schemaIdentifier: object) -> bool: ...
    @overload
    def IsA(self, arg1: Prim, schemaFamily: object, version: int) -> bool: ...
    def IsAbstract(self) -> bool: ...
    def IsActive(self) -> bool: ...
    def IsDefined(self) -> bool: ...
    def IsGroup(self) -> bool: ...
    @overload
    def IsInFamily(self, arg1: Prim, schemaFamily: object) -> bool: ...
    @overload
    def IsInFamily(self, arg1: Prim, schemaFamily: object, version: int, versionPolicy: VersionPolicy) -> bool: ...
    @overload
    def IsInFamily(self, arg1: Prim, schemaType: Type, versionPolicy: VersionPolicy) -> bool: ...
    @overload
    def IsInFamily(self, arg1: Prim, schemaIdentifier: object, versionPolicy: VersionPolicy) -> bool: ...
    def IsInPrototype(self) -> bool: ...
    def IsInstance(self) -> bool: ...
    def IsInstanceProxy(self) -> bool: ...
    def IsInstanceable(self) -> bool: ...
    def IsLoaded(self) -> bool: ...
    def IsModel(self) -> bool: ...
    @classmethod
    def IsPathInPrototype(cls, path: Path) -> bool: ...
    def IsPrototype(self) -> bool: ...
    @classmethod
    def IsPrototypePath(cls, path: Path) -> bool: ...
    def IsPseudoRoot(self) -> bool: ...
    def Load(self, policy: object = ...) -> None: ...
    def MakeResolveTargetStrongerThanEditTarget(self, arg2: EditTarget) -> ResolveTarget: ...
    def MakeResolveTargetUpToEditTarget(self, arg2: EditTarget) -> ResolveTarget: ...
    @overload
    def RemoveAPI(self, arg1: Prim, schemaType: Type) -> bool: ...
    @overload
    def RemoveAPI(self, arg1: Prim, schemaType: Type, instanceName: object) -> bool: ...
    @overload
    def RemoveAPI(self, arg1: Prim, schemaIdentifier: object) -> bool: ...
    @overload
    def RemoveAPI(self, arg1: Prim, schemaIdentifier: object, instanceName: object) -> bool: ...
    @overload
    def RemoveAPI(self, arg1: Prim, schemaFamily: object, schemaVersion: int) -> bool: ...
    @overload
    def RemoveAPI(self, arg1: Prim, schemaFamily: object, schemaVersion: int, instanceName: object) -> bool: ...
    def RemoveAppliedSchema(self, arg2: object) -> bool: ...
    def RemoveProperty(self, propName: object) -> bool: ...
    def SetActive(self, active: bool) -> bool: ...
    def SetChildrenReorder(self, order: object) -> None: ...
    def SetInstanceable(self, instanceable: bool) -> bool: ...
    @overload
    def SetPayload(self, payload: Payload) -> bool: ...
    @overload
    def SetPayload(self, assetPath: object, primPath: Path) -> bool: ...
    @overload
    def SetPayload(self, layer: Layer, primPath: Path) -> bool: ...
    def SetPropertyOrder(self, order: object) -> None: ...
    def SetSpecifier(self, specifier: object) -> bool: ...
    def SetTypeName(self, typeName: object) -> bool: ...
    def Unload(self) -> None: ...
    def _GetSourcePrimIndex(self) -> PrimIndex: ...
    def __reduce__(self) -> Any: ...

class PrimCompositionQuery(Boost.Python.instance):
    class ArcIntroducedFilter(Boost.Python.enum):
        All: ClassVar[ArcIntroducedFilter] = ...
        IntroducedInRootLayerPrimSpec: ClassVar[ArcIntroducedFilter] = ...
        IntroducedInRootLayerStack: ClassVar[ArcIntroducedFilter] = ...
        names: ClassVar[dict] = ...
        values: ClassVar[dict] = ...
        __slots__: ClassVar[tuple] = ...
    class ArcTypeFilter(Boost.Python.enum):
        All: ClassVar[ArcTypeFilter] = ...
        Inherit: ClassVar[ArcTypeFilter] = ...
        InheritOrSpecialize: ClassVar[ArcTypeFilter] = ...
        NotInheritOrSpecialize: ClassVar[ArcTypeFilter] = ...
        NotReferenceOrPayload: ClassVar[ArcTypeFilter] = ...
        NotVariant: ClassVar[ArcTypeFilter] = ...
        Payload: ClassVar[ArcTypeFilter] = ...
        Reference: ClassVar[ArcTypeFilter] = ...
        ReferenceOrPayload: ClassVar[ArcTypeFilter] = ...
        Specialize: ClassVar[ArcTypeFilter] = ...
        Variant: ClassVar[ArcTypeFilter] = ...
        names: ClassVar[dict] = ...
        values: ClassVar[dict] = ...
        __slots__: ClassVar[tuple] = ...
    class DependencyTypeFilter(Boost.Python.enum):
        All: ClassVar[DependencyTypeFilter] = ...
        Ancestral: ClassVar[DependencyTypeFilter] = ...
        Direct: ClassVar[DependencyTypeFilter] = ...
        names: ClassVar[dict] = ...
        values: ClassVar[dict] = ...
        __slots__: ClassVar[tuple] = ...
    class Filter(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        arcIntroducedFilter: Any
        arcTypeFilter: Any
        dependencyTypeFilter: Any
        hasSpecsFilter: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self) -> None: ...
        def __eq__(self, arg2: Filter) -> object: ...
        def __ne__(self, arg2: Filter) -> object: ...
        def __reduce__(self) -> Any: ...
    class HasSpecsFilter(Boost.Python.enum):
        All: ClassVar[HasSpecsFilter] = ...
        HasNoSpecs: ClassVar[HasSpecsFilter] = ...
        HasSpecs: ClassVar[HasSpecsFilter] = ...
        names: ClassVar[dict] = ...
        values: ClassVar[dict] = ...
        __slots__: ClassVar[tuple] = ...
    filter: type
    @overload
    def __init__(self, prim: Prim) -> None: ...
    @overload
    def __init__(self, prim: Prim, filter: Filter) -> None: ...
    def GetCompositionArcs(self) -> list: ...
    @classmethod
    def GetDirectInherits(cls, arg1: Prim) -> PrimCompositionQuery: ...
    @classmethod
    def GetDirectReferences(cls, arg1: Prim) -> PrimCompositionQuery: ...
    @classmethod
    def GetDirectRootLayerArcs(cls, arg1: Prim) -> PrimCompositionQuery: ...
    def __reduce__(self) -> Any: ...

class PrimDefinition(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def FlattenTo(self, prim: Prim, newSpecSpecifier: object = ...) -> Prim: ...
    @overload
    def FlattenTo(self, parent: Prim, name: object, newSpecSpecifier: object = ...) -> Prim: ...
    @overload
    def FlattenTo(self, layer: Layer, path: Path, newSpecSpecifier: object = ...) -> bool: ...
    def GetAppliedAPISchemas(self) -> list: ...
    def GetAttributeFallbackValue(self, attrName: PrimDefinition, key: object) -> object: ...
    def GetDocumentation(self) -> str: ...
    def GetMetadata(self, key: object) -> object: ...
    def GetMetadataByDictKey(self, key: object, keyPath: object) -> object: ...
    def GetPropertyDocumentation(self, propName: object) -> str: ...
    def GetPropertyMetadata(self, propName: object, key: object) -> object: ...
    def GetPropertyMetadataByDictKey(self, propName: object, key: object, keyPath: object) -> object: ...
    def GetPropertyNames(self) -> list: ...
    def GetSchemaAttributeSpec(self, attrName: object) -> AttributeSpec: ...
    def GetSchemaPropertySpec(self, propName: object) -> PropertySpec: ...
    def GetSchemaRelationshipSpec(self, relName: object) -> RelationshipSpec: ...
    def ListMetadataFields(self) -> list: ...
    def ListPropertyMetadataFields(self, arg2: object) -> list: ...
    def __reduce__(self) -> Any: ...

class PrimRange(Boost.Python.instance):
    class _Iterator(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def GetCurrentPrim(self) -> Any: ...
        def IsPostVisit(self) -> bool: ...
        def IsValid(self, *args, **kwargs) -> Any: ...
        def PruneChildren(self) -> None: ...
        def __iter__(self) -> _Iterator: ...
        def __next__(self) -> Prim: ...
        def __reduce__(self) -> Any: ...
    @overload
    def __init__(self, root: Prim) -> None: ...
    @overload
    def __init__(self, root: Prim, predicate: _PrimFlagsPredicate) -> None: ...
    @classmethod
    def AllPrims(cls, root: Prim) -> PrimRange: ...
    @classmethod
    def AllPrimsPreAndPostVisit(cls, root: Prim) -> PrimRange: ...
    def IsValid(self, *args, **kwargs) -> Any: ...
    @overload
    @classmethod
    def PreAndPostVisit(cls, root: Prim) -> PrimRange: ...
    @overload
    @classmethod
    def PreAndPostVisit(cls, root: Prim, predicate: _PrimFlagsPredicate) -> PrimRange: ...
    @overload
    @classmethod
    def Stage(cls, stage: Stage) -> PrimRange: ...
    @overload
    @classmethod
    def Stage(cls, stage: Stage, predicate: _PrimFlagsPredicate) -> PrimRange: ...
    def __bool__(self) -> object: ...
    def __eq__(self, arg2: PrimRange) -> object: ...
    def __iter__(self) -> _Iterator: ...
    def __ne__(self, arg2: PrimRange) -> object: ...
    def __reduce__(self) -> Any: ...

class PrimTypeInfo(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def GetAppliedAPISchemas(self) -> list: ...
    @classmethod
    def GetEmptyPrimType(cls) -> PrimTypeInfo: ...
    def GetPrimDefinition(self) -> PrimDefinition: ...
    def GetSchemaType(self) -> Type: ...
    def GetSchemaTypeName(self) -> object: ...
    def GetTypeName(self) -> object: ...
    def __eq__(self, arg2: PrimTypeInfo) -> object: ...
    def __ne__(self, arg2: PrimTypeInfo) -> object: ...
    def __reduce__(self) -> Any: ...

class Property(Object):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def ClearDisplayGroup(self) -> bool: ...
    @overload
    def FlattenTo(self, parent: Prim) -> Property: ...
    @overload
    def FlattenTo(self, parent: Prim, propName: object) -> Property: ...
    @overload
    def FlattenTo(self, property: Property) -> Property: ...
    def GetBaseName(self) -> object: ...
    def GetDisplayGroup(self) -> str: ...
    def GetNamespace(self) -> object: ...
    def GetNestedDisplayGroups(self) -> list: ...
    def GetPropertyStack(self, time: TimeCode = ...) -> object: ...
    def GetPropertyStackWithLayerOffsets(self, time: TimeCode = ...) -> list: ...
    def HasAuthoredDisplayGroup(self) -> bool: ...
    def IsAuthored(self) -> bool: ...
    def IsAuthoredAt(self, editTarget: EditTarget) -> bool: ...
    def IsCustom(self) -> bool: ...
    def IsDefined(self) -> bool: ...
    def SetCustom(self, isCustom: bool) -> bool: ...
    def SetDisplayGroup(self, displayGroup: object) -> bool: ...
    def SetNestedDisplayGroups(self, nestedGroups: object) -> bool: ...
    def SplitName(self) -> list: ...
    def __reduce__(self) -> Any: ...

class References(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def AddInternalReference(self, primPath: Path, layerOffset: LayerOffset = ..., position: object = ...) -> bool: ...
    @overload
    def AddReference(self, ref: Reference, position: object = ...) -> bool: ...
    @overload
    def AddReference(self, assetPath: object, primPath: Path, layerOffset: LayerOffset = ..., position: object = ...) -> bool: ...
    @overload
    def AddReference(self, assetPath: object, layerOffset: LayerOffset = ..., position: object = ...) -> bool: ...
    def ClearReferences(self) -> bool: ...
    def GetPrim(self, arg1: References) -> Prim: ...
    def RemoveReference(self, ref: Reference) -> bool: ...
    def SetReferences(self, arg2: object) -> bool: ...
    def __bool__(self) -> object: ...
    def __reduce__(self) -> Any: ...

class Relationship(Property):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def AddTarget(self, target: Path, position: object = ...) -> bool: ...
    def ClearTargets(self, removeSpec: bool) -> bool: ...
    def GetForwardedTargets(self) -> list: ...
    def GetTargets(self) -> list: ...
    def HasAuthoredTargets(self) -> bool: ...
    def RemoveTarget(self, target: Path) -> bool: ...
    def SetTargets(self, targets: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class ResolveInfo(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def GetNode(self) -> NodeRef: ...
    def GetSource(self) -> object: ...
    def ValueIsBlocked(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class ResolveInfoSource(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> object: ...
    def __reduce__(self) -> Any: ...

class ResolveTarget(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def GetPrimIndex(self) -> object: ...
    def GetStartLayer(self) -> Layer: ...
    def GetStartNode(self) -> NodeRef: ...
    def GetStopLayer(self) -> Layer: ...
    def GetStopNode(self) -> NodeRef: ...
    def IsNull(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class SchemaBase(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: Prim) -> None: ...
    @overload
    def __init__(self, otherSchema: SchemaBase) -> None: ...
    def GetPath(self) -> Path: ...
    def GetPrim(self) -> Prim: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list: ...
    def GetSchemaClassPrimDefinition(self) -> PrimDefinition: ...
    def GetSchemaKind(self) -> SchemaKind: ...
    def IsAPISchema(self) -> bool: ...
    def IsAppliedAPISchema(self) -> bool: ...
    def IsConcrete(self) -> bool: ...
    def IsMultipleApplyAPISchema(self) -> bool: ...
    def IsTyped(self) -> bool: ...
    def __bool__(self) -> object: ...
    def __reduce__(self) -> Any: ...

class SchemaKind(Boost.Python.enum):
    AbstractBase: ClassVar[SchemaKind] = ...
    AbstractTyped: ClassVar[SchemaKind] = ...
    ConcreteTyped: ClassVar[SchemaKind] = ...
    Invalid: ClassVar[SchemaKind] = ...
    MultipleApplyAPI: ClassVar[SchemaKind] = ...
    NonAppliedAPI: ClassVar[SchemaKind] = ...
    SingleApplyAPI: ClassVar[SchemaKind] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class SchemaRegistry(Boost.Python.instance):
    class SchemaInfo(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __reduce__(self) -> Any: ...
        @property
        def family(self) -> Any: ...
        @property
        def identifier(self) -> Any: ...
        @property
        def kind(self) -> Any: ...
        @property
        def type(self) -> Any: ...
        @property
        def version(self) -> Any: ...
    class VersionPolicy(Boost.Python.enum):
        All: ClassVar[VersionPolicy] = ...
        GreaterThan: ClassVar[VersionPolicy] = ...
        GreaterThanOrEqual: ClassVar[VersionPolicy] = ...
        LessThan: ClassVar[VersionPolicy] = ...
        LessThanOrEqual: ClassVar[VersionPolicy] = ...
        names: ClassVar[dict] = ...
        values: ClassVar[dict] = ...
        __slots__: ClassVar[tuple] = ...
    def __init__(self, tupleargs, dictkwds) -> Any: ...
    def BuildComposedPrimDefinition(self, arg2: object, arg3: object) -> PrimDefinition: ...
    def FindAppliedAPIPrimDefinition(self, typeName: object) -> PrimDefinition: ...
    def FindConcretePrimDefinition(self, typeName: object) -> PrimDefinition: ...
    @overload
    @classmethod
    def FindSchemaInfo(cls, schemaType: Type) -> SchemaInfo: ...
    @overload
    @classmethod
    def FindSchemaInfo(cls, schemaIdentifier: object) -> SchemaInfo: ...
    @overload
    @classmethod
    def FindSchemaInfo(cls, schemaFamily: object, schemaVersion: int) -> SchemaInfo: ...
    @overload
    @classmethod
    def FindSchemaInfosInFamily(cls, schemaFamily: object) -> list: ...
    @overload
    @classmethod
    def FindSchemaInfosInFamily(cls, schemaFamily: object, schemaVersion: int, versionPolicy: VersionPolicy) -> list: ...
    @classmethod
    def GetAPISchemaCanOnlyApplyToTypeNames(cls, apiSchemaName: object, instanceName: object = ...) -> list: ...
    @classmethod
    def GetAPISchemaTypeName(cls, schemaType: Type) -> object: ...
    @classmethod
    def GetAPITypeFromSchemaTypeName(cls, typeName: object) -> Type: ...
    @classmethod
    def GetAutoApplyAPISchemas(cls) -> dict: ...
    @classmethod
    def GetConcreteSchemaTypeName(cls, schemaType: Type) -> object: ...
    @classmethod
    def GetConcreteTypeFromSchemaTypeName(cls, typeName: object) -> Type: ...
    def GetEmptyPrimDefinition(self) -> PrimDefinition: ...
    def GetFallbackPrimTypes(self) -> object: ...
    @classmethod
    def GetMultipleApplyNameTemplateBaseName(cls, nameTemplate: object) -> object: ...
    @overload
    @classmethod
    def GetSchemaKind(cls, primType: Type) -> SchemaKind: ...
    @overload
    @classmethod
    def GetSchemaKind(cls, primType: object) -> SchemaKind: ...
    @classmethod
    def GetSchemaTypeName(cls, schemaType: Type) -> object: ...
    @classmethod
    def GetTypeFromName(cls, typeName: object) -> Type: ...
    @classmethod
    def GetTypeFromSchemaTypeName(cls, typeName: object) -> Type: ...
    @classmethod
    def GetTypeNameAndInstance(cls, typeName: object) -> tuple: ...
    @overload
    @classmethod
    def IsAbstract(cls, primType: Type) -> bool: ...
    @overload
    @classmethod
    def IsAbstract(cls, primType: object) -> bool: ...
    @classmethod
    def IsAllowedAPISchemaInstanceName(cls, apiSchemaName: object, instanceName: object) -> bool: ...
    @classmethod
    def IsAllowedSchemaFamily(cls, schemaFamily: object) -> bool: ...
    @classmethod
    def IsAllowedSchemaIdentifier(cls, schemaIdentifier: object) -> bool: ...
    @overload
    @classmethod
    def IsAppliedAPISchema(cls, apiSchemaType: Type) -> bool: ...
    @overload
    @classmethod
    def IsAppliedAPISchema(cls, apiSchemaType: object) -> bool: ...
    @overload
    @classmethod
    def IsConcrete(cls, primType: Type) -> bool: ...
    @overload
    @classmethod
    def IsConcrete(cls, primType: object) -> bool: ...
    @classmethod
    def IsDisallowedField(cls, fieldName: object) -> bool: ...
    @overload
    @classmethod
    def IsMultipleApplyAPISchema(cls, apiSchemaType: Type) -> bool: ...
    @overload
    @classmethod
    def IsMultipleApplyAPISchema(cls, apiSchemaType: object) -> bool: ...
    @classmethod
    def IsMultipleApplyNameTemplate(cls, nameTemplate: object) -> bool: ...
    @classmethod
    def IsTyped(cls, primType: Type) -> bool: ...
    @classmethod
    def MakeMultipleApplyNameInstance(cls, arg1: object, nameTemplate: object) -> object: ...
    @classmethod
    def MakeMultipleApplyNameTemplate(cls, arg1: object, namespacePrefix: object) -> object: ...
    @classmethod
    def MakeSchemaIdentifierForFamilyAndVersion(cls, schemaFamily: object, schemaVersion: int) -> object: ...
    @classmethod
    def ParseSchemaFamilyAndVersionFromIdentifier(cls, schemaIdentifier: object) -> tuple: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def expired(self) -> Any: ...

class Specializes(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def AddSpecialize(self, primPath: Path, position: object = ...) -> bool: ...
    def ClearSpecializes(self) -> bool: ...
    def GetPrim(self, arg1: Specializes) -> Prim: ...
    def RemoveSpecialize(self, primPath: Path) -> bool: ...
    def SetSpecializes(self, arg2: object) -> bool: ...
    def __bool__(self) -> object: ...
    def __reduce__(self) -> Any: ...

class Stage(Boost.Python.instance):
    class InitialLoadSet(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> object: ...
        def __reduce__(self) -> Any: ...
    LoadAll: ClassVar[InitialLoadSet] = ...
    LoadNone: ClassVar[InitialLoadSet] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def ClearDefaultPrim(self) -> None: ...
    def ClearMetadata(self, arg2: object) -> bool: ...
    def ClearMetadataByDictKey(self, arg2: object, arg3: object) -> bool: ...
    def CreateClassPrim(self, rootPrimPath: Path) -> Prim: ...
    @overload
    @classmethod
    def CreateInMemory(cls, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def CreateInMemory(cls, identifier: object, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def CreateInMemory(cls, identifier: object, pathResolverContext: ResolverContext, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def CreateInMemory(cls, identifier: object, sessionLayer: Layer, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def CreateInMemory(cls, identifier: object, sessionLayer: Layer, pathResolverContext: ResolverContext, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def CreateNew(cls, identifier: object, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def CreateNew(cls, identifier: object, sessionLayer: Layer, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def CreateNew(cls, identifier: object, pathResolverContext: ResolverContext, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def CreateNew(cls, identifier: object, sessionLayer: Layer, pathResolverContext: ResolverContext, load: object = ...) -> Stage: ...
    def DefinePrim(self, path: Path, typeName: object = ...) -> Prim: ...
    def ExpandPopulationMask(self, relationshipPredicate: object = ..., attributePredicate: object = ...) -> None: ...
    def Export(self, filename: object, addSourceFileComment: bool = ..., args: dict = ...) -> bool: ...
    def ExportToString(self, addSourceFileComment: bool = ...) -> str: ...
    def FindLoadable(self, rootPath: Path = ...) -> list: ...
    def Flatten(self, addSourceFileComment: bool = ...) -> Layer: ...
    def GetAttributeAtPath(self, path: Path) -> Attribute: ...
    @classmethod
    def GetColorConfigFallbacks(cls) -> object: ...
    def GetColorConfiguration(self) -> AssetPath: ...
    def GetColorManagementSystem(self) -> object: ...
    def GetDefaultPrim(self) -> Prim: ...
    def GetEditTarget(self) -> EditTarget: ...
    @overload
    def GetEditTargetForLocalLayer(self, arg2: int) -> EditTarget: ...
    @overload
    def GetEditTargetForLocalLayer(self, arg2: Layer) -> EditTarget: ...
    def GetEndTimeCode(self) -> float: ...
    def GetFramesPerSecond(self) -> float: ...
    @classmethod
    def GetGlobalVariantFallbacks(cls) -> dict: ...
    def GetInterpolationType(self) -> object: ...
    def GetLayerStack(self, includeSessionLayers: bool = ...) -> list: ...
    def GetLoadRules(self) -> StageLoadRules: ...
    def GetLoadSet(self) -> list: ...
    def GetMetadata(self, arg1: Stage, arg2: object) -> object: ...
    def GetMetadataByDictKey(self, arg1: Stage, arg2: object, arg3: object) -> object: ...
    def GetMutedLayers(self) -> list: ...
    def GetObjectAtPath(self, path: Path) -> Object: ...
    def GetPathResolverContext(self) -> ResolverContext: ...
    def GetPopulationMask(self) -> StagePopulationMask: ...
    def GetPrimAtPath(self, path: Path) -> Prim: ...
    def GetPropertyAtPath(self, path: Path) -> Property: ...
    def GetPrototypes(self) -> list: ...
    def GetPseudoRoot(self) -> Prim: ...
    def GetRelationshipAtPath(self, path: Path) -> Relationship: ...
    def GetRootLayer(self) -> Layer: ...
    def GetSessionLayer(self) -> Layer: ...
    def GetStartTimeCode(self) -> float: ...
    def GetTimeCodesPerSecond(self) -> float: ...
    def GetUsedLayers(self, includeClipLayers: bool = ...) -> list: ...
    def HasAuthoredMetadata(self, arg2: object) -> bool: ...
    def HasAuthoredMetadataDictKey(self, arg2: object, arg3: object) -> bool: ...
    def HasAuthoredTimeCodeRange(self) -> bool: ...
    def HasDefaultPrim(self) -> bool: ...
    def HasLocalLayer(self, layer: Layer) -> bool: ...
    def HasMetadata(self, arg2: object) -> bool: ...
    def HasMetadataDictKey(self, arg2: object, arg3: object) -> bool: ...
    def IsLayerMuted(self, layerIdentifier: object) -> bool: ...
    @classmethod
    def IsSupportedFile(cls, filePath: object) -> bool: ...
    def Load(self, path: Path = ..., policy: object = ...) -> Prim: ...
    def LoadAndUnload(self, loadSet: object, unloadSet: object, policy: object = ...) -> None: ...
    def MuteAndUnmuteLayers(self, muteLayers: object, unmuteLayers: object) -> None: ...
    def MuteLayer(self, layerIdentifier: object) -> None: ...
    @overload
    @classmethod
    def Open(cls, filePath: object, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def Open(cls, filePath: object, pathResolverContext: ResolverContext, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def Open(cls, rootLayer: Layer, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def Open(cls, rootLayer: Layer, sessionLayer: Layer, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def Open(cls, rootLayer: Layer, pathResolverContext: ResolverContext, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def Open(cls, rootLayer: Layer, sessionLayer: Layer, pathResolverContext: ResolverContext, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def OpenMasked(cls, filePath: object, mask: StagePopulationMask, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def OpenMasked(cls, filePath: object, pathResolverContext: ResolverContext, mask: StagePopulationMask, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def OpenMasked(cls, rootLayer: Layer, mask: StagePopulationMask, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def OpenMasked(cls, rootLayer: Layer, sessionLayer: Layer, mask: StagePopulationMask, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def OpenMasked(cls, rootLayer: Layer, pathResolverContext: ResolverContext, mask: StagePopulationMask, load: object = ...) -> Stage: ...
    @overload
    @classmethod
    def OpenMasked(cls, rootLayer: Layer, sessionLayer: Layer, pathResolverContext: ResolverContext, mask: StagePopulationMask, load: object = ...) -> Stage: ...
    def OverridePrim(self, path: Path) -> Prim: ...
    def Reload(self) -> None: ...
    def RemovePrim(self, path: Path) -> bool: ...
    def ResolveIdentifierToEditTarget(self, identifier: object) -> str: ...
    def Save(self) -> None: ...
    def SaveSessionLayers(self) -> None: ...
    @classmethod
    def SetColorConfigFallbacks(cls, colorConfiguration: AssetPath = ..., colorManagementSystem: object = ...) -> None: ...
    def SetColorConfiguration(self, arg2: AssetPath) -> None: ...
    def SetColorManagementSystem(self, arg2: object) -> None: ...
    def SetDefaultPrim(self, prim: Prim) -> None: ...
    def SetEditTarget(self, editTarget: EditTarget) -> None: ...
    def SetEndTimeCode(self, arg2: float) -> None: ...
    def SetFramesPerSecond(self, arg2: float) -> None: ...
    @classmethod
    def SetGlobalVariantFallbacks(cls, arg1: dict) -> None: ...
    def SetInterpolationType(self, arg2: object) -> None: ...
    def SetLoadRules(self, rules: StageLoadRules) -> None: ...
    def SetMetadata(self, arg1: Stage, arg2: object, arg3: object) -> bool: ...
    def SetMetadataByDictKey(self, arg1: Stage, arg2: object, arg3: object, arg4: object) -> bool: ...
    def SetPopulationMask(self, mask: StagePopulationMask) -> None: ...
    def SetStartTimeCode(self, arg2: float) -> None: ...
    def SetTimeCodesPerSecond(self, arg2: float) -> None: ...
    @overload
    def Traverse(self) -> object: ...
    @overload
    def Traverse(self, predicate: _PrimFlagsPredicate) -> object: ...
    def TraverseAll(self) -> object: ...
    def Unload(self, path: Path = ...) -> None: ...
    def UnmuteLayer(self, layerIdentifier: object) -> None: ...
    def WriteFallbackPrimTypes(self) -> None: ...
    def _GetPcpCache(self, arg1: Stage) -> Cache: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __reduce__(self) -> Any: ...
    @property
    def expired(self) -> Any: ...

class StageCache(Boost.Python.instance):
    class Id(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        def __init__(self) -> None: ...
        def FromLongInt(self, val: int) -> Id: ...
        def FromString(self, s: object) -> Id: ...
        def IsValid(self) -> bool: ...
        def ToLongInt(self) -> int: ...
        def ToString(self) -> str: ...
        def __bool__(self) -> object: ...
        def __eq__(self, arg2: Id) -> object: ...
        def __ge__(self, arg2: Id) -> object: ...
        def __gt__(self, arg2: Id) -> object: ...
        def __hash__(self) -> int: ...
        def __le__(self, arg2: Id) -> object: ...
        def __lt__(self, arg2: Id) -> object: ...
        def __ne__(self, arg2: Id) -> object: ...
        def __reduce__(self) -> Any: ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: StageCache) -> None: ...
    def Clear(self) -> None: ...
    @overload
    def Contains(self, stage: Stage) -> bool: ...
    @overload
    def Contains(self, id: Id) -> bool: ...
    @overload
    def Erase(self, id: Id) -> bool: ...
    @overload
    def Erase(self, stage: object) -> bool: ...
    @overload
    def EraseAll(self, rootLayer: Layer) -> int: ...
    @overload
    def EraseAll(self, rootLayer: Layer, sessionLayer: Layer) -> int: ...
    @overload
    def EraseAll(self, rootLayer: Layer, sessionLayer: Layer, pathResolverContext: ResolverContext) -> int: ...
    def Find(self, id: Id) -> object: ...
    @overload
    def FindAllMatching(self, rootLayer: Layer) -> list: ...
    @overload
    def FindAllMatching(self, rootLayer: Layer, sessionLayer: Layer) -> list: ...
    @overload
    def FindAllMatching(self, rootLayer: Layer, pathResolverContext: ResolverContext) -> list: ...
    @overload
    def FindAllMatching(self, rootLayer: Layer, sessionLayer: Layer, pathResolverContext: ResolverContext) -> list: ...
    @overload
    def FindOneMatching(self, rootLayer: Layer) -> object: ...
    @overload
    def FindOneMatching(self, rootLayer: Layer, sessionLayer: Layer) -> object: ...
    @overload
    def FindOneMatching(self, rootLayer: Layer, pathResolverContext: ResolverContext) -> object: ...
    @overload
    def FindOneMatching(self, rootLayer: Layer, sessionLayer: Layer, pathResolverContext: ResolverContext) -> object: ...
    def GetAllStages(self) -> list: ...
    def GetDebugName(self) -> str: ...
    def GetId(self, stage: Stage) -> Id: ...
    def Insert(self, stage: object) -> Id: ...
    def IsEmpty(self) -> bool: ...
    def SetDebugName(self, arg2: object) -> None: ...
    def Size(self) -> int: ...
    def swap(self, arg2: StageCache) -> None: ...
    def __reduce__(self) -> Any: ...

class StageCacheContext(Boost.Python.instance):
    @overload
    def __init__(self, arg2: _NonPopulatingStageCacheWrapper) -> None: ...
    @overload
    def __init__(self, arg2: StageCache) -> None: ...
    @overload
    def __init__(self, arg2: object) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, arg2: object, arg3: object, arg4: object) -> None: ...
    def __reduce__(self) -> Any: ...

class StageCacheContextBlockType(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def GetValueFromName(self, name: object) -> object: ...
    def __reduce__(self) -> Any: ...

class StageLoadRules(Boost.Python.instance):
    class Rule(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def GetValueFromName(self, name: object) -> object: ...
        def __reduce__(self) -> Any: ...
    AllRule: ClassVar[Rule] = ...
    NoneRule: ClassVar[Rule] = ...
    OnlyRule: ClassVar[Rule] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: StageLoadRules) -> None: ...
    def AddRule(self, path: Path, rule: object) -> None: ...
    def GetEffectiveRuleForPath(self, path: Path) -> object: ...
    def GetRules(self) -> list: ...
    def IsLoaded(self, path: Path) -> bool: ...
    def IsLoadedWithAllDescendants(self, path: Path) -> bool: ...
    def IsLoadedWithNoDescendants(self, path: Path) -> bool: ...
    @classmethod
    def LoadAll(cls) -> StageLoadRules: ...
    def LoadAndUnload(self, loadSet: object, unloadSet: object, policy: object) -> None: ...
    @classmethod
    def LoadNone(cls) -> StageLoadRules: ...
    def LoadWithDescendants(self, path: Path) -> None: ...
    def LoadWithoutDescendants(self, path: Path) -> None: ...
    def Minimize(self) -> None: ...
    def SetRules(self, arg1: StageLoadRules, rules: object) -> None: ...
    def Unload(self, path: Path) -> None: ...
    def swap(self, other: StageLoadRules) -> None: ...
    def __eq__(self, arg2: StageLoadRules) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: StageLoadRules) -> object: ...
    def __reduce__(self) -> Any: ...

class StagePopulationMask(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: object) -> None: ...
    @overload
    def Add(self, arg2: StagePopulationMask) -> StagePopulationMask: ...
    @overload
    def Add(self, arg2: Path) -> StagePopulationMask: ...
    @classmethod
    def All(cls) -> StagePopulationMask: ...
    def GetIncludedChildNames(self, path: Path) -> tuple: ...
    def GetIntersection(self, other: StagePopulationMask) -> StagePopulationMask: ...
    def GetPaths(self) -> object: ...
    @overload
    def GetUnion(self, other: StagePopulationMask) -> StagePopulationMask: ...
    @overload
    def GetUnion(self, path: Path) -> StagePopulationMask: ...
    @overload
    def Includes(self, other: StagePopulationMask) -> bool: ...
    @overload
    def Includes(self, path: Path) -> bool: ...
    def IncludesSubtree(self, path: Path) -> bool: ...
    @classmethod
    def Intersection(cls, arg1: StagePopulationMask, arg2: StagePopulationMask) -> StagePopulationMask: ...
    def IsEmpty(self) -> bool: ...
    @classmethod
    def Union(cls, arg1: StagePopulationMask, arg2: StagePopulationMask) -> StagePopulationMask: ...
    def __eq__(self, arg2: StagePopulationMask) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: StagePopulationMask) -> object: ...
    def __reduce__(self) -> Any: ...

class TimeCode(Boost.Python.instance):
    class Tokens(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __reduce__(self) -> Any: ...
        @property
        def DEFAULT(self) -> Any: ...
        @property
        def EARLIEST(self) -> Any: ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: float) -> None: ...
    @overload
    def __init__(self, arg2: TimeCode) -> None: ...
    @overload
    def __init__(self, arg2: TimeCode) -> None: ...
    @classmethod
    def Default(cls) -> TimeCode: ...
    @classmethod
    def EarliestTime(cls) -> TimeCode: ...
    def GetValue(self) -> float: ...
    def IsDefault(self) -> bool: ...
    def IsEarliestTime(self) -> bool: ...
    def IsNumeric(self) -> bool: ...
    @classmethod
    def SafeStep(cls, maxValue: float = ..., maxCompression: float = ...) -> float: ...
    def __eq__(self, arg2: TimeCode) -> object: ...
    def __ge__(self, arg2: TimeCode) -> object: ...
    def __gt__(self, arg2: TimeCode) -> object: ...
    def __hash__(self) -> int: ...
    def __le__(self, arg2: TimeCode) -> object: ...
    def __lt__(self, arg2: TimeCode) -> object: ...
    def __ne__(self, arg2: TimeCode) -> object: ...
    def __reduce__(self) -> Any: ...

class Tokens(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    @property
    def APISchemaBase(self) -> Any: ...
    @property
    def ClipsAPI(self) -> Any: ...
    @property
    def CollectionAPI(self) -> Any: ...
    @property
    def ModelAPI(self) -> Any: ...
    @property
    def Typed(self) -> Any: ...
    @property
    def apiSchemas(self) -> Any: ...
    @property
    def clipSets(self) -> Any: ...
    @property
    def clips(self) -> Any: ...
    @property
    def collection(self) -> Any: ...
    @property
    def collection_MultipleApplyTemplate_(self) -> Any: ...
    @property
    def collection_MultipleApplyTemplate_Excludes(self) -> Any: ...
    @property
    def collection_MultipleApplyTemplate_ExpansionRule(self) -> Any: ...
    @property
    def collection_MultipleApplyTemplate_IncludeRoot(self) -> Any: ...
    @property
    def collection_MultipleApplyTemplate_Includes(self) -> Any: ...
    @property
    def exclude(self) -> Any: ...
    @property
    def expandPrims(self) -> Any: ...
    @property
    def expandPrimsAndProperties(self) -> Any: ...
    @property
    def explicitOnly(self) -> Any: ...
    @property
    def fallbackPrimTypes(self) -> Any: ...

class Typed(SchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, prim: Prim) -> None: ...
    @overload
    def __init__(self, schemaObj: SchemaBase) -> None: ...
    @classmethod
    def Get(cls, stage: Stage, path: Path) -> Typed: ...
    @classmethod
    def GetSchemaAttributeNames(cls, includeInherited: bool = ...) -> list: ...
    @classmethod
    def _GetStaticTfType(cls) -> Type: ...
    def __bool__(self) -> object: ...
    def __reduce__(self) -> Any: ...

class UsdCollectionMembershipQuery(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def GetAsPathExpansionRuleMap(self) -> dict: ...
    def GetIncludedCollections(self) -> list: ...
    def HasExcludes(self) -> bool: ...
    @overload
    def IsPathIncluded(self, path: Path) -> bool: ...
    @overload
    def IsPathIncluded(self, path: Path, parentExpansionRule: object) -> bool: ...
    def __eq__(self, arg2: UsdCollectionMembershipQuery) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: UsdCollectionMembershipQuery) -> object: ...
    def __reduce__(self) -> Any: ...

class UsdFileFormat(pxr.Sdf.FileFormat):
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def GetUnderlyingFormatForLayer(cls, arg1: Layer) -> object: ...
    def __reduce__(self) -> Any: ...

class VariantSet(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def AddVariant(self, variantName: object, position: object = ...) -> bool: ...
    def BlockVariantSelection(self) -> bool: ...
    def ClearVariantSelection(self) -> bool: ...
    def GetName(self) -> str: ...
    def GetPrim(self) -> Prim: ...
    def GetVariantEditContext(self, layer: Layer = ...) -> EditContext: ...
    def GetVariantEditTarget(self, layer: Layer = ...) -> EditTarget: ...
    def GetVariantNames(self) -> list: ...
    def GetVariantSelection(self) -> str: ...
    def HasAuthoredVariant(self, arg2: object) -> bool: ...
    def HasAuthoredVariantSelection(self) -> object: ...
    def IsValid(self) -> bool: ...
    def SetVariantSelection(self, variantName: object) -> bool: ...
    def __bool__(self) -> object: ...
    def __reduce__(self) -> Any: ...

class VariantSets(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def AddVariantSet(self, variantSetName: object, position: object = ...) -> VariantSet: ...
    def GetAllVariantSelections(self) -> dict: ...
    def GetNames(self, arg1: VariantSets) -> list: ...
    def GetVariantSelection(self, variantSetName: object) -> str: ...
    def GetVariantSet(self, variantSetName: object) -> VariantSet: ...
    def HasVariantSet(self, variantSetName: object) -> bool: ...
    def SetSelection(self, variantSetName: object, variantName: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class ZipFile(Boost.Python.instance):
    class FileInfo(Boost.Python.instance):
        def __init__(self, *args, **kwargs) -> None: ...
        def __reduce__(self) -> Any: ...
        @property
        def compressionMethod(self) -> Any: ...
        @property
        def dataOffset(self) -> Any: ...
        @property
        def encrypted(self) -> Any: ...
        @property
        def size(self) -> Any: ...
        @property
        def uncompressedSize(self) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def DumpContents(self) -> None: ...
    def GetFile(self, path: object) -> object: ...
    def GetFileInfo(self, path: object) -> object: ...
    def GetFileNames(self) -> list: ...
    @classmethod
    def Open(cls, filePath: object) -> object: ...
    def __reduce__(self) -> Any: ...

class ZipFileWriter(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def AddFile(self, filePath: object, filePathInArchive: object = ...) -> str: ...
    @classmethod
    def CreateNew(cls, filePath: object) -> ZipFileWriter: ...
    def Discard(self) -> None: ...
    def Save(self) -> bool: ...
    def __enter__(self) -> ZipFileWriter: ...
    def __exit__(self, arg2: object, arg3: object, arg4: object) -> None: ...
    def __reduce__(self) -> Any: ...

class _CanApplyAPIResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: bool, arg3: object) -> None: ...
    def __bool__(self) -> bool: ...
    @overload
    def __eq__(self, arg2: bool) -> object: ...
    @overload
    def __eq__(self, arg2: bool) -> object: ...
    def __getitem__(self, arg2: int) -> object: ...
    @overload
    def __ne__(self, arg2: bool) -> object: ...
    @overload
    def __ne__(self, arg2: bool) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: bool, arg3: object) -> None: ...
    def __bool__(self) -> bool: ...
    @overload
    def __eq__(self, arg2: bool) -> object: ...
    @overload
    def __eq__(self, arg2: bool) -> object: ...
    def __getitem__(self, arg2: int) -> object: ...
    @overload
    def __ne__(self, arg2: bool) -> object: ...
    @overload
    def __ne__(self, arg2: bool) -> object: ...
    def __reduce__(self) -> Any: ...
    @property
    def whyNot(self) -> Any: ...

class _NonPopulatingStageCacheWrapper(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class _PrimFlagsConjunction(_PrimFlagsPredicate):
    def __init__(self, *args, **kwargs) -> None: ...
    def __and__(self, arg2: _Term) -> object: ...
    def __iand__(self, arg2: _Term) -> object: ...
    def __invert__(self) -> object: ...
    def __rand__(self, arg2: _Term) -> object: ...
    def __reduce__(self) -> Any: ...

class _PrimFlagsDisjunction(_PrimFlagsPredicate):
    def __init__(self, *args, **kwargs) -> None: ...
    def __invert__(self) -> object: ...
    def __ior__(self, arg2: _Term) -> object: ...
    def __or__(self, arg2: _Term) -> object: ...
    def __reduce__(self) -> Any: ...
    def __ror__(self, arg2: _Term) -> object: ...

class _PrimFlagsPredicate(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def Contradiction(self) -> _PrimFlagsPredicate: ...
    def Tautology(self) -> _PrimFlagsPredicate: ...
    def __call__(self, arg2: Prim) -> bool: ...
    def __eq__(self, arg2: _PrimFlagsPredicate) -> object: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg2: _PrimFlagsPredicate) -> object: ...
    def __reduce__(self) -> Any: ...

class _Term(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __and__(self, arg2: _Term) -> object: ...
    def __eq__(self, arg2: _Term) -> object: ...
    def __hash__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __ne__(self, arg2: _Term) -> object: ...
    def __or__(self, arg2: _Term) -> object: ...
    def __reduce__(self) -> Any: ...

def ComputeIncludedObjectsFromCollection(query: UsdCollectionMembershipQuery, stage: Stage, predicate: _PrimFlagsPredicate = ...) -> list: ...
def ComputeIncludedPathsFromCollection(query: UsdCollectionMembershipQuery, stage: Stage, predicate: _PrimFlagsPredicate = ...) -> list: ...
@overload
def Describe(arg1: Object) -> str: ...
@overload
def Describe(arg1: Stage) -> str: ...
@overload
def Describe(arg1: StageCache) -> str: ...
@overload
def FlattenLayerStack(layerStack: object, tag: object = ...) -> Layer: ...
@overload
def FlattenLayerStack(layerStack: object, resolveAssetPathFn: object, tag: object = ...) -> Layer: ...
def FlattenLayerStackResolveAssetPath(sourceLayer: Layer, assetPath: object) -> str: ...
def GetMajorVersion(*args, **kwargs) -> Any: ...
def GetMinorVersion(*args, **kwargs) -> Any: ...
def GetPatchVersion(*args, **kwargs) -> Any: ...
def GetVersion(*args, **kwargs) -> Any: ...
@overload
def TraverseInstanceProxies() -> _PrimFlagsPredicate: ...
@overload
def TraverseInstanceProxies(predicate: _PrimFlagsPredicate) -> _PrimFlagsPredicate: ...
def UseButDoNotPopulateCache(arg1: StageCache) -> _NonPopulatingStageCacheWrapper: ...
def _TestPrimRangeRoundTrip(arg1: object) -> object: ...
def _UnsafeGetStageForTesting(arg1: Object) -> Stage: ...