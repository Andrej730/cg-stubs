import mari as Mari
import PySide2.QtCore
from typing import Any, ClassVar

ModoRender: Mari.Palette
TextureSetsPalette: Mari.Palette
_ref_holder: list
actions: Mari.ActionManager
app: Mari.Application
canvases: Mari.CanvasManager
clock: Mari.Clock
colors: Mari.Colors
ddi: Mari.DDI
environ: Mari.Environment
event: Mari.Event
exports: Mari.ExportManager
geo: Mari.GeoManager
gl_render: Mari.GLRender
history: Mari.History
images: Mari.ImageManager
lights: Mari.LightManager
menus: Mari.MenuManager
misc: Mari.Miscellaneous
nodes: Mari.NodeManager
ocio: Mari.OpenColorIO
palettes: Mari.PaletteManager
particle: Mari.Particle
patch_links: Mari.PatchLinksManager
prefs: Mari.Preferences
projection: Mari.ProjectionManager
projectors: Mari.ProjectorManager
projects: Mari.ProjectManager
resources: Mari.ResourceInfo
selection_groups: Mari.SelectionGroupManager
shader_models: Mari.ShaderModelManager
shelves: Mari.ShelfManager
tools: Mari.ToolManager

class API(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def isNull(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Action(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    triggered: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addToSet(self, *args, **kwargs) -> Any: ...
    def iconPath(self, *args, **kwargs) -> Any: ...
    def isCheckable(self, *args, **kwargs) -> Any: ...
    def isChecked(self, *args, **kwargs) -> Any: ...
    def isEnabled(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def path(self, *args, **kwargs) -> Any: ...
    def removeFromSet(self, *args, **kwargs) -> Any: ...
    def removeShortcut(self, *args, **kwargs) -> Any: ...
    def setCheckable(self, *args, **kwargs) -> Any: ...
    def setChecked(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setIconPath(self, *args, **kwargs) -> Any: ...
    def setShortcut(self, *args, **kwargs) -> Any: ...
    def setStatusTip(self, *args, **kwargs) -> Any: ...
    def setText(self, *args, **kwargs) -> Any: ...
    def setToolTip(self, *args, **kwargs) -> Any: ...
    def setWhatsThis(self, *args, **kwargs) -> Any: ...
    def shortcut(self, *args, **kwargs) -> Any: ...
    def statusTip(self, *args, **kwargs) -> Any: ...
    def text(self, *args, **kwargs) -> Any: ...
    def toolTip(self, *args, **kwargs) -> Any: ...
    def trigger(self, *args, **kwargs) -> Any: ...
    def whatsThis(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ActionManager(Mari.API):
    class ShortcutGroup:
        APPLICATION: ClassVar[Mari.ActionManager.ShortcutGroup] = ...
        NODE_GRAPH: ClassVar[Mari.ActionManager.ShortcutGroup] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    APPLICATION: ClassVar[Mari.ActionManager.ShortcutGroup] = ...
    NODE_GRAPH: ClassVar[Mari.ActionManager.ShortcutGroup] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def actionFromShortcut(self, *args, **kwargs) -> Any: ...
    def addToSet(self, *args, **kwargs) -> Any: ...
    def create(self, *args, **kwargs) -> Any: ...
    def disableSet(self, *args, **kwargs) -> Any: ...
    def enableSet(self, *args, **kwargs) -> Any: ...
    def find(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def list(self, *args, **kwargs) -> Any: ...
    def loadUserShortcuts(self, *args, **kwargs) -> Any: ...
    def removeFromSet(self, *args, **kwargs) -> Any: ...
    def removeShortcut(self, *args, **kwargs) -> Any: ...
    def removeShortcuts(self, *args, **kwargs) -> Any: ...
    def setShortcut(self, *args, **kwargs) -> Any: ...
    def sets(self, *args, **kwargs) -> Any: ...
    def shortcut(self, *args, **kwargs) -> Any: ...
    def shortcutIsInUse(self, *args, **kwargs) -> Any: ...
    def shortcuts(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class AdjustableLayer(Mari.Layer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def adjustmentStack(self, *args, **kwargs) -> Any: ...
    def hasAdjustmentStack(self, *args, **kwargs) -> Any: ...
    def isAdjustmentStackEnabled(self, *args, **kwargs) -> Any: ...
    def makeAdjustmentStack(self, *args, **kwargs) -> Any: ...
    def removeAdjustmentStack(self, *args, **kwargs) -> Any: ...
    def setAdjustmentStackEnabled(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class AdjustmentLayer(Mari.Layer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getPrimaryAdjustmentParameter(self, *args, **kwargs) -> Any: ...
    def getPrimaryAdjustmentParameterAsImage(self, *args, **kwargs) -> Any: ...
    def getSecondaryAdjustmentParameter(self, *args, **kwargs) -> Any: ...
    def getSecondaryAdjustmentParameterAsImage(self, *args, **kwargs) -> Any: ...
    def hasSecondaryAdjustment(self, *args, **kwargs) -> Any: ...
    def makeSecondaryAdjustment(self, *args, **kwargs) -> Any: ...
    def primaryAdjustmentParameters(self, *args, **kwargs) -> Any: ...
    def primaryAdjustmentType(self, *args, **kwargs) -> Any: ...
    def removeSecondaryAdjustment(self, *args, **kwargs) -> Any: ...
    def secondaryAdjustmentParameters(self, *args, **kwargs) -> Any: ...
    def secondaryAdjustmentType(self, *args, **kwargs) -> Any: ...
    def setPrimaryAdjustmentParameter(self, *args, **kwargs) -> Any: ...
    def setSecondaryAdjustmentParameter(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class AppVersion(Mari.API):
    class Stage:
        ALPHA: ClassVar[Mari.AppVersion.Stage] = ...
        BETA: ClassVar[Mari.AppVersion.Stage] = ...
        DEV: ClassVar[Mari.AppVersion.Stage] = ...
        RELEASE: ClassVar[Mari.AppVersion.Stage] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    ALPHA: ClassVar[Mari.AppVersion.Stage] = ...
    BETA: ClassVar[Mari.AppVersion.Stage] = ...
    DEV: ClassVar[Mari.AppVersion.Stage] = ...
    RELEASE: ClassVar[Mari.AppVersion.Stage] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def date(self, *args, **kwargs) -> Any: ...
    def feature(self, *args, **kwargs) -> Any: ...
    def info(self, *args, **kwargs) -> Any: ...
    def isLinux(self, *args, **kwargs) -> Any: ...
    def isMac(self, *args, **kwargs) -> Any: ...
    def isWindows(self, *args, **kwargs) -> Any: ...
    def iteration(self, *args, **kwargs) -> Any: ...
    def major(self, *args, **kwargs) -> Any: ...
    def minor(self, *args, **kwargs) -> Any: ...
    def number(self, *args, **kwargs) -> Any: ...
    def qt(self, *args, **kwargs) -> Any: ...
    def revision(self, *args, **kwargs) -> Any: ...
    def stage(self, *args, **kwargs) -> Any: ...
    def string(self, *args, **kwargs) -> Any: ...
    def time(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Application(Mari.API):
    class DropTargetArea:
        CANVAS: ClassVar[Mari.Application.DropTargetArea] = ...
        IMAGE_MANAGER: ClassVar[Mari.Application.DropTargetArea] = ...
        LAYER_STACK: ClassVar[Mari.Application.DropTargetArea] = ...
        NODE_GRAPH: ClassVar[Mari.Application.DropTargetArea] = ...
        SHELF: ClassVar[Mari.Application.DropTargetArea] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class ToolBarArea:
        BOTTOM_TOOLBAR_AREA: ClassVar[Mari.Application.ToolBarArea] = ...
        LEFT_TOOLBAR_AREA: ClassVar[Mari.Application.ToolBarArea] = ...
        RIGHT_TOOLBAR_AREA: ClassVar[Mari.Application.ToolBarArea] = ...
        TOP_TOOLBAR_AREA: ClassVar[Mari.Application.ToolBarArea] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    BOTTOM_TOOLBAR_AREA: ClassVar[Mari.Application.ToolBarArea] = ...
    CANVAS: ClassVar[Mari.Application.DropTargetArea] = ...
    IMAGE_MANAGER: ClassVar[Mari.Application.DropTargetArea] = ...
    LAYER_STACK: ClassVar[Mari.Application.DropTargetArea] = ...
    LEFT_TOOLBAR_AREA: ClassVar[Mari.Application.ToolBarArea] = ...
    NODE_GRAPH: ClassVar[Mari.Application.DropTargetArea] = ...
    RIGHT_TOOLBAR_AREA: ClassVar[Mari.Application.ToolBarArea] = ...
    SHELF: ClassVar[Mari.Application.DropTargetArea] = ...
    TOP_TOOLBAR_AREA: ClassVar[Mari.Application.ToolBarArea] = ...
    autosaveReset: ClassVar[PySide2.QtCore.Signal] = ...
    autosaveTriggered: ClassVar[PySide2.QtCore.Signal] = ...
    backgroundJobsRunning: ClassVar[PySide2.QtCore.Signal] = ...
    canceledProcessing: ClassVar[PySide2.QtCore.Signal] = ...
    endingProcessing: ClassVar[PySide2.QtCore.Signal] = ...
    exiting: ClassVar[PySide2.QtCore.Signal] = ...
    fullScreenChanging: ClassVar[PySide2.QtCore.Signal] = ...
    layoutLoaded: ClassVar[PySide2.QtCore.Signal] = ...
    layoutSaved: ClassVar[PySide2.QtCore.Signal] = ...
    onProgress: ClassVar[PySide2.QtCore.Signal] = ...
    progressDescriptionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    startingProcessing: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    toolBarsCreated: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def activateMainWindow(self, *args, **kwargs) -> Any: ...
    def addTab(self, *args, **kwargs) -> Any: ...
    def backgroundJobCaption(self, *args, **kwargs) -> Any: ...
    def backgroundJobIDs(self, *args, **kwargs) -> Any: ...
    def canvasHeight(self, *args, **kwargs) -> Any: ...
    def canvasWidth(self, *args, **kwargs) -> Any: ...
    def captureDesktop(self, *args, **kwargs) -> Any: ...
    def clearScriptOutput(self, *args, **kwargs) -> Any: ...
    def commandPortEnabled(self, *args, **kwargs) -> Any: ...
    def commandPortNumber(self, *args, **kwargs) -> Any: ...
    def createCustomDisplayWidget(self, *args, **kwargs) -> Any: ...
    def createToolBar(self, *args, **kwargs) -> Any: ...
    def currentMeshPathInGeoLoader(self, *args, **kwargs) -> Any: ...
    def decryptString(self, *args, **kwargs) -> Any: ...
    def deleteToolBar(self, *args, **kwargs) -> Any: ...
    def enableCommandPort(self, *args, **kwargs) -> Any: ...
    def encryptString(self, *args, **kwargs) -> Any: ...
    def executeDialog(self, *args, **kwargs) -> Any: ...
    def exit(self, *args, **kwargs) -> Any: ...
    def findToolBar(self, *args, **kwargs) -> Any: ...
    def geometry(self, *args, **kwargs) -> Any: ...
    def getGeoPluginAttribute(self, *args, **kwargs) -> Any: ...
    def hasPendingPortCommands(self, *args, **kwargs) -> Any: ...
    def inRestrictedVersion(self, *args, **kwargs) -> Any: ...
    def inTerminalMode(self, *args, **kwargs) -> Any: ...
    def isBackgroundJobFinished(self, *args, **kwargs) -> Any: ...
    def isFullScreen(self, *args, **kwargs) -> Any: ...
    def isMaximized(self, *args, **kwargs) -> Any: ...
    def isMinimized(self, *args, **kwargs) -> Any: ...
    def isProcessing(self, *args, **kwargs) -> Any: ...
    def isRunning(self, *args, **kwargs) -> Any: ...
    def isSafeFeature_BypassUserEnvironmentResourceKeys_Enabled(self, *args, **kwargs) -> Any: ...
    def lastDropData(self, *args, **kwargs) -> Any: ...
    def launchArgs(self, *args, **kwargs) -> Any: ...
    def launchDir(self, *args, **kwargs) -> Any: ...
    def loadLayout(self, *args, **kwargs) -> Any: ...
    def log(self, *args, **kwargs) -> Any: ...
    def logFileName(self, *args, **kwargs) -> Any: ...
    def maximize(self, *args, **kwargs) -> Any: ...
    def minimize(self, *args, **kwargs) -> Any: ...
    def numProcessingSteps(self, *args, **kwargs) -> Any: ...
    def popupsAllowed(self, *args, **kwargs) -> Any: ...
    def processEvents(self, *args, **kwargs) -> Any: ...
    def progress(self, *args, **kwargs) -> Any: ...
    def progressDescription(self, *args, **kwargs) -> Any: ...
    def quit(self, *args, **kwargs) -> Any: ...
    def registerCustomDropMimeType(self, *args, **kwargs) -> Any: ...
    def registerGeoPluginWidget(self, *args, **kwargs) -> Any: ...
    def removeTab(self, *args, **kwargs) -> Any: ...
    def restore(self, *args, **kwargs) -> Any: ...
    def restoreCursor(self, *args, **kwargs) -> Any: ...
    def resumeProcessing(self, *args, **kwargs) -> Any: ...
    def saveLayout(self, *args, **kwargs) -> Any: ...
    def setActiveTab(self, *args, **kwargs) -> Any: ...
    def setCommandPortNumber(self, *args, **kwargs) -> Any: ...
    def setFixedCanvasSize(self, *args, **kwargs) -> Any: ...
    def setFullScreen(self, *args, **kwargs) -> Any: ...
    def setGeoPluginAttribute(self, *args, **kwargs) -> Any: ...
    def setGeometry(self, *args, **kwargs) -> Any: ...
    def setNukeConnectionActive(self, *args, **kwargs) -> Any: ...
    def setProgress(self, *args, **kwargs) -> Any: ...
    def setProgressDescription(self, *args, **kwargs) -> Any: ...
    def setWaitCursor(self, *args, **kwargs) -> Any: ...
    def startProcessing(self, *args, **kwargs) -> Any: ...
    def stepProgress(self, *args, **kwargs) -> Any: ...
    def stopProcessing(self, *args, **kwargs) -> Any: ...
    def suspendProcessing(self, *args, **kwargs) -> Any: ...
    def tabNames(self, *args, **kwargs) -> Any: ...
    def toggleFullScreen(self, *args, **kwargs) -> Any: ...
    def toolBar(self, *args, **kwargs) -> Any: ...
    def version(self, *args, **kwargs) -> Any: ...
    def wasProcessingCanceled(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class BackdropNode(Mari.Node):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def childNodes(self, *args, **kwargs) -> Any: ...
    def isBackdropNode(self, *args, **kwargs) -> Any: ...
    def portListMode(self, *args, **kwargs) -> Any: ...
    def selectChildNodes(self, *args, **kwargs) -> Any: ...
    def setNodeGraphSize(self, *args, **kwargs) -> Any: ...
    def setPortListMode(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class BakePointLayer(Mari.Layer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bake(self, *args, **kwargs) -> Any: ...
    def bakedResult(self, *args, **kwargs) -> Any: ...
    def deleteBakedResult(self, *args, **kwargs) -> Any: ...
    def hasBakedResult(self, *args, **kwargs) -> Any: ...
    def isBakedResultUpToDate(self, *args, **kwargs) -> Any: ...
    def setUseBaked(self, *args, **kwargs) -> Any: ...
    def useBaked(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class BakePointNode(Mari.PaintNode):
    class BakePointNodeState:
        BAKEPOINTSTATE_DIRTY: ClassVar[Mari.BakePointNode.BakePointNodeState] = ...
        BAKEPOINTSTATE_NOT_AVAILABLE: ClassVar[Mari.BakePointNode.BakePointNodeState] = ...
        BAKEPOINTSTATE_UP_TO_DATE: ClassVar[Mari.BakePointNode.BakePointNodeState] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    BAKEPOINTSTATE_DIRTY: ClassVar[Mari.BakePointNode.BakePointNodeState] = ...
    BAKEPOINTSTATE_NOT_AVAILABLE: ClassVar[Mari.BakePointNode.BakePointNodeState] = ...
    BAKEPOINTSTATE_UP_TO_DATE: ClassVar[Mari.BakePointNode.BakePointNodeState] = ...
    bakedStateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    exportPathChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def applyFilterCollection(self, *args, **kwargs) -> Any: ...
    def bake(self, *args, **kwargs) -> Any: ...
    def bakedResult(self, *args, **kwargs) -> Any: ...
    def connectSignals(self, *args, **kwargs) -> Any: ...
    def deleteBakedResult(self, *args, **kwargs) -> Any: ...
    def depth(self, *args, **kwargs) -> Any: ...
    def exportBakedResult(self, *args, **kwargs) -> Any: ...
    def exportOnBake(self, *args, **kwargs) -> Any: ...
    def exportPath(self, *args, **kwargs) -> Any: ...
    def filterCollection(self, *args, **kwargs) -> Any: ...
    def filterCollectionEnabled(self, *args, **kwargs) -> Any: ...
    def geoChannel(self, *args, **kwargs) -> Any: ...
    def geoChannelName(self, *args, **kwargs) -> Any: ...
    def hasBakedResult(self, *args, **kwargs) -> Any: ...
    def isBakePointNode(self, *args, **kwargs) -> Any: ...
    def isBakedResultUpToDate(self, *args, **kwargs) -> Any: ...
    def limitBake(self, *args, **kwargs) -> Any: ...
    def limitBakeRange(self, *args, **kwargs) -> Any: ...
    def onBakeStateChanged(self, *args, **kwargs) -> Any: ...
    def setExportOnBake(self, *args, **kwargs) -> Any: ...
    def setExportPath(self, *args, **kwargs) -> Any: ...
    def setFilterCollectionEnabled(self, *args, **kwargs) -> Any: ...
    def setGeoChannelName(self, *args, **kwargs) -> Any: ...
    def setLimitBake(self, *args, **kwargs) -> Any: ...
    def setLimitBakeRange(self, *args, **kwargs) -> Any: ...
    def setSyncToGeoChannel(self, *args, **kwargs) -> Any: ...
    def syncGeoChannel(self, *args, **kwargs) -> Any: ...
    def syncToGeoChannel(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class BroadcastTeleportNode(Mari.TeleportNode):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def connectSignals(self, *args, **kwargs) -> Any: ...
    def setChannelName(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Camera(Mari.Metadata):
    class Type:
        ORTHOGRAPHIC: ClassVar[Mari.Camera.Type] = ...
        PERSPECTIVE: ClassVar[Mari.Camera.Type] = ...
        UV: ClassVar[Mari.Camera.Type] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    ORTHOGRAPHIC: ClassVar[Mari.Camera.Type] = ...
    PERSPECTIVE: ClassVar[Mari.Camera.Type] = ...
    UV: ClassVar[Mari.Camera.Type] = ...
    attributeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    moved: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def adjustClipPlanes(self, *args, **kwargs) -> Any: ...
    def farClip(self, *args, **kwargs) -> Any: ...
    def fieldOfView(self, *args, **kwargs) -> Any: ...
    def fieldOfViewX(self, *args, **kwargs) -> Any: ...
    def fieldOfViewY(self, *args, **kwargs) -> Any: ...
    def isAnimated(self, *args, **kwargs) -> Any: ...
    def lookAt(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def nearClip(self, *args, **kwargs) -> Any: ...
    def perspectiveAspectRatio(self, *args, **kwargs) -> Any: ...
    def projectionMatrix(self, *args, **kwargs) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAnimated(self, *args, **kwargs) -> Any: ...
    def setFarClip(self, *args, **kwargs) -> Any: ...
    def setFieldOfView(self, *args, **kwargs) -> Any: ...
    def setFieldOfViewX(self, *args, **kwargs) -> Any: ...
    def setFieldOfViewY(self, *args, **kwargs) -> Any: ...
    def setLookAt(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setNearClip(self, *args, **kwargs) -> Any: ...
    def setScale(self, *args, **kwargs) -> Any: ...
    def setTranslation(self, *args, **kwargs) -> Any: ...
    def setType(self, *args, **kwargs) -> Any: ...
    def setUp(self, *args, **kwargs) -> Any: ...
    def translation(self, *args, **kwargs) -> Any: ...
    def type(self, *args, **kwargs) -> Any: ...
    def up(self, *args, **kwargs) -> Any: ...
    def viewMatrix(self, *args, **kwargs) -> Any: ...
    def viewport(self, *args, **kwargs) -> Any: ...
    def viewportAspectRatio(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Canvas(Mari.API):
    class PickSpace:
        PICKSPACE_PAINTING: ClassVar[Mari.Canvas.PickSpace] = ...
        PICKSPACE_SCREEN: ClassVar[Mari.Canvas.PickSpace] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    PICKSPACE_PAINTING: ClassVar[Mari.Canvas.PickSpace] = ...
    PICKSPACE_SCREEN: ClassVar[Mari.Canvas.PickSpace] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def averageColor(self, *args, **kwargs) -> Any: ...
    def camera(self, *args, **kwargs) -> Any: ...
    def capture(self, *args, **kwargs) -> Any: ...
    def displayPropertyList(self, *args, **kwargs) -> Any: ...
    def getDisplayProperty(self, *args, **kwargs) -> Any: ...
    def pickColor(self, *args, **kwargs) -> Any: ...
    def repaint(self, *args, **kwargs) -> Any: ...
    def requestRepaint(self, *args, **kwargs) -> Any: ...
    def sceneCamera(self, *args, **kwargs) -> Any: ...
    def setDisplayProperty(self, *args, **kwargs) -> Any: ...
    def size(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class CanvasManager(Mari.PropertySource):
    class RenderState:
        Render_Busy: ClassVar[Mari.CanvasManager.RenderState] = ...
        Render_Disabled: ClassVar[Mari.CanvasManager.RenderState] = ...
        Render_Error: ClassVar[Mari.CanvasManager.RenderState] = ...
        Render_Normal: ClassVar[Mari.CanvasManager.RenderState] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    Render_Busy: ClassVar[Mari.CanvasManager.RenderState] = ...
    Render_Disabled: ClassVar[Mari.CanvasManager.RenderState] = ...
    Render_Error: ClassVar[Mari.CanvasManager.RenderState] = ...
    Render_Normal: ClassVar[Mari.CanvasManager.RenderState] = ...
    aboutToRenderCanvas: ClassVar[PySide2.QtCore.Signal] = ...
    normalRenderFinished: ClassVar[PySide2.QtCore.Signal] = ...
    renderError: ClassVar[PySide2.QtCore.Signal] = ...
    renderedCanvas: ClassVar[PySide2.QtCore.Signal] = ...
    renderedCanvas2: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def current(self, *args, **kwargs) -> Any: ...
    def fps(self, *args, **kwargs) -> Any: ...
    def list(self, *args, **kwargs) -> Any: ...
    def paintBuffer(self, *args, **kwargs) -> Any: ...
    def pauseShaderCompiles(self, *args, **kwargs) -> Any: ...
    def setPauseShaderCompiles(self, *args, **kwargs) -> Any: ...
    def size(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Channel(Mari.LayerStack):
    class ConvertOption:
        CONVERT_ALL: ClassVar[Mari.Channel.ConvertOption] = ...
        CONVERT_CHANNEL_ONLY: ClassVar[Mari.Channel.ConvertOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class ResizeMetric:
        RESIZE_BY_PATCH_MAXIMUM: ClassVar[Mari.Channel.ResizeMetric] = ...
        RESIZE_BY_TEXELS_PER_UNIT: ClassVar[Mari.Channel.ResizeMetric] = ...
        RESIZE_BY_TEXEL_SIZE: ClassVar[Mari.Channel.ResizeMetric] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    CONVERT_ALL: ClassVar[Mari.Channel.ConvertOption] = ...
    CONVERT_CHANNEL_ONLY: ClassVar[Mari.Channel.ConvertOption] = ...
    RESIZE_BY_PATCH_MAXIMUM: ClassVar[Mari.Channel.ResizeMetric] = ...
    RESIZE_BY_TEXELS_PER_UNIT: ClassVar[Mari.Channel.ResizeMetric] = ...
    RESIZE_BY_TEXEL_SIZE: ClassVar[Mari.Channel.ResizeMetric] = ...
    colorspaceConfigChanged: ClassVar[PySide2.QtCore.Signal] = ...
    layerMadeCurrent: ClassVar[PySide2.QtCore.Signal] = ...
    lockedChanged: ClassVar[PySide2.QtCore.Signal] = ...
    nameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    scalarColorspaceConfigChanged: ClassVar[PySide2.QtCore.Signal] = ...
    snapshotAdded: ClassVar[PySide2.QtCore.Signal] = ...
    snapshotRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bakeTo(self, *args, **kwargs) -> Any: ...
    def bleed(self, *args, **kwargs) -> Any: ...
    def channelNode(self, *args, **kwargs) -> Any: ...
    def colorspaceConfig(self, *args, **kwargs) -> Any: ...
    def convertColorSpaceTo(self, *args, **kwargs) -> Any: ...
    def createSnapshot(self, *args, **kwargs) -> Any: ...
    def currentLayer(self, *args, **kwargs) -> Any: ...
    def deleteSnapshot(self, *args, **kwargs) -> Any: ...
    def depth(self, *args, **kwargs) -> Any: ...
    def exportToGeoChannel(self, *args, **kwargs) -> Any: ...
    def fileSpace(self, *args, **kwargs) -> Any: ...
    def findSnapshotWithID(self, *args, **kwargs) -> Any: ...
    def flatten(self, *args, **kwargs) -> Any: ...
    def geoEntity(self, *args, **kwargs) -> Any: ...
    def height(self, *args, **kwargs) -> Any: ...
    def isLocked(self, *args, **kwargs) -> Any: ...
    def isPtex(self, *args, **kwargs) -> Any: ...
    def isShaderStack(self, *args, **kwargs) -> Any: ...
    def lock(self, *args, **kwargs) -> Any: ...
    def makeCurrent(self, *args, **kwargs) -> Any: ...
    def metricResize(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def revertToSnapshot(self, *args, **kwargs) -> Any: ...
    def scalarColorspaceConfig(self, *args, **kwargs) -> Any: ...
    def setBleed(self, *args, **kwargs) -> Any: ...
    def setColorspaceConfig(self, *args, **kwargs) -> Any: ...
    def setCurrentLayer(self, *args, **kwargs) -> Any: ...
    def setDepth(self, *args, **kwargs) -> Any: ...
    def setFileSpace(self, *args, **kwargs) -> Any: ...
    def setLocked(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setScalarColorspaceConfig(self, *args, **kwargs) -> Any: ...
    def snapshotList(self, *args, **kwargs) -> Any: ...
    def unlock(self, *args, **kwargs) -> Any: ...
    def updateUvImageSizes(self, *args, **kwargs) -> Any: ...
    def width(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ChannelInfo(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def colorspaceConfig(self, *args, **kwargs) -> Any: ...
    def depth(self, *args, **kwargs) -> Any: ...
    def fileSpace(self, *args, **kwargs) -> Any: ...
    def fileTemplate(self, *args, **kwargs) -> Any: ...
    def fillColor(self, *args, **kwargs) -> Any: ...
    def height(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def path(self, *args, **kwargs) -> Any: ...
    def scalarColorspaceConfig(self, *args, **kwargs) -> Any: ...
    def setColorspaceConfig(self, *args, **kwargs) -> Any: ...
    def setDepth(self, *args, **kwargs) -> Any: ...
    def setFileSpace(self, *args, **kwargs) -> Any: ...
    def setFileTemplate(self, *args, **kwargs) -> Any: ...
    def setFillColor(self, *args, **kwargs) -> Any: ...
    def setHeight(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPath(self, *args, **kwargs) -> Any: ...
    def setScalarColorspaceConfig(self, *args, **kwargs) -> Any: ...
    def setShader(self, *args, **kwargs) -> Any: ...
    def setSize(self, *args, **kwargs) -> Any: ...
    def setWidth(self, *args, **kwargs) -> Any: ...
    def shader(self, *args, **kwargs) -> Any: ...
    def size(self, *args, **kwargs) -> Any: ...
    def width(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ChannelLayer(Mari.AdjustableLayer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def channel(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ChannelNode(Mari.BakePointNode):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def channel(self, *args, **kwargs) -> Any: ...
    def isBakePointNode(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ChannelSnapshot(Mari.Snapshot):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def extract(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Clock(Mari.API):
    class PlayDirection:
        BACKWARDS: ClassVar[Mari.Clock.PlayDirection] = ...
        FORWARDS: ClassVar[Mari.Clock.PlayDirection] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class RepeatType:
        BOUNCE: ClassVar[Mari.Clock.RepeatType] = ...
        LOOP: ClassVar[Mari.Clock.RepeatType] = ...
        STOP: ClassVar[Mari.Clock.RepeatType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    BACKWARDS: ClassVar[Mari.Clock.PlayDirection] = ...
    BOUNCE: ClassVar[Mari.Clock.RepeatType] = ...
    FORWARDS: ClassVar[Mari.Clock.PlayDirection] = ...
    LOOP: ClassVar[Mari.Clock.RepeatType] = ...
    STOP: ClassVar[Mari.Clock.RepeatType] = ...
    frameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    frameRateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    playingChanged: ClassVar[PySide2.QtCore.Signal] = ...
    rangeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def frame(self, *args, **kwargs) -> Any: ...
    def frameCount(self, *args, **kwargs) -> Any: ...
    def frameRate(self, *args, **kwargs) -> Any: ...
    def loopCount(self, *args, **kwargs) -> Any: ...
    def play(self, *args, **kwargs) -> Any: ...
    def playing(self, *args, **kwargs) -> Any: ...
    def repeatType(self, *args, **kwargs) -> Any: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def rewind(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setFrameRange(self, *args, **kwargs) -> Any: ...
    def setFrameRate(self, *args, **kwargs) -> Any: ...
    def setRepeatType(self, *args, **kwargs) -> Any: ...
    def setSourceFrameRate(self, *args, **kwargs) -> Any: ...
    def sourceFrameRate(self, *args, **kwargs) -> Any: ...
    def startFrame(self, *args, **kwargs) -> Any: ...
    def stepBack(self, *args, **kwargs) -> Any: ...
    def stepForward(self, *args, **kwargs) -> Any: ...
    def stop(self, *args, **kwargs) -> Any: ...
    def stopFrame(self, *args, **kwargs) -> Any: ...
    def time(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Color(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def a(self, *args, **kwargs) -> Any: ...
    def b(self, *args, **kwargs) -> Any: ...
    def exposure(self, *args, **kwargs) -> Any: ...
    def g(self, *args, **kwargs) -> Any: ...
    def h(self, *args, **kwargs) -> Any: ...
    def hsl(self, *args, **kwargs) -> Any: ...
    def hsla(self, *args, **kwargs) -> Any: ...
    def hsv(self, *args, **kwargs) -> Any: ...
    def hsva(self, *args, **kwargs) -> Any: ...
    def l(self, *args, **kwargs) -> Any: ...
    def lum(self, *args, **kwargs) -> Any: ...
    def r(self, *args, **kwargs) -> Any: ...
    def rgb(self, *args, **kwargs) -> Any: ...
    def rgba(self, *args, **kwargs) -> Any: ...
    def s(self, *args, **kwargs) -> Any: ...
    def setA(self, *args, **kwargs) -> Any: ...
    def setB(self, *args, **kwargs) -> Any: ...
    def setG(self, *args, **kwargs) -> Any: ...
    def setH(self, *args, **kwargs) -> Any: ...
    def setHSL(self, *args, **kwargs) -> Any: ...
    def setHSLA(self, *args, **kwargs) -> Any: ...
    def setHSV(self, *args, **kwargs) -> Any: ...
    def setHSVA(self, *args, **kwargs) -> Any: ...
    def setL(self, *args, **kwargs) -> Any: ...
    def setR(self, *args, **kwargs) -> Any: ...
    def setRGB(self, *args, **kwargs) -> Any: ...
    def setRGBA(self, *args, **kwargs) -> Any: ...
    def setS(self, *args, **kwargs) -> Any: ...
    def setV(self, *args, **kwargs) -> Any: ...
    def toString(self, *args, **kwargs) -> Any: ...
    def userReadable(self, *args, **kwargs) -> Any: ...
    def v(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Colors(Mari.API):
    backgroundChanged: ClassVar[PySide2.QtCore.Signal] = ...
    foregroundChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def background(self, *args, **kwargs) -> Any: ...
    def foreground(self, *args, **kwargs) -> Any: ...
    def pick(self, *args, **kwargs) -> Any: ...
    def setBackground(self, *args, **kwargs) -> Any: ...
    def setForeground(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ColorspaceConfig(Mari.API):
    class ColorspaceStage:
        COLORSPACE_STAGE_COUNT: ClassVar[Mari.ColorspaceConfig.ColorspaceStage] = ...
        COLORSPACE_STAGE_NATIVE: ClassVar[Mari.ColorspaceConfig.ColorspaceStage] = ...
        COLORSPACE_STAGE_OUTPUT: ClassVar[Mari.ColorspaceConfig.ColorspaceStage] = ...
        COLORSPACE_STAGE_WORKING: ClassVar[Mari.ColorspaceConfig.ColorspaceStage] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class ColorspaceType:
        COLORSPACE_TYPE_COUNT: ClassVar[Mari.ColorspaceConfig.ColorspaceType] = ...
        COLORSPACE_TYPE_FLOAT: ClassVar[Mari.ColorspaceConfig.ColorspaceType] = ...
        COLORSPACE_TYPE_INT16: ClassVar[Mari.ColorspaceConfig.ColorspaceType] = ...
        COLORSPACE_TYPE_INT8: ClassVar[Mari.ColorspaceConfig.ColorspaceType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    COLORSPACE_STAGE_COUNT: ClassVar[Mari.ColorspaceConfig.ColorspaceStage] = ...
    COLORSPACE_STAGE_NATIVE: ClassVar[Mari.ColorspaceConfig.ColorspaceStage] = ...
    COLORSPACE_STAGE_OUTPUT: ClassVar[Mari.ColorspaceConfig.ColorspaceStage] = ...
    COLORSPACE_STAGE_WORKING: ClassVar[Mari.ColorspaceConfig.ColorspaceStage] = ...
    COLORSPACE_TYPE_COUNT: ClassVar[Mari.ColorspaceConfig.ColorspaceType] = ...
    COLORSPACE_TYPE_FLOAT: ClassVar[Mari.ColorspaceConfig.ColorspaceType] = ...
    COLORSPACE_TYPE_INT16: ClassVar[Mari.ColorspaceConfig.ColorspaceType] = ...
    COLORSPACE_TYPE_INT8: ClassVar[Mari.ColorspaceConfig.ColorspaceType] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def automaticColorspace(self, *args, **kwargs) -> Any: ...
    def automaticType(self, *args, **kwargs) -> Any: ...
    def availableColorspaces(self, *args, **kwargs) -> Any: ...
    def colorspace(self, *args, **kwargs) -> Any: ...
    def defaultColorspace(self, *args, **kwargs) -> Any: ...
    def fileName(self, *args, **kwargs) -> Any: ...
    def fromString(self, *args, **kwargs) -> Any: ...
    def isColorspaceValid(self, *args, **kwargs) -> Any: ...
    def isFileCustom(self, *args, **kwargs) -> Any: ...
    def isFileValid(self, *args, **kwargs) -> Any: ...
    def isValid(self, *args, **kwargs) -> Any: ...
    def raw(self, *args, **kwargs) -> Any: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def resolveColorspace(self, *args, **kwargs) -> Any: ...
    def resolveRaw(self, *args, **kwargs) -> Any: ...
    def scalar(self, *args, **kwargs) -> Any: ...
    def setAutomaticColorspace(self, *args, **kwargs) -> Any: ...
    def setAutomaticType(self, *args, **kwargs) -> Any: ...
    def setColorspace(self, *args, **kwargs) -> Any: ...
    def setRaw(self, *args, **kwargs) -> Any: ...
    def setScalar(self, *args, **kwargs) -> Any: ...
    def toString(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ColorspaceDefaults(Mari.API):
    class ColorspaceTarget:
        COLORSPACE_TARGET_BLENDING: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
        COLORSPACE_TARGET_COLOR_PICKER: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
        COLORSPACE_TARGET_COUNT: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
        COLORSPACE_TARGET_FLOAT: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
        COLORSPACE_TARGET_INT16: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
        COLORSPACE_TARGET_INT8: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
        COLORSPACE_TARGET_INT_SCALAR: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
        COLORSPACE_TARGET_MONITOR: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
        COLORSPACE_TARGET_SCALAR_MONITOR: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
        COLORSPACE_TARGET_WORKING: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    COLORSPACE_TARGET_BLENDING: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
    COLORSPACE_TARGET_COLOR_PICKER: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
    COLORSPACE_TARGET_COUNT: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
    COLORSPACE_TARGET_FLOAT: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
    COLORSPACE_TARGET_INT16: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
    COLORSPACE_TARGET_INT8: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
    COLORSPACE_TARGET_INT_SCALAR: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
    COLORSPACE_TARGET_MONITOR: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
    COLORSPACE_TARGET_SCALAR_MONITOR: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
    COLORSPACE_TARGET_WORKING: ClassVar[Mari.ColorspaceDefaults.ColorspaceTarget] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def availableColorspaces(self, *args, **kwargs) -> Any: ...
    def colorManagementEnabled(self, *args, **kwargs) -> Any: ...
    def colorspace(self, *args, **kwargs) -> Any: ...
    def defaultColorspace(self, *args, **kwargs) -> Any: ...
    def fileName(self, *args, **kwargs) -> Any: ...
    def hasColorspace(self, *args, **kwargs) -> Any: ...
    def isFileCustom(self, *args, **kwargs) -> Any: ...
    def isFileValid(self, *args, **kwargs) -> Any: ...
    def isValid(self, *args, **kwargs) -> Any: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def resolveColorspace(self, *args, **kwargs) -> Any: ...
    def setColorManagementEnabled(self, *args, **kwargs) -> Any: ...
    def setColorspace(self, *args, **kwargs) -> Any: ...
    def setFileName(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ComboBox(Mari.WidgetBase):
    currentIndexChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def currentIndex(self, *args, **kwargs) -> Any: ...
    def currentText(self, *args, **kwargs) -> Any: ...
    def findText(self, *args, **kwargs) -> Any: ...
    def setContents(self, *args, **kwargs) -> Any: ...
    def setCurrentIndex(self, *args, **kwargs) -> Any: ...
    def setCurrentText(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class CustomLUTFilter(Mari.PostFilter):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def setData(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class CustomProceduralLayer(Mari.AdjustableLayer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def convertToPaintable(self, *args, **kwargs) -> Any: ...
    def customProceduralType(self, *args, **kwargs) -> Any: ...
    def geoChannels(self, *args, **kwargs) -> Any: ...
    def missingGeoChannels(self, *args, **kwargs) -> Any: ...
    def nodeGraph(self, *args, **kwargs) -> Any: ...
    def setCustomProceduralType(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class CustomProceduralNode(Mari.GroupNode):
    class CustomProceduralType:
        CUSTOMPROCEDURAL_TYPE_COLOR: ClassVar[Mari.CustomProceduralNode.CustomProceduralType] = ...
        CUSTOMPROCEDURAL_TYPE_MASK: ClassVar[Mari.CustomProceduralNode.CustomProceduralType] = ...
        CUSTOMPROCEDURAL_TYPE_SCALAR: ClassVar[Mari.CustomProceduralNode.CustomProceduralType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    CUSTOMPROCEDURAL_TYPE_COLOR: ClassVar[Mari.CustomProceduralNode.CustomProceduralType] = ...
    CUSTOMPROCEDURAL_TYPE_MASK: ClassVar[Mari.CustomProceduralNode.CustomProceduralType] = ...
    CUSTOMPROCEDURAL_TYPE_SCALAR: ClassVar[Mari.CustomProceduralNode.CustomProceduralType] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def addCustomProceduralTag(self, *args, **kwargs) -> Any: ...
    def addCustomProceduralTags(self, *args, **kwargs) -> Any: ...
    def customProceduralTags(self, *args, **kwargs) -> Any: ...
    def customProceduralType(self, *args, **kwargs) -> Any: ...
    def exportCustomProcedural(self, *args, **kwargs) -> Any: ...
    def geoChannels(self, *args, **kwargs) -> Any: ...
    def missingGeoChannels(self, *args, **kwargs) -> Any: ...
    @classmethod
    def readMetadataFromCustomProceduralFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def readSystemMetadataFromCustomProceduralFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def readTagsFromCustomProceduralFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def readThumbnailFromCustomProceduralFile(cls, *args, **kwargs) -> Any: ...
    def removeCustomProceduralTag(self, *args, **kwargs) -> Any: ...
    def removeCustomProceduralTags(self, *args, **kwargs) -> Any: ...
    def setCustomProceduralTags(self, *args, **kwargs) -> Any: ...
    def setCustomProceduralType(self, *args, **kwargs) -> Any: ...
    @classmethod
    def writeMetadataToCustomProceduralFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def writeTagsToCustomProceduralFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def writeThumbnailToCustomProceduralFile(cls, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class DDI(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearMemory(self, *args, **kwargs) -> Any: ...
    def clearMemoryCache(self, *args, **kwargs) -> Any: ...
    def clearTraces(self, *args, **kwargs) -> Any: ...
    def dataBlocks(self, *args, **kwargs) -> Any: ...
    def garbageCollect(self, *args, **kwargs) -> Any: ...
    def isLive(self, *args, **kwargs) -> Any: ...
    def liveBlocks(self, *args, **kwargs) -> Any: ...
    def liveBytes(self, *args, **kwargs) -> Any: ...
    def memoryCacheSize(self, *args, **kwargs) -> Any: ...
    def profile(self, *args, **kwargs) -> Any: ...
    def setMemoryCacheSize(self, *args, **kwargs) -> Any: ...
    def setTraceEnabled(self, *args, **kwargs) -> Any: ...
    def traces(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Environment(Mari.API):
    changed: ClassVar[PySide2.QtCore.Signal] = ...
    removed: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def exists(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def names(self, *args, **kwargs) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def unset(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class EnvironmentLight(Mari.Light):
    class CubeImageType:
        TYPE_2D_CROSS: ClassVar[Mari.EnvironmentLight.CubeImageType] = ...
        TYPE_2D_LATLONG: ClassVar[Mari.EnvironmentLight.CubeImageType] = ...
        TYPE_3D_CUBEMAP: ClassVar[Mari.EnvironmentLight.CubeImageType] = ...
        TYPE_GUESS: ClassVar[Mari.EnvironmentLight.CubeImageType] = ...
        TYPE_NONE: ClassVar[Mari.EnvironmentLight.CubeImageType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class ImageUpAxis:
        AXIS_UP_X: ClassVar[Mari.EnvironmentLight.ImageUpAxis] = ...
        AXIS_UP_Y: ClassVar[Mari.EnvironmentLight.ImageUpAxis] = ...
        AXIS_UP_Z: ClassVar[Mari.EnvironmentLight.ImageUpAxis] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class RotationMode:
        MODE_ROTATE: ClassVar[Mari.EnvironmentLight.RotationMode] = ...
        MODE_STATIC: ClassVar[Mari.EnvironmentLight.RotationMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    AXIS_UP_X: ClassVar[Mari.EnvironmentLight.ImageUpAxis] = ...
    AXIS_UP_Y: ClassVar[Mari.EnvironmentLight.ImageUpAxis] = ...
    AXIS_UP_Z: ClassVar[Mari.EnvironmentLight.ImageUpAxis] = ...
    MODE_ROTATE: ClassVar[Mari.EnvironmentLight.RotationMode] = ...
    MODE_STATIC: ClassVar[Mari.EnvironmentLight.RotationMode] = ...
    TYPE_2D_CROSS: ClassVar[Mari.EnvironmentLight.CubeImageType] = ...
    TYPE_2D_LATLONG: ClassVar[Mari.EnvironmentLight.CubeImageType] = ...
    TYPE_3D_CUBEMAP: ClassVar[Mari.EnvironmentLight.CubeImageType] = ...
    TYPE_GUESS: ClassVar[Mari.EnvironmentLight.CubeImageType] = ...
    TYPE_NONE: ClassVar[Mari.EnvironmentLight.CubeImageType] = ...
    canvasBlurChanged: ClassVar[PySide2.QtCore.Signal] = ...
    canvasDisplayChanged: ClassVar[PySide2.QtCore.Signal] = ...
    cubeImageFilenameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    cubeImageResolutionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    cubeImageTypeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    cubeImageUpAxisChanged: ClassVar[PySide2.QtCore.Signal] = ...
    fixedToChanged: ClassVar[PySide2.QtCore.Signal] = ...
    intensityChanged: ClassVar[PySide2.QtCore.Signal] = ...
    rotationUpChanged: ClassVar[PySide2.QtCore.Signal] = ...
    rotationUpModeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    rotationUpSpeedChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def canvasBlur(self, *args, **kwargs) -> Any: ...
    def canvasDisplay(self, *args, **kwargs) -> Any: ...
    def clearCubeImageCache(self, *args, **kwargs) -> Any: ...
    def clearLightCache(self, *args, **kwargs) -> Any: ...
    def cubeImage(self, *args, **kwargs) -> Any: ...
    def cubeImageFilename(self, *args, **kwargs) -> Any: ...
    def cubeImageResolution(self, *args, **kwargs) -> Any: ...
    def cubeImageType(self, *args, **kwargs) -> Any: ...
    def cubeImageUpAxis(self, *args, **kwargs) -> Any: ...
    def fixedTo(self, *args, **kwargs) -> Any: ...
    def intensity(self, *args, **kwargs) -> Any: ...
    def printLightCacheKeys(self, *args, **kwargs) -> Any: ...
    def rotationUp(self, *args, **kwargs) -> Any: ...
    def rotationUpMode(self, *args, **kwargs) -> Any: ...
    def rotationUpSpeed(self, *args, **kwargs) -> Any: ...
    def setCanvasBlur(self, *args, **kwargs) -> Any: ...
    def setCanvasDisplay(self, *args, **kwargs) -> Any: ...
    def setCubeImage(self, *args, **kwargs) -> Any: ...
    def setCubeImageResolution(self, *args, **kwargs) -> Any: ...
    def setCubeImageType(self, *args, **kwargs) -> Any: ...
    def setCubeImageUpAxis(self, *args, **kwargs) -> Any: ...
    def setFixedTo(self, *args, **kwargs) -> Any: ...
    def setIntensity(self, *args, **kwargs) -> Any: ...
    def setRotationUp(self, *args, **kwargs) -> Any: ...
    def setRotationUpMode(self, *args, **kwargs) -> Any: ...
    def setRotationUpSpeed(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Event(Mari.API):
    class EventCoordinateSpace:
        APPLICATION_SPACE: ClassVar[Mari.Event.EventCoordinateSpace] = ...
        CANVAS_SPACE: ClassVar[Mari.Event.EventCoordinateSpace] = ...
        DESKTOP_SPACE: ClassVar[Mari.Event.EventCoordinateSpace] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class EventType:
        KEY_PRESS: ClassVar[Mari.Event.EventType] = ...
        KEY_RELEASE: ClassVar[Mari.Event.EventType] = ...
        MOUSE_DOUBLE_CLICK: ClassVar[Mari.Event.EventType] = ...
        MOUSE_MOVE: ClassVar[Mari.Event.EventType] = ...
        MOUSE_PRESS: ClassVar[Mari.Event.EventType] = ...
        MOUSE_RELEASE: ClassVar[Mari.Event.EventType] = ...
        TABLET_ENTER_PROXIMITY: ClassVar[Mari.Event.EventType] = ...
        TABLET_LEAVE_PROXIMITY: ClassVar[Mari.Event.EventType] = ...
        TABLET_MOVE: ClassVar[Mari.Event.EventType] = ...
        TABLET_PRESS: ClassVar[Mari.Event.EventType] = ...
        TABLET_RELEASE: ClassVar[Mari.Event.EventType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class KeyboardModifier:
        ALT_MODIFIER: ClassVar[Mari.Event.KeyboardModifier] = ...
        CONTROL_MODIFIER: ClassVar[Mari.Event.KeyboardModifier] = ...
        GROUP_SWITCH_MODIFIER: ClassVar[Mari.Event.KeyboardModifier] = ...
        KEYPAD_MODIFIER: ClassVar[Mari.Event.KeyboardModifier] = ...
        META_MODIFIER: ClassVar[Mari.Event.KeyboardModifier] = ...
        NO_MODIFIER: ClassVar[Mari.Event.KeyboardModifier] = ...
        SHIFT_MODIFIER: ClassVar[Mari.Event.KeyboardModifier] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class MouseButton:
        LEFT_BUTTON: ClassVar[Mari.Event.MouseButton] = ...
        MIDDLE_BUTTON: ClassVar[Mari.Event.MouseButton] = ...
        NO_BUTTON: ClassVar[Mari.Event.MouseButton] = ...
        RIGHT_BUTTON: ClassVar[Mari.Event.MouseButton] = ...
        X_BUTTON_1: ClassVar[Mari.Event.MouseButton] = ...
        X_BUTTON_2: ClassVar[Mari.Event.MouseButton] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    ALT_MODIFIER: ClassVar[Mari.Event.KeyboardModifier] = ...
    APPLICATION_SPACE: ClassVar[Mari.Event.EventCoordinateSpace] = ...
    CANVAS_SPACE: ClassVar[Mari.Event.EventCoordinateSpace] = ...
    CONTROL_MODIFIER: ClassVar[Mari.Event.KeyboardModifier] = ...
    DESKTOP_SPACE: ClassVar[Mari.Event.EventCoordinateSpace] = ...
    GROUP_SWITCH_MODIFIER: ClassVar[Mari.Event.KeyboardModifier] = ...
    KEYPAD_MODIFIER: ClassVar[Mari.Event.KeyboardModifier] = ...
    KEY_PRESS: ClassVar[Mari.Event.EventType] = ...
    KEY_RELEASE: ClassVar[Mari.Event.EventType] = ...
    LEFT_BUTTON: ClassVar[Mari.Event.MouseButton] = ...
    META_MODIFIER: ClassVar[Mari.Event.KeyboardModifier] = ...
    MIDDLE_BUTTON: ClassVar[Mari.Event.MouseButton] = ...
    MOUSE_DOUBLE_CLICK: ClassVar[Mari.Event.EventType] = ...
    MOUSE_MOVE: ClassVar[Mari.Event.EventType] = ...
    MOUSE_PRESS: ClassVar[Mari.Event.EventType] = ...
    MOUSE_RELEASE: ClassVar[Mari.Event.EventType] = ...
    NO_BUTTON: ClassVar[Mari.Event.MouseButton] = ...
    NO_MODIFIER: ClassVar[Mari.Event.KeyboardModifier] = ...
    RIGHT_BUTTON: ClassVar[Mari.Event.MouseButton] = ...
    SHIFT_MODIFIER: ClassVar[Mari.Event.KeyboardModifier] = ...
    TABLET_ENTER_PROXIMITY: ClassVar[Mari.Event.EventType] = ...
    TABLET_LEAVE_PROXIMITY: ClassVar[Mari.Event.EventType] = ...
    TABLET_MOVE: ClassVar[Mari.Event.EventType] = ...
    TABLET_PRESS: ClassVar[Mari.Event.EventType] = ...
    TABLET_RELEASE: ClassVar[Mari.Event.EventType] = ...
    X_BUTTON_1: ClassVar[Mari.Event.MouseButton] = ...
    X_BUTTON_2: ClassVar[Mari.Event.MouseButton] = ...
    playbackComplete: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def eventFilter(self, *args, **kwargs) -> Any: ...
    def isPlaying(self, *args, **kwargs) -> Any: ...
    def recordPlay(self, *args, **kwargs) -> Any: ...
    def recordStart(self, *args, **kwargs) -> Any: ...
    def recordStop(self, *args, **kwargs) -> Any: ...
    def recordString(self, *args, **kwargs) -> Any: ...
    def sendKeyEvent(self, *args, **kwargs) -> Any: ...
    def sendMouseEvent(self, *args, **kwargs) -> Any: ...
    def sendTabletEvent(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ExportItem(Mari.Metadata):
    imageExported: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def colorspace(self, *args, **kwargs) -> Any: ...
    def depth(self, *args, **kwargs) -> Any: ...
    def deserializeFromString(self, *args, **kwargs) -> Any: ...
    def errorStringList(self, *args, **kwargs) -> Any: ...
    def exportEnabled(self, *args, **kwargs) -> Any: ...
    def fileOptions(self, *args, **kwargs) -> Any: ...
    def fileOptionsString(self, *args, **kwargs) -> Any: ...
    def fileTemplate(self, *args, **kwargs) -> Any: ...
    def geoEntity(self, *args, **kwargs) -> Any: ...
    def onImageExported(self, *args, **kwargs) -> Any: ...
    def postProcessCommand(self, *args, **kwargs) -> Any: ...
    def resolution(self, *args, **kwargs) -> Any: ...
    def resolveExportFilePaths(self, *args, **kwargs) -> Any: ...
    def resolveFileTemplate(self, *args, **kwargs) -> Any: ...
    def resolvedColorspace(self, *args, **kwargs) -> Any: ...
    def serializeToString(self, *args, **kwargs) -> Any: ...
    def setColorspace(self, *args, **kwargs) -> Any: ...
    def setDepth(self, *args, **kwargs) -> Any: ...
    def setErrorStringList(self, *args, **kwargs) -> Any: ...
    def setExportEnabled(self, *args, **kwargs) -> Any: ...
    def setFileOptions(self, *args, **kwargs) -> Any: ...
    def setFileTemplate(self, *args, **kwargs) -> Any: ...
    def setGeoEntity(self, *args, **kwargs) -> Any: ...
    def setPostProcessCommand(self, *args, **kwargs) -> Any: ...
    def setResolution(self, *args, **kwargs) -> Any: ...
    def setSourceNode(self, *args, **kwargs) -> Any: ...
    def setUvIndexList(self, *args, **kwargs) -> Any: ...
    def setWarningStringList(self, *args, **kwargs) -> Any: ...
    def sourceColorspace(self, *args, **kwargs) -> Any: ...
    def sourceDepth(self, *args, **kwargs) -> Any: ...
    def sourceDepthAsInternalFormat(self, *args, **kwargs) -> Any: ...
    def sourceNode(self, *args, **kwargs) -> Any: ...
    def sourceNodeName(self, *args, **kwargs) -> Any: ...
    def sourceResolution(self, *args, **kwargs) -> Any: ...
    def uvIndexList(self, *args, **kwargs) -> Any: ...
    def warningStringList(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ExportManager(Mari.API):
    imageExported: ClassVar[PySide2.QtCore.Signal] = ...
    itemAdded: ClassVar[PySide2.QtCore.Signal] = ...
    itemExported: ClassVar[PySide2.QtCore.Signal] = ...
    itemRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addExportItem(self, *args, **kwargs) -> Any: ...
    def checkExportItemIsValid(self, *args, **kwargs) -> Any: ...
    def colorspaceList(self, *args, **kwargs) -> Any: ...
    def depthList(self, *args, **kwargs) -> Any: ...
    def exportItemList(self, *args, **kwargs) -> Any: ...
    def exportTextures(self, *args, **kwargs) -> Any: ...
    def imageFileExtensionList(self, *args, **kwargs) -> Any: ...
    def imageFileOptions(self, *args, **kwargs) -> Any: ...
    def imageFileOptionsWidget(self, *args, **kwargs) -> Any: ...
    def postProcessCommandList(self, *args, **kwargs) -> Any: ...
    def registerPostProcessCommand(self, *args, **kwargs) -> Any: ...
    def removeExportItem(self, *args, **kwargs) -> Any: ...
    def resolutionList(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class FaceSelectionGroup(Mari.SelectionGroup):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def geoEntityList(self, *args, **kwargs) -> Any: ...
    def geoVersionList(self, *args, **kwargs) -> Any: ...
    def meshLocationToFaceSelectionIndexRangeListMap(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class FileLUTFilter(Mari.PostFilter):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def filePath(self, *args, **kwargs) -> Any: ...
    def setFilePath(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class FileList(Mari.API):
    class Type:
        TYPE_CHOOSE_FILE: ClassVar[Mari.FileList.Type] = ...
        TYPE_DIRECTORY: ClassVar[Mari.FileList.Type] = ...
        TYPE_FILE: ClassVar[Mari.FileList.Type] = ...
        TYPE_FILE_AND_DIRECTORY: ClassVar[Mari.FileList.Type] = ...
        TYPE_SAVE_FILE: ClassVar[Mari.FileList.Type] = ...
        TYPE_SINGLE_DIRECTORY: ClassVar[Mari.FileList.Type] = ...
        TYPE_SINGLE_FILE: ClassVar[Mari.FileList.Type] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    TYPE_CHOOSE_FILE: ClassVar[Mari.FileList.Type] = ...
    TYPE_DIRECTORY: ClassVar[Mari.FileList.Type] = ...
    TYPE_FILE: ClassVar[Mari.FileList.Type] = ...
    TYPE_FILE_AND_DIRECTORY: ClassVar[Mari.FileList.Type] = ...
    TYPE_SAVE_FILE: ClassVar[Mari.FileList.Type] = ...
    TYPE_SINGLE_DIRECTORY: ClassVar[Mari.FileList.Type] = ...
    TYPE_SINGLE_FILE: ClassVar[Mari.FileList.Type] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def acceptNonExisting(self, *args, **kwargs) -> Any: ...
    def append(self, *args, **kwargs) -> Any: ...
    def at(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def contains(self, *args, **kwargs) -> Any: ...
    def count(self, *args, **kwargs) -> Any: ...
    def defaultDirectory(self, *args, **kwargs) -> Any: ...
    def filter(self, *args, **kwargs) -> Any: ...
    def insert(self, *args, **kwargs) -> Any: ...
    def isEmpty(self, *args, **kwargs) -> Any: ...
    def pathKey(self, *args, **kwargs) -> Any: ...
    def pickedFile(self, *args, **kwargs) -> Any: ...
    def removeAt(self, *args, **kwargs) -> Any: ...
    def setAcceptNonExisting(self, *args, **kwargs) -> Any: ...
    def setDefaultDirectory(self, *args, **kwargs) -> Any: ...
    def setFilter(self, *args, **kwargs) -> Any: ...
    def setPathKey(self, *args, **kwargs) -> Any: ...
    def setPickedFile(self, *args, **kwargs) -> Any: ...
    def setType(self, *args, **kwargs) -> Any: ...
    def type(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class FloatSlider(Mari.SliderBase):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    valueChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class GLRender(Mari.API):
    class ShaderCompileResult:
        SHADER_COMPILE_FAILED: ClassVar[Mari.GLRender.ShaderCompileResult] = ...
        SHADER_LINK_FAILED: ClassVar[Mari.GLRender.ShaderCompileResult] = ...
        SHADER_LINK_SUCCESS: ClassVar[Mari.GLRender.ShaderCompileResult] = ...
        SHADER_RELOAD_MACROS_FAILED: ClassVar[Mari.GLRender.ShaderCompileResult] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    SHADER_COMPILE_FAILED: ClassVar[Mari.GLRender.ShaderCompileResult] = ...
    SHADER_LINK_FAILED: ClassVar[Mari.GLRender.ShaderCompileResult] = ...
    SHADER_LINK_SUCCESS: ClassVar[Mari.GLRender.ShaderCompileResult] = ...
    SHADER_RELOAD_MACROS_FAILED: ClassVar[Mari.GLRender.ShaderCompileResult] = ...
    currentPostFilterCollectionModified: ClassVar[PySide2.QtCore.Signal] = ...
    postFilterCollectionAdded: ClassVar[PySide2.QtCore.Signal] = ...
    postFilterCollectionRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    postProcessingEnabled: ClassVar[PySide2.QtCore.Signal] = ...
    setCurrentPostFilterCollection: ClassVar[PySide2.QtCore.Signal] = ...
    shaderCompileComplete: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def applyFilter(self, *args, **kwargs) -> Any: ...
    def clearError(self, *args, **kwargs) -> Any: ...
    def createPostFilterCollection(self, *args, **kwargs) -> Any: ...
    def createQuickApplyGLSL(self, *args, **kwargs) -> Any: ...
    def currentPostFilterCollection(self, *args, **kwargs) -> Any: ...
    def deletePostFilterCollection(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deregisterCustomCubemapFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def deregisterCustomImagemapFile(cls, *args, **kwargs) -> Any: ...
    def findFilter(self, *args, **kwargs) -> Any: ...
    def findPostFilterCollection(self, *args, **kwargs) -> Any: ...
    def findQuickApplyFilter(self, *args, **kwargs) -> Any: ...
    def isCurrentGLShaderProgramValid(self, *args, **kwargs) -> Any: ...
    def isPostProcessingEnabled(self, *args, **kwargs) -> Any: ...
    def platformInformation(self, *args, **kwargs) -> Any: ...
    def postFilterCollectionNames(self, *args, **kwargs) -> Any: ...
    def postFilterCollections(self, *args, **kwargs) -> Any: ...
    @classmethod
    def registerCustomAdjustmentLayerFromXMLFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def registerCustomBlendMode(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def registerCustomCodeFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def registerCustomCubemapFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def registerCustomDiffuseShaderFromXMLFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def registerCustomHeaderFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def registerCustomImagemapFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def registerCustomLayeredShaderFromXMLFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def registerCustomNodeFromXMLFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def registerCustomProceduralLayerFromXMLFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def registerCustomSpecularShaderFromXMLFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def registerCustomStandaloneShaderFromXMLFile(cls, *args, **kwargs) -> Any: ...
    def reloadXMLDefinitions(self, *args, **kwargs) -> Any: ...
    def removeQuickApplyFilter(self, *args, **kwargs) -> Any: ...
    def runGLSLCode(self, *args, **kwargs) -> Any: ...
    def setPostFilterCollection(self, *args, **kwargs) -> Any: ...
    def setPostProcessingEnabled(self, *args, **kwargs) -> Any: ...
    def upgradeExistingShadersAndLayers(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class GLSLFilter(Mari.PostFilter):
    class Clamp:
        CLAMP_REPEAT: ClassVar[Mari.GLSLFilter.Clamp] = ...
        CLAMP_TO_EDGE: ClassVar[Mari.GLSLFilter.Clamp] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class Filter:
        FILTER_LINEAR: ClassVar[Mari.GLSLFilter.Filter] = ...
        FILTER_MIPMAP_LINEAR: ClassVar[Mari.GLSLFilter.Filter] = ...
        FILTER_NEAREST: ClassVar[Mari.GLSLFilter.Filter] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class Format:
        FORMAT_L: ClassVar[Mari.GLSLFilter.Format] = ...
        FORMAT_R: ClassVar[Mari.GLSLFilter.Format] = ...
        FORMAT_RGB: ClassVar[Mari.GLSLFilter.Format] = ...
        FORMAT_RGBA: ClassVar[Mari.GLSLFilter.Format] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    CLAMP_REPEAT: ClassVar[Mari.GLSLFilter.Clamp] = ...
    CLAMP_TO_EDGE: ClassVar[Mari.GLSLFilter.Clamp] = ...
    FILTER_LINEAR: ClassVar[Mari.GLSLFilter.Filter] = ...
    FILTER_MIPMAP_LINEAR: ClassVar[Mari.GLSLFilter.Filter] = ...
    FILTER_NEAREST: ClassVar[Mari.GLSLFilter.Filter] = ...
    FORMAT_L: ClassVar[Mari.GLSLFilter.Format] = ...
    FORMAT_R: ClassVar[Mari.GLSLFilter.Format] = ...
    FORMAT_RGB: ClassVar[Mari.GLSLFilter.Format] = ...
    FORMAT_RGBA: ClassVar[Mari.GLSLFilter.Format] = ...
    enabledChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bodySnippet(self, *args, **kwargs) -> Any: ...
    def definitionsSnippet(self, *args, **kwargs) -> Any: ...
    def deleteTexture(self, *args, **kwargs) -> Any: ...
    def setBodySnippet(self, *args, **kwargs) -> Any: ...
    def setDefinitionsSnippet(self, *args, **kwargs) -> Any: ...
    def setTexture1D(self, *args, **kwargs) -> Any: ...
    def setTexture2D(self, *args, **kwargs) -> Any: ...
    def setTexture3D(self, *args, **kwargs) -> Any: ...
    def updateTexture1D(self, *args, **kwargs) -> Any: ...
    def updateTexture2D(self, *args, **kwargs) -> Any: ...
    def updateTexture3D(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class GLSLFilterFactory(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def deregisterFilter(self, *args, **kwargs) -> Any: ...
    def registerFilter(self, *args, **kwargs) -> Any: ...
    def setupFilter(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class GeoChannel(Mari.Metadata):
    imageSetChanged: ClassVar[PySide2.QtCore.Signal] = ...
    nameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def aliases(self, *args, **kwargs) -> Any: ...
    def geoChannelLayers(self, *args, **kwargs) -> Any: ...
    def geoChannelNodes(self, *args, **kwargs) -> Any: ...
    def imageSet(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def setAliases(self, *args, **kwargs) -> Any: ...
    def setImageSet(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class GeoChannelNode(Mari.Node):
    geoChannelNameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def geoChannelName(self, *args, **kwargs) -> Any: ...
    def isGeoChannelNode(self, *args, **kwargs) -> Any: ...
    def setGeoChannelName(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class GeoEntity(Mari.Lockable):
    class ChannelDestroyStrategy:
        DESTROY_ALL: ClassVar[Mari.GeoEntity.ChannelDestroyStrategy] = ...
        DESTROY_NONE: ClassVar[Mari.GeoEntity.ChannelDestroyStrategy] = ...
        DESTROY_UNSHARED: ClassVar[Mari.GeoEntity.ChannelDestroyStrategy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class SystemShaderType:
        SYSTEM_SHADER_CURRENT_CHANNEL: ClassVar[Mari.GeoEntity.SystemShaderType] = ...
        SYSTEM_SHADER_CURRENT_LAYER: ClassVar[Mari.GeoEntity.SystemShaderType] = ...
        SYSTEM_SHADER_CURRENT_LAYER_AND_BELOW: ClassVar[Mari.GeoEntity.SystemShaderType] = ...
        SYSTEM_SHADER_CURRENT_PAINT_TARGET: ClassVar[Mari.GeoEntity.SystemShaderType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    DESTROY_ALL: ClassVar[Mari.GeoEntity.ChannelDestroyStrategy] = ...
    DESTROY_NONE: ClassVar[Mari.GeoEntity.ChannelDestroyStrategy] = ...
    DESTROY_UNSHARED: ClassVar[Mari.GeoEntity.ChannelDestroyStrategy] = ...
    SYSTEM_SHADER_CURRENT_CHANNEL: ClassVar[Mari.GeoEntity.SystemShaderType] = ...
    SYSTEM_SHADER_CURRENT_LAYER: ClassVar[Mari.GeoEntity.SystemShaderType] = ...
    SYSTEM_SHADER_CURRENT_LAYER_AND_BELOW: ClassVar[Mari.GeoEntity.SystemShaderType] = ...
    SYSTEM_SHADER_CURRENT_PAINT_TARGET: ClassVar[Mari.GeoEntity.SystemShaderType] = ...
    channelAdded: ClassVar[PySide2.QtCore.Signal] = ...
    channelCreated: ClassVar[PySide2.QtCore.Signal] = ...
    channelMadeCurrent: ClassVar[PySide2.QtCore.Signal] = ...
    channelRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    geoChannelAdded: ClassVar[PySide2.QtCore.Signal] = ...
    geoChannelRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    geometryVersionAdded: ClassVar[PySide2.QtCore.Signal] = ...
    geometryVersionMadeCurrent: ClassVar[PySide2.QtCore.Signal] = ...
    geometryVersionRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    imageSetAdded: ClassVar[PySide2.QtCore.Signal] = ...
    imageSetMadeCurrent: ClassVar[PySide2.QtCore.Signal] = ...
    imageSetRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    nameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    shaderCreated: ClassVar[PySide2.QtCore.Signal] = ...
    shaderMadeCurrent: ClassVar[PySide2.QtCore.Signal] = ...
    shaderRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addLocator(self, *args, **kwargs) -> Any: ...
    def addVersion(self, *args, **kwargs) -> Any: ...
    def boundingBoxLowerBounds(self, *args, **kwargs) -> Any: ...
    def boundingBoxUpperBounds(self, *args, **kwargs) -> Any: ...
    def boundingSphereCenter(self, *args, **kwargs) -> Any: ...
    def boundingSphereRadius(self, *args, **kwargs) -> Any: ...
    def channel(self, *args, **kwargs) -> Any: ...
    def channelList(self, *args, **kwargs) -> Any: ...
    def completePatchList(self, *args, **kwargs) -> Any: ...
    def createChannel(self, *args, **kwargs) -> Any: ...
    def createDuplicateChannel(self, *args, **kwargs) -> Any: ...
    def createDuplicateShader(self, *args, **kwargs) -> Any: ...
    def createGeoChannel(self, *args, **kwargs) -> Any: ...
    def createLayeredShader(self, *args, **kwargs) -> Any: ...
    def createPtexChannel(self, *args, **kwargs) -> Any: ...
    def createStandaloneShader(self, *args, **kwargs) -> Any: ...
    def currentChannel(self, *args, **kwargs) -> Any: ...
    def currentImageSet(self, *args, **kwargs) -> Any: ...
    def currentShader(self, *args, **kwargs) -> Any: ...
    def currentVersion(self, *args, **kwargs) -> Any: ...
    def currentVersionName(self, *args, **kwargs) -> Any: ...
    def exportAsArchive(self, *args, **kwargs) -> Any: ...
    def findChannel(self, *args, **kwargs) -> Any: ...
    def findGeoChannel(self, *args, **kwargs) -> Any: ...
    def findImageSet(self, *args, **kwargs) -> Any: ...
    def findShader(self, *args, **kwargs) -> Any: ...
    def generateSubdivision(self, *args, **kwargs) -> Any: ...
    def geoChannels(self, *args, **kwargs) -> Any: ...
    def hideLocator(self, *args, **kwargs) -> Any: ...
    def imageSet(self, *args, **kwargs) -> Any: ...
    def imageSetList(self, *args, **kwargs) -> Any: ...
    def imageSetNames(self, *args, **kwargs) -> Any: ...
    def importFromArchive(self, *args, **kwargs) -> Any: ...
    def isPtex(self, *args, **kwargs) -> Any: ...
    def isSelected(self, *args, **kwargs) -> Any: ...
    def maximumSubdivisionLevel(self, *args, **kwargs) -> Any: ...
    def missingGeoChannels(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def nodeGraph(self, *args, **kwargs) -> Any: ...
    def patch(self, *args, **kwargs) -> Any: ...
    def patchImage(self, *args, **kwargs) -> Any: ...
    def patchList(self, *args, **kwargs) -> Any: ...
    def remapSubdivisionSettings(self, *args, **kwargs) -> Any: ...
    def removeChannel(self, *args, **kwargs) -> Any: ...
    def removeGeoChannel(self, *args, **kwargs) -> Any: ...
    def removeShader(self, *args, **kwargs) -> Any: ...
    def removeVersion(self, *args, **kwargs) -> Any: ...
    def renameVersion(self, *args, **kwargs) -> Any: ...
    def save(self, *args, **kwargs) -> Any: ...
    def selectedPatches(self, *args, **kwargs) -> Any: ...
    def setCurrentChannel(self, *args, **kwargs) -> Any: ...
    def setCurrentImageSet(self, *args, **kwargs) -> Any: ...
    def setCurrentShader(self, *args, **kwargs) -> Any: ...
    def setCurrentVersion(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setSelected(self, *args, **kwargs) -> Any: ...
    def setSubdivisionLevel(self, *args, **kwargs) -> Any: ...
    def setTransform(self, *args, **kwargs) -> Any: ...
    def shader(self, *args, **kwargs) -> Any: ...
    @classmethod
    def shaderLayeredTypeList(cls, *args, **kwargs) -> Any: ...
    def shaderList(self, *args, **kwargs) -> Any: ...
    @classmethod
    def shaderStandaloneTypeList(cls, *args, **kwargs) -> Any: ...
    def showLocator(self, *args, **kwargs) -> Any: ...
    def subdivisionBoundaryInterpolateMethod(self, *args, **kwargs) -> Any: ...
    def subdivisionCreasing(self, *args, **kwargs) -> Any: ...
    def subdivisionFaceVaryingBoundaryInterpolateMethod(self, *args, **kwargs) -> Any: ...
    def subdivisionScheme(self, *args, **kwargs) -> Any: ...
    def subdivisionSkippedMeshList(self, *args, **kwargs) -> Any: ...
    def subdivisionTriangleSubdivisionRule(self, *args, **kwargs) -> Any: ...
    def systemShader(self, *args, **kwargs) -> Any: ...
    def transform(self, *args, **kwargs) -> Any: ...
    def translation(self, *args, **kwargs) -> Any: ...
    def version(self, *args, **kwargs) -> Any: ...
    def versionList(self, *args, **kwargs) -> Any: ...
    def versionNames(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class GeoEntityVersion(Mari.Metadata):
    aboutToLoad: ClassVar[PySide2.QtCore.Signal] = ...
    createdChanged: ClassVar[PySide2.QtCore.Signal] = ...
    creatorChanged: ClassVar[PySide2.QtCore.Signal] = ...
    loaded: ClassVar[PySide2.QtCore.Signal] = ...
    modifiedChanged: ClassVar[PySide2.QtCore.Signal] = ...
    nameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    pathChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def created(self, *args, **kwargs) -> Any: ...
    def creator(self, *args, **kwargs) -> Any: ...
    def geoEntity(self, *args, **kwargs) -> Any: ...
    def geometryCount(self, *args, **kwargs) -> Any: ...
    def load(self, *args, **kwargs) -> Any: ...
    def meshLocationToFaceCountMap(self, *args, **kwargs) -> Any: ...
    def meshPaths(self, *args, **kwargs) -> Any: ...
    def modified(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def patchList(self, *args, **kwargs) -> Any: ...
    def path(self, *args, **kwargs) -> Any: ...
    def setCreated(self, *args, **kwargs) -> Any: ...
    def setCreator(self, *args, **kwargs) -> Any: ...
    def setMeshPaths(self, *args, **kwargs) -> Any: ...
    def setModified(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPath(self, *args, **kwargs) -> Any: ...
    def setSettings(self, *args, **kwargs) -> Any: ...
    def setSettingsString(self, *args, **kwargs) -> Any: ...
    def settings(self, *args, **kwargs) -> Any: ...
    def settingsString(self, *args, **kwargs) -> Any: ...
    def sourceMeshLocationList(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class GeoManager(Mari.API):
    class CreateSelectionSetOptions:
        SELECTION_GROUPS_CREATE_FROM_FACE_GROUPS: ClassVar[Mari.GeoManager.CreateSelectionSetOptions] = ...
        SELECTION_GROUPS_DONT_CREATE: ClassVar[Mari.GeoManager.CreateSelectionSetOptions] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class GeometryImportFlags:
        GEOMETRY_IMPORT_DONT_MERGE_CHILDREN: ClassVar[Mari.GeoManager.GeometryImportFlags] = ...
        GEOMETRY_IMPORT_DONT_SELECT_CHILDREN: ClassVar[Mari.GeoManager.GeometryImportFlags] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class MergeSelectionGroupWithSameNameType:
        MERGESELECTIONGROUP_DO_NOT_MERGE: ClassVar[Mari.GeoManager.MergeSelectionGroupWithSameNameType] = ...
        MERGESELECTIONGROUP_MERGE_SELECTIONGROUP_HAVING_SAME_NAME: ClassVar[Mari.GeoManager.MergeSelectionGroupWithSameNameType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class MergeType:
        MERGETYPE_JUST_MERGE_NODES: ClassVar[Mari.GeoManager.MergeType] = ...
        MERGETYPE_SINGLE_MESH: ClassVar[Mari.GeoManager.MergeType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class NodeType:
        CAMERA: ClassVar[Mari.GeoManager.NodeType] = ...
        FACESET: ClassVar[Mari.GeoManager.NodeType] = ...
        GROUP: ClassVar[Mari.GeoManager.NodeType] = ...
        POLYMESH: ClassVar[Mari.GeoManager.NodeType] = ...
        ROOT: ClassVar[Mari.GeoManager.NodeType] = ...
        SUBDIV: ClassVar[Mari.GeoManager.NodeType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class OpenSubdivisionBoundaryInterpolation:
        VTX_BOUNDARY_EDGE_AND_CORNER: ClassVar[Mari.GeoManager.OpenSubdivisionBoundaryInterpolation] = ...
        VTX_BOUNDARY_EDGE_ONLY: ClassVar[Mari.GeoManager.OpenSubdivisionBoundaryInterpolation] = ...
        VTX_BOUNDARY_NONE: ClassVar[Mari.GeoManager.OpenSubdivisionBoundaryInterpolation] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class OpenSubdivisionCreasingMethod:
        CREASE_CHAIKIN: ClassVar[Mari.GeoManager.OpenSubdivisionCreasingMethod] = ...
        CREASE_UNIFORM: ClassVar[Mari.GeoManager.OpenSubdivisionCreasingMethod] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class OpenSubdivisionFaceVaryingInterpolation:
        FVAR_LINEAR_ALL: ClassVar[Mari.GeoManager.OpenSubdivisionFaceVaryingInterpolation] = ...
        FVAR_LINEAR_BOUNDARIES: ClassVar[Mari.GeoManager.OpenSubdivisionFaceVaryingInterpolation] = ...
        FVAR_LINEAR_CORNERS_ONLY: ClassVar[Mari.GeoManager.OpenSubdivisionFaceVaryingInterpolation] = ...
        FVAR_LINEAR_CORNERS_PLUS1: ClassVar[Mari.GeoManager.OpenSubdivisionFaceVaryingInterpolation] = ...
        FVAR_LINEAR_CORNERS_PLUS2: ClassVar[Mari.GeoManager.OpenSubdivisionFaceVaryingInterpolation] = ...
        FVAR_LINEAR_NONE: ClassVar[Mari.GeoManager.OpenSubdivisionFaceVaryingInterpolation] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class OpenSubdivisionSchemeType:
        SCHEME_BILINEAR: ClassVar[Mari.GeoManager.OpenSubdivisionSchemeType] = ...
        SCHEME_CATMARK: ClassVar[Mari.GeoManager.OpenSubdivisionSchemeType] = ...
        SCHEME_LOOP: ClassVar[Mari.GeoManager.OpenSubdivisionSchemeType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class OpenSubdivisionTriangleSubdivision:
        TRI_SUB_CATMARK: ClassVar[Mari.GeoManager.OpenSubdivisionTriangleSubdivision] = ...
        TRI_SUB_SMOOTH: ClassVar[Mari.GeoManager.OpenSubdivisionTriangleSubdivision] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    CAMERA: ClassVar[Mari.GeoManager.NodeType] = ...
    CREASE_CHAIKIN: ClassVar[Mari.GeoManager.OpenSubdivisionCreasingMethod] = ...
    CREASE_UNIFORM: ClassVar[Mari.GeoManager.OpenSubdivisionCreasingMethod] = ...
    FACESET: ClassVar[Mari.GeoManager.NodeType] = ...
    FVAR_LINEAR_ALL: ClassVar[Mari.GeoManager.OpenSubdivisionFaceVaryingInterpolation] = ...
    FVAR_LINEAR_BOUNDARIES: ClassVar[Mari.GeoManager.OpenSubdivisionFaceVaryingInterpolation] = ...
    FVAR_LINEAR_CORNERS_ONLY: ClassVar[Mari.GeoManager.OpenSubdivisionFaceVaryingInterpolation] = ...
    FVAR_LINEAR_CORNERS_PLUS1: ClassVar[Mari.GeoManager.OpenSubdivisionFaceVaryingInterpolation] = ...
    FVAR_LINEAR_CORNERS_PLUS2: ClassVar[Mari.GeoManager.OpenSubdivisionFaceVaryingInterpolation] = ...
    FVAR_LINEAR_NONE: ClassVar[Mari.GeoManager.OpenSubdivisionFaceVaryingInterpolation] = ...
    GEOMETRY_IMPORT_DONT_MERGE_CHILDREN: ClassVar[Mari.GeoManager.GeometryImportFlags] = ...
    GEOMETRY_IMPORT_DONT_SELECT_CHILDREN: ClassVar[Mari.GeoManager.GeometryImportFlags] = ...
    GROUP: ClassVar[Mari.GeoManager.NodeType] = ...
    MERGESELECTIONGROUP_DO_NOT_MERGE: ClassVar[Mari.GeoManager.MergeSelectionGroupWithSameNameType] = ...
    MERGESELECTIONGROUP_MERGE_SELECTIONGROUP_HAVING_SAME_NAME: ClassVar[Mari.GeoManager.MergeSelectionGroupWithSameNameType] = ...
    MERGETYPE_JUST_MERGE_NODES: ClassVar[Mari.GeoManager.MergeType] = ...
    MERGETYPE_SINGLE_MESH: ClassVar[Mari.GeoManager.MergeType] = ...
    POLYMESH: ClassVar[Mari.GeoManager.NodeType] = ...
    ROOT: ClassVar[Mari.GeoManager.NodeType] = ...
    SCHEME_BILINEAR: ClassVar[Mari.GeoManager.OpenSubdivisionSchemeType] = ...
    SCHEME_CATMARK: ClassVar[Mari.GeoManager.OpenSubdivisionSchemeType] = ...
    SCHEME_LOOP: ClassVar[Mari.GeoManager.OpenSubdivisionSchemeType] = ...
    SELECTION_GROUPS_CREATE_FROM_FACE_GROUPS: ClassVar[Mari.GeoManager.CreateSelectionSetOptions] = ...
    SELECTION_GROUPS_DONT_CREATE: ClassVar[Mari.GeoManager.CreateSelectionSetOptions] = ...
    SUBDIV: ClassVar[Mari.GeoManager.NodeType] = ...
    TRI_SUB_CATMARK: ClassVar[Mari.GeoManager.OpenSubdivisionTriangleSubdivision] = ...
    TRI_SUB_SMOOTH: ClassVar[Mari.GeoManager.OpenSubdivisionTriangleSubdivision] = ...
    VTX_BOUNDARY_EDGE_AND_CORNER: ClassVar[Mari.GeoManager.OpenSubdivisionBoundaryInterpolation] = ...
    VTX_BOUNDARY_EDGE_ONLY: ClassVar[Mari.GeoManager.OpenSubdivisionBoundaryInterpolation] = ...
    VTX_BOUNDARY_NONE: ClassVar[Mari.GeoManager.OpenSubdivisionBoundaryInterpolation] = ...
    entityAdded: ClassVar[PySide2.QtCore.Signal] = ...
    entityMadeCurrent: ClassVar[PySide2.QtCore.Signal] = ...
    entityRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addLocator(self, *args, **kwargs) -> Any: ...
    def current(self, *args, **kwargs) -> Any: ...
    def currentLocator(self, *args, **kwargs) -> Any: ...
    def duplicateCurrentGeoEntity(self, *args, **kwargs) -> Any: ...
    def duplicateGeoEntity(self, *args, **kwargs) -> Any: ...
    def find(self, *args, **kwargs) -> Any: ...
    def geometryOperationList(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def getAnimationTakes(self, *args, **kwargs) -> Any: ...
    def getDefaultAnimationTake(self, *args, **kwargs) -> Any: ...
    def getFileContents(self, *args, **kwargs) -> Any: ...
    def getFileFrameRange(self, *args, **kwargs) -> Any: ...
    def importFromArchive(self, *args, **kwargs) -> Any: ...
    def list(self, *args, **kwargs) -> Any: ...
    def listLocators(self, *args, **kwargs) -> Any: ...
    def load(self, *args, **kwargs) -> Any: ...
    def names(self, *args, **kwargs) -> Any: ...
    def recalculatePatchBounds(self, *args, **kwargs) -> Any: ...
    def remove(self, *args, **kwargs) -> Any: ...
    def setCurrent(self, *args, **kwargs) -> Any: ...
    def supportedReadFormats(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class GeoPatch(Mari.Lockable):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def isLocked(self, *args, **kwargs) -> Any: ...
    def isSelected(self, *args, **kwargs) -> Any: ...
    def isValid(self, *args, **kwargs) -> Any: ...
    def isVisible(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def setLocked(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setSelected(self, *args, **kwargs) -> Any: ...
    def setVisibility(self, *args, **kwargs) -> Any: ...
    def u(self, *args, **kwargs) -> Any: ...
    def udim(self, *args, **kwargs) -> Any: ...
    def uv(self, *args, **kwargs) -> Any: ...
    def uvIndex(self, *args, **kwargs) -> Any: ...
    def v(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class GeometryOperation(Mari.Metadata):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def execute(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def operationDescription(self, *args, **kwargs) -> Any: ...
    def supportedOperations(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class GraphLayer(Mari.AdjustableLayer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def convertToPaintable(self, *args, **kwargs) -> Any: ...
    def nodeGraph(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class GroupLayer(Mari.AdjustableLayer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def flattenLayerGroup(self, *args, **kwargs) -> Any: ...
    def layerStack(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class GroupNode(Mari.Node):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def childNodeGraph(self, *args, **kwargs) -> Any: ...
    def convertToCustomProcedural(self, *args, **kwargs) -> Any: ...
    def createKnob(self, *args, **kwargs) -> Any: ...
    def deleteKnob(self, *args, **kwargs) -> Any: ...
    def groupInputNode(self, *args, **kwargs) -> Any: ...
    def groupOutputNode(self, *args, **kwargs) -> Any: ...
    def isGroupNode(self, *args, **kwargs) -> Any: ...
    def knobList(self, *args, **kwargs) -> Any: ...
    def linkKnobs(self, *args, **kwargs) -> Any: ...
    def renameKnob(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class History(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def cancelMacro(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def isMacroActive(self, *args, **kwargs) -> Any: ...
    def redo(self, *args, **kwargs) -> Any: ...
    def startMacro(self, *args, **kwargs) -> Any: ...
    def stopMacro(self, *args, **kwargs) -> Any: ...
    def undo(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Image(Mari.Metadata):
    class Depth:
        DEPTH_BYTE: ClassVar[Mari.Image.Depth] = ...
        DEPTH_FLOAT: ClassVar[Mari.Image.Depth] = ...
        DEPTH_HALF: ClassVar[Mari.Image.Depth] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class FileSpace:
        FILESPACE_NORMAL: ClassVar[Mari.Image.FileSpace] = ...
        FILESPACE_NORMAL_Y_FLIP: ClassVar[Mari.Image.FileSpace] = ...
        FILESPACE_VECTOR: ClassVar[Mari.Image.FileSpace] = ...
        FILESPACE_VECTOR_Y_FLIP: ClassVar[Mari.Image.FileSpace] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class SaveOptions:
        BACKGROUND_EXPORT: ClassVar[Mari.Image.SaveOptions] = ...
        DEFAULT_OPTIONS: ClassVar[Mari.Image.SaveOptions] = ...
        DISABLE_SMALL_UNIFORMS: ClassVar[Mari.Image.SaveOptions] = ...
        ENABLE_FULL_PATCH_BLEED: ClassVar[Mari.Image.SaveOptions] = ...
        EXPORT_UV_MASK_IN_ALPHA: ClassVar[Mari.Image.SaveOptions] = ...
        REMOVE_ALPHA: ClassVar[Mari.Image.SaveOptions] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    BACKGROUND_EXPORT: ClassVar[Mari.Image.SaveOptions] = ...
    DEFAULT_OPTIONS: ClassVar[Mari.Image.SaveOptions] = ...
    DEPTH_BYTE: ClassVar[Mari.Image.Depth] = ...
    DEPTH_FLOAT: ClassVar[Mari.Image.Depth] = ...
    DEPTH_HALF: ClassVar[Mari.Image.Depth] = ...
    DISABLE_SMALL_UNIFORMS: ClassVar[Mari.Image.SaveOptions] = ...
    ENABLE_FULL_PATCH_BLEED: ClassVar[Mari.Image.SaveOptions] = ...
    EXPORT_UV_MASK_IN_ALPHA: ClassVar[Mari.Image.SaveOptions] = ...
    FILESPACE_NORMAL: ClassVar[Mari.Image.FileSpace] = ...
    FILESPACE_NORMAL_Y_FLIP: ClassVar[Mari.Image.FileSpace] = ...
    FILESPACE_VECTOR: ClassVar[Mari.Image.FileSpace] = ...
    FILESPACE_VECTOR_Y_FLIP: ClassVar[Mari.Image.FileSpace] = ...
    REMOVE_ALPHA: ClassVar[Mari.Image.SaveOptions] = ...
    aboutToClose: ClassVar[PySide2.QtCore.Signal] = ...
    aboutToExport: ClassVar[PySide2.QtCore.Signal] = ...
    aboutToImport: ClassVar[PySide2.QtCore.Signal] = ...
    colorspaceConfigChanged: ClassVar[PySide2.QtCore.Signal] = ...
    exported: ClassVar[PySide2.QtCore.Signal] = ...
    imported: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, *args, **kwargs) -> Any: ...
    def colorspaceConfig(self, *args, **kwargs) -> Any: ...
    def convertDepth(self, *args, **kwargs) -> Any: ...
    def copyFrom(self, *args, **kwargs) -> Any: ...
    def depth(self, *args, **kwargs) -> Any: ...
    @classmethod
    def depthAsInternalFormat(cls, *args, **kwargs) -> Any: ...
    def filePath(self, *args, **kwargs) -> Any: ...
    def fileSpace(self, *args, **kwargs) -> Any: ...
    def fill(self, *args, **kwargs) -> Any: ...
    def hash(self, *args, **kwargs) -> Any: ...
    def height(self, *args, **kwargs) -> Any: ...
    def isUniform(self, *args, **kwargs) -> Any: ...
    def lastExportPath(self, *args, **kwargs) -> Any: ...
    def lastExportTime(self, *args, **kwargs) -> Any: ...
    def lastImportPath(self, *args, **kwargs) -> Any: ...
    def lastImportTime(self, *args, **kwargs) -> Any: ...
    def makeThumbnail(self, *args, **kwargs) -> Any: ...
    def mipMapCount(self, *args, **kwargs) -> Any: ...
    def mostRelevantPath(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def saveAs(self, *args, **kwargs) -> Any: ...
    def setColorspaceConfig(self, *args, **kwargs) -> Any: ...
    def setFileSpace(self, *args, **kwargs) -> Any: ...
    def setUniformColor(self, *args, **kwargs) -> Any: ...
    def size(self, *args, **kwargs) -> Any: ...
    def thumbnail(self, *args, **kwargs) -> Any: ...
    def transform(self, *args, **kwargs) -> Any: ...
    def uniformColor(self, *args, **kwargs) -> Any: ...
    def width(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ImageManager(Mari.Metadata):
    class ImageAlphaProcessing:
        IMAGE_NO_PRE_MULTIPLY_ALPHA: ClassVar[Mari.ImageManager.ImageAlphaProcessing] = ...
        IMAGE_PRE_MULTIPLY_ALPHA: ClassVar[Mari.ImageManager.ImageAlphaProcessing] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class ImageColorSpaceConversionType:
        IMAGE_COLOR_CONVERSION_LINEAR_TO_SRGB: ClassVar[Mari.ImageManager.ImageColorSpaceConversionType] = ...
        IMAGE_COLOR_CONVERSION_NONE: ClassVar[Mari.ImageManager.ImageColorSpaceConversionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    IMAGE_COLOR_CONVERSION_LINEAR_TO_SRGB: ClassVar[Mari.ImageManager.ImageColorSpaceConversionType] = ...
    IMAGE_COLOR_CONVERSION_NONE: ClassVar[Mari.ImageManager.ImageColorSpaceConversionType] = ...
    IMAGE_NO_PRE_MULTIPLY_ALPHA: ClassVar[Mari.ImageManager.ImageAlphaProcessing] = ...
    IMAGE_PRE_MULTIPLY_ALPHA: ClassVar[Mari.ImageManager.ImageAlphaProcessing] = ...
    beginImageLoading: ClassVar[PySide2.QtCore.Signal] = ...
    endImageLoading: ClassVar[PySide2.QtCore.Signal] = ...
    handleProtocol: ClassVar[PySide2.QtCore.Signal] = ...
    imageLoaded: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self, *args, **kwargs) -> Any: ...
    def addCategory(self, *args, **kwargs) -> Any: ...
    def addImage(self, *args, **kwargs) -> Any: ...
    def backgroundOpen(self, *args, **kwargs) -> Any: ...
    def categories(self, *args, **kwargs) -> Any: ...
    def clearTraces(self, *args, **kwargs) -> Any: ...
    def compressionList(self, *args, **kwargs) -> Any: ...
    def currentCategory(self, *args, **kwargs) -> Any: ...
    def defaultCompressionMethod(self, *args, **kwargs) -> Any: ...
    def defaultImageFormat(self, *args, **kwargs) -> Any: ...
    def getImage(self, *args, **kwargs) -> Any: ...
    def imageOperationList(self, *args, **kwargs) -> Any: ...
    def list(self, *args, **kwargs) -> Any: ...
    def open(self, *args, **kwargs) -> Any: ...
    def protocolSupported(self, *args, **kwargs) -> Any: ...
    def registerContextAction(self, *args, **kwargs) -> Any: ...
    def registerProtocolHandler(self, *args, **kwargs) -> Any: ...
    def remove(self, *args, **kwargs) -> Any: ...
    def removeCategory(self, *args, **kwargs) -> Any: ...
    def removeContextAction(self, *args, **kwargs) -> Any: ...
    def saveImages(self, *args, **kwargs) -> Any: ...
    def selectCategory(self, *args, **kwargs) -> Any: ...
    def selected(self, *args, **kwargs) -> Any: ...
    def setDefaultImageFormat(self, *args, **kwargs) -> Any: ...
    def setMetadata(self, *args, **kwargs) -> Any: ...
    def setTraceEnabled(self, *args, **kwargs) -> Any: ...
    def supportedReadFormats(self, *args, **kwargs) -> Any: ...
    def supportedTextureSizeList(self, *args, **kwargs) -> Any: ...
    def supportedWriteFormats(self, *args, **kwargs) -> Any: ...
    def traces(self, *args, **kwargs) -> Any: ...
    def unregisterProtocolHandler(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ImageMimeDataInfo(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def colorspaceConfigString(self, *args, **kwargs) -> Any: ...
    @classmethod
    def fromMimeDataString(cls, *args, **kwargs) -> Any: ...
    def path(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ImageOperation(Mari.Metadata):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def execute(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def operationDescription(self, *args, **kwargs) -> Any: ...
    def supportedOperations(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ImageProtocolHandler(Mari.Metadata):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def load(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ImageSet(Mari.Snapshotable):
    class ScaleChoice:
        SCALE_THE_IMAGE: ClassVar[Mari.ImageSet.ScaleChoice] = ...
        SCALE_THE_PATCH: ClassVar[Mari.ImageSet.ScaleChoice] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class Size:
        SIZE_1024: ClassVar[Mari.ImageSet.Size] = ...
        SIZE_16384: ClassVar[Mari.ImageSet.Size] = ...
        SIZE_2048: ClassVar[Mari.ImageSet.Size] = ...
        SIZE_256: ClassVar[Mari.ImageSet.Size] = ...
        SIZE_32768: ClassVar[Mari.ImageSet.Size] = ...
        SIZE_4096: ClassVar[Mari.ImageSet.Size] = ...
        SIZE_512: ClassVar[Mari.ImageSet.Size] = ...
        SIZE_8192: ClassVar[Mari.ImageSet.Size] = ...
        SIZE_DOUBLE: ClassVar[Mari.ImageSet.Size] = ...
        SIZE_HALF: ClassVar[Mari.ImageSet.Size] = ...
        SIZE_NULL: ClassVar[Mari.ImageSet.Size] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    SCALE_THE_IMAGE: ClassVar[Mari.ImageSet.ScaleChoice] = ...
    SCALE_THE_PATCH: ClassVar[Mari.ImageSet.ScaleChoice] = ...
    SIZE_1024: ClassVar[Mari.ImageSet.Size] = ...
    SIZE_16384: ClassVar[Mari.ImageSet.Size] = ...
    SIZE_2048: ClassVar[Mari.ImageSet.Size] = ...
    SIZE_256: ClassVar[Mari.ImageSet.Size] = ...
    SIZE_32768: ClassVar[Mari.ImageSet.Size] = ...
    SIZE_4096: ClassVar[Mari.ImageSet.Size] = ...
    SIZE_512: ClassVar[Mari.ImageSet.Size] = ...
    SIZE_8192: ClassVar[Mari.ImageSet.Size] = ...
    SIZE_DOUBLE: ClassVar[Mari.ImageSet.Size] = ...
    SIZE_HALF: ClassVar[Mari.ImageSet.Size] = ...
    SIZE_NULL: ClassVar[Mari.ImageSet.Size] = ...
    nameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addKeyFrame(self, *args, **kwargs) -> Any: ...
    @classmethod
    def calculateNewSize(cls, *args, **kwargs) -> Any: ...
    def createSnapshot(self, *args, **kwargs) -> Any: ...
    def defaultKeyFrame(self, *args, **kwargs) -> Any: ...
    def deleteSnapshot(self, *args, **kwargs) -> Any: ...
    def exportImages(self, *args, **kwargs) -> Any: ...
    def findSnapshotWithID(self, *args, **kwargs) -> Any: ...
    def frameCount(self, *args, **kwargs) -> Any: ...
    def frames(self, *args, **kwargs) -> Any: ...
    def image(self, *args, **kwargs) -> Any: ...
    def imageCount(self, *args, **kwargs) -> Any: ...
    def imageList(self, *args, **kwargs) -> Any: ...
    def importImages(self, *args, **kwargs) -> Any: ...
    def importImagesFromDict(self, *args, **kwargs) -> Any: ...
    @classmethod
    def internalScaleChoiceFromAPI(cls, *args, **kwargs) -> Any: ...
    def isAnimated(self, *args, **kwargs) -> Any: ...
    def isPtex(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def removeKeyFrame(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def revertToSnapshot(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    @classmethod
    def sizeFromQSize(cls, *args, **kwargs) -> Any: ...
    def snapshotList(self, *args, **kwargs) -> Any: ...
    def supportedWriteFormats(self, *args, **kwargs) -> Any: ...
    def uvImageList(self, *args, **kwargs) -> Any: ...
    def uvIndex(self, *args, **kwargs) -> Any: ...
    def uvIndices(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class IndexRangeList(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def fromString(self, *args, **kwargs) -> Any: ...
    def indexList(self, *args, **kwargs) -> Any: ...
    def toString(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class IndexRangeListWidget(Mari.WidgetBase):
    lostFocus: ClassVar[PySide2.QtCore.Signal] = ...
    movedMouse: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def setExtraControlsDisplayed(self, *args, **kwargs) -> Any: ...
    def setGeoEntity(self, *args, **kwargs) -> Any: ...
    def setUdimMode(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def udimMode(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class IntSlider(Mari.SliderBase):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    valueChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Layer(Mari.Metadata):
    class AdvancedBlendComponent:
        BLUE_BLEND: ClassVar[Mari.Layer.AdvancedBlendComponent] = ...
        GREEN_BLEND: ClassVar[Mari.Layer.AdvancedBlendComponent] = ...
        GREYSCALE_BLEND: ClassVar[Mari.Layer.AdvancedBlendComponent] = ...
        LUMINANCE_BLEND: ClassVar[Mari.Layer.AdvancedBlendComponent] = ...
        RED_BLEND: ClassVar[Mari.Layer.AdvancedBlendComponent] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class BlendMode:
        ADD: ClassVar[Mari.Layer.BlendMode] = ...
        ADD_NORMAL_MAPS: ClassVar[Mari.Layer.BlendMode] = ...
        BURN_HIGHLIGHTS: ClassVar[Mari.Layer.BlendMode] = ...
        BURN_MIDRANGE: ClassVar[Mari.Layer.BlendMode] = ...
        BURN_SHADOWS: ClassVar[Mari.Layer.BlendMode] = ...
        CLEAR: ClassVar[Mari.Layer.BlendMode] = ...
        COLOR: ClassVar[Mari.Layer.BlendMode] = ...
        COLOR_BURN: ClassVar[Mari.Layer.BlendMode] = ...
        COLOR_DODGE: ClassVar[Mari.Layer.BlendMode] = ...
        CONTRAST: ClassVar[Mari.Layer.BlendMode] = ...
        COPY: ClassVar[Mari.Layer.BlendMode] = ...
        COPY_RGB: ClassVar[Mari.Layer.BlendMode] = ...
        CUSTOM: ClassVar[Mari.Layer.BlendMode] = ...
        DARKEN: ClassVar[Mari.Layer.BlendMode] = ...
        DECONTRAST: ClassVar[Mari.Layer.BlendMode] = ...
        DIFFERENCE: ClassVar[Mari.Layer.BlendMode] = ...
        DODGE_HIGHLIGHTS: ClassVar[Mari.Layer.BlendMode] = ...
        DODGE_MIDRANGE: ClassVar[Mari.Layer.BlendMode] = ...
        DODGE_SHADOWS: ClassVar[Mari.Layer.BlendMode] = ...
        EXCLUSION: ClassVar[Mari.Layer.BlendMode] = ...
        HARD_LIGHT: ClassVar[Mari.Layer.BlendMode] = ...
        HARD_MIX: ClassVar[Mari.Layer.BlendMode] = ...
        HUE: ClassVar[Mari.Layer.BlendMode] = ...
        INVERSE_DIFFERENCE: ClassVar[Mari.Layer.BlendMode] = ...
        INVERT: ClassVar[Mari.Layer.BlendMode] = ...
        LIGHTEN: ClassVar[Mari.Layer.BlendMode] = ...
        LUMINANCE: ClassVar[Mari.Layer.BlendMode] = ...
        MIX: ClassVar[Mari.Layer.BlendMode] = ...
        MIX_NORMAL_MAPS: ClassVar[Mari.Layer.BlendMode] = ...
        MULTIPLY: ClassVar[Mari.Layer.BlendMode] = ...
        NUDGE_FLOW_VECTORS: ClassVar[Mari.Layer.BlendMode] = ...
        NUDGE_NORMAL_VECTORS: ClassVar[Mari.Layer.BlendMode] = ...
        OVERLAY: ClassVar[Mari.Layer.BlendMode] = ...
        PAINT_FLOW_VECTORS: ClassVar[Mari.Layer.BlendMode] = ...
        PAINT_NORMAL_VECTORS: ClassVar[Mari.Layer.BlendMode] = ...
        PIN_LIGHT: ClassVar[Mari.Layer.BlendMode] = ...
        REORIENTED_NORMAL_MAPPING: ClassVar[Mari.Layer.BlendMode] = ...
        SATURATION: ClassVar[Mari.Layer.BlendMode] = ...
        SCALE_VECTORS: ClassVar[Mari.Layer.BlendMode] = ...
        SCREEN: ClassVar[Mari.Layer.BlendMode] = ...
        SOFT_LIGHT: ClassVar[Mari.Layer.BlendMode] = ...
        SPONGE_DESATURATE: ClassVar[Mari.Layer.BlendMode] = ...
        VIVID_LIGHT: ClassVar[Mari.Layer.BlendMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class BlendType:
        ADVANCED_BLEND: ClassVar[Mari.Layer.BlendType] = ...
        BASIC_BLEND: ClassVar[Mari.Layer.BlendType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class MaskType:
        FROM_ALPHA: ClassVar[Mari.Layer.MaskType] = ...
        FROM_SELECTION_GROUP: ClassVar[Mari.Layer.MaskType] = ...
        HIDE_ALL: ClassVar[Mari.Layer.MaskType] = ...
        REVEAL_ALL: ClassVar[Mari.Layer.MaskType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class SwizzleDestination:
        SWIZZLE_DST_ALPHA: ClassVar[Mari.Layer.SwizzleDestination] = ...
        SWIZZLE_DST_BLUE: ClassVar[Mari.Layer.SwizzleDestination] = ...
        SWIZZLE_DST_GREEN: ClassVar[Mari.Layer.SwizzleDestination] = ...
        SWIZZLE_DST_RED: ClassVar[Mari.Layer.SwizzleDestination] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class SwizzleSource:
        SWIZZLE_SRC_ALPHA: ClassVar[Mari.Layer.SwizzleSource] = ...
        SWIZZLE_SRC_BLUE: ClassVar[Mari.Layer.SwizzleSource] = ...
        SWIZZLE_SRC_GREEN: ClassVar[Mari.Layer.SwizzleSource] = ...
        SWIZZLE_SRC_ONE: ClassVar[Mari.Layer.SwizzleSource] = ...
        SWIZZLE_SRC_RED: ClassVar[Mari.Layer.SwizzleSource] = ...
        SWIZZLE_SRC_ZERO: ClassVar[Mari.Layer.SwizzleSource] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    ADD: ClassVar[Mari.Layer.BlendMode] = ...
    ADD_NORMAL_MAPS: ClassVar[Mari.Layer.BlendMode] = ...
    ADVANCED_BLEND: ClassVar[Mari.Layer.BlendType] = ...
    BASIC_BLEND: ClassVar[Mari.Layer.BlendType] = ...
    BLUE_BLEND: ClassVar[Mari.Layer.AdvancedBlendComponent] = ...
    BURN_HIGHLIGHTS: ClassVar[Mari.Layer.BlendMode] = ...
    BURN_MIDRANGE: ClassVar[Mari.Layer.BlendMode] = ...
    BURN_SHADOWS: ClassVar[Mari.Layer.BlendMode] = ...
    CLEAR: ClassVar[Mari.Layer.BlendMode] = ...
    COLOR: ClassVar[Mari.Layer.BlendMode] = ...
    COLOR_BURN: ClassVar[Mari.Layer.BlendMode] = ...
    COLOR_DODGE: ClassVar[Mari.Layer.BlendMode] = ...
    CONTRAST: ClassVar[Mari.Layer.BlendMode] = ...
    COPY: ClassVar[Mari.Layer.BlendMode] = ...
    COPY_RGB: ClassVar[Mari.Layer.BlendMode] = ...
    CUSTOM: ClassVar[Mari.Layer.BlendMode] = ...
    DARKEN: ClassVar[Mari.Layer.BlendMode] = ...
    DECONTRAST: ClassVar[Mari.Layer.BlendMode] = ...
    DIFFERENCE: ClassVar[Mari.Layer.BlendMode] = ...
    DODGE_HIGHLIGHTS: ClassVar[Mari.Layer.BlendMode] = ...
    DODGE_MIDRANGE: ClassVar[Mari.Layer.BlendMode] = ...
    DODGE_SHADOWS: ClassVar[Mari.Layer.BlendMode] = ...
    EXCLUSION: ClassVar[Mari.Layer.BlendMode] = ...
    FROM_ALPHA: ClassVar[Mari.Layer.MaskType] = ...
    FROM_SELECTION_GROUP: ClassVar[Mari.Layer.MaskType] = ...
    GREEN_BLEND: ClassVar[Mari.Layer.AdvancedBlendComponent] = ...
    GREYSCALE_BLEND: ClassVar[Mari.Layer.AdvancedBlendComponent] = ...
    HARD_LIGHT: ClassVar[Mari.Layer.BlendMode] = ...
    HARD_MIX: ClassVar[Mari.Layer.BlendMode] = ...
    HIDE_ALL: ClassVar[Mari.Layer.MaskType] = ...
    HUE: ClassVar[Mari.Layer.BlendMode] = ...
    INVERSE_DIFFERENCE: ClassVar[Mari.Layer.BlendMode] = ...
    INVERT: ClassVar[Mari.Layer.BlendMode] = ...
    LIGHTEN: ClassVar[Mari.Layer.BlendMode] = ...
    LUMINANCE: ClassVar[Mari.Layer.BlendMode] = ...
    LUMINANCE_BLEND: ClassVar[Mari.Layer.AdvancedBlendComponent] = ...
    MIX: ClassVar[Mari.Layer.BlendMode] = ...
    MIX_NORMAL_MAPS: ClassVar[Mari.Layer.BlendMode] = ...
    MULTIPLY: ClassVar[Mari.Layer.BlendMode] = ...
    NUDGE_FLOW_VECTORS: ClassVar[Mari.Layer.BlendMode] = ...
    NUDGE_NORMAL_VECTORS: ClassVar[Mari.Layer.BlendMode] = ...
    OVERLAY: ClassVar[Mari.Layer.BlendMode] = ...
    PAINT_FLOW_VECTORS: ClassVar[Mari.Layer.BlendMode] = ...
    PAINT_NORMAL_VECTORS: ClassVar[Mari.Layer.BlendMode] = ...
    PIN_LIGHT: ClassVar[Mari.Layer.BlendMode] = ...
    RED_BLEND: ClassVar[Mari.Layer.AdvancedBlendComponent] = ...
    REORIENTED_NORMAL_MAPPING: ClassVar[Mari.Layer.BlendMode] = ...
    REVEAL_ALL: ClassVar[Mari.Layer.MaskType] = ...
    SATURATION: ClassVar[Mari.Layer.BlendMode] = ...
    SCALE_VECTORS: ClassVar[Mari.Layer.BlendMode] = ...
    SCREEN: ClassVar[Mari.Layer.BlendMode] = ...
    SOFT_LIGHT: ClassVar[Mari.Layer.BlendMode] = ...
    SPONGE_DESATURATE: ClassVar[Mari.Layer.BlendMode] = ...
    SWIZZLE_DST_ALPHA: ClassVar[Mari.Layer.SwizzleDestination] = ...
    SWIZZLE_DST_BLUE: ClassVar[Mari.Layer.SwizzleDestination] = ...
    SWIZZLE_DST_GREEN: ClassVar[Mari.Layer.SwizzleDestination] = ...
    SWIZZLE_DST_RED: ClassVar[Mari.Layer.SwizzleDestination] = ...
    SWIZZLE_SRC_ALPHA: ClassVar[Mari.Layer.SwizzleSource] = ...
    SWIZZLE_SRC_BLUE: ClassVar[Mari.Layer.SwizzleSource] = ...
    SWIZZLE_SRC_GREEN: ClassVar[Mari.Layer.SwizzleSource] = ...
    SWIZZLE_SRC_ONE: ClassVar[Mari.Layer.SwizzleSource] = ...
    SWIZZLE_SRC_RED: ClassVar[Mari.Layer.SwizzleSource] = ...
    SWIZZLE_SRC_ZERO: ClassVar[Mari.Layer.SwizzleSource] = ...
    VIVID_LIGHT: ClassVar[Mari.Layer.BlendMode] = ...
    blendAmountChanged: ClassVar[PySide2.QtCore.Signal] = ...
    blendComponentChanged: ClassVar[PySide2.QtCore.Signal] = ...
    blendModeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    blendTypeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    cacheStateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    colorTagChanged: ClassVar[PySide2.QtCore.Signal] = ...
    convertedToPaint: ClassVar[PySide2.QtCore.Signal] = ...
    lockedChanged: ClassVar[PySide2.QtCore.Signal] = ...
    maskCreated: ClassVar[PySide2.QtCore.Signal] = ...
    maskRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    maskStackCreated: ClassVar[PySide2.QtCore.Signal] = ...
    nameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    selectedChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def activeCacheUpToHereParents(self, *args, **kwargs) -> Any: ...
    @classmethod
    def advancedBlendComponentName(cls, *args, **kwargs) -> Any: ...
    def advancedBlendComponentStr(self, *args, **kwargs) -> Any: ...
    def blendAmount(self, *args, **kwargs) -> Any: ...
    def blendAmountEnabled(self, *args, **kwargs) -> Any: ...
    def blendMode(self, *args, **kwargs) -> Any: ...
    @classmethod
    def blendModeName(cls, *args, **kwargs) -> Any: ...
    def blendModePath(self, *args, **kwargs) -> Any: ...
    def blendModeStr(self, *args, **kwargs) -> Any: ...
    def blendType(self, *args, **kwargs) -> Any: ...
    @classmethod
    def blendTypeName(cls, *args, **kwargs) -> Any: ...
    def blendTypeStr(self, *args, **kwargs) -> Any: ...
    def cacheLayer(self, *args, **kwargs) -> Any: ...
    def cacheUpToHere(self, *args, **kwargs) -> Any: ...
    def cacheUpToHereParents(self, *args, **kwargs) -> Any: ...
    def close(self, *args, **kwargs) -> Any: ...
    def colorTag(self, *args, **kwargs) -> Any: ...
    @classmethod
    def colorTagNames(cls, *args, **kwargs) -> Any: ...
    def getAdvancedBlendComponent(self, *args, **kwargs) -> Any: ...
    def getLayerBelowBlendLut(self, *args, **kwargs) -> Any: ...
    def getThisLayerBlendLut(self, *args, **kwargs) -> Any: ...
    def groupStack(self, *args, **kwargs) -> Any: ...
    def hasCacheUpToHere(self, *args, **kwargs) -> Any: ...
    def hasLayerCache(self, *args, **kwargs) -> Any: ...
    def hasMask(self, *args, **kwargs) -> Any: ...
    def hasMaskCustomProcedural(self, *args, **kwargs) -> Any: ...
    def hasMaskStack(self, *args, **kwargs) -> Any: ...
    def hash(self, *args, **kwargs) -> Any: ...
    def imageHash(self, *args, **kwargs) -> Any: ...
    def isAdjustableLayer(self, *args, **kwargs) -> Any: ...
    def isAdjustmentLayer(self, *args, **kwargs) -> Any: ...
    def isBakePointLayer(self, *args, **kwargs) -> Any: ...
    def isCachedUpToHere(self, *args, **kwargs) -> Any: ...
    def isChannelLayer(self, *args, **kwargs) -> Any: ...
    def isChildOfActiveCacheUpToHere(self, *args, **kwargs) -> Any: ...
    def isChildOfCacheUpToHere(self, *args, **kwargs) -> Any: ...
    def isCustomProceduralLayer(self, *args, **kwargs) -> Any: ...
    def isGraphLayer(self, *args, **kwargs) -> Any: ...
    def isGroupLayer(self, *args, **kwargs) -> Any: ...
    def isLayerCached(self, *args, **kwargs) -> Any: ...
    def isLocked(self, *args, **kwargs) -> Any: ...
    def isMaskEnabled(self, *args, **kwargs) -> Any: ...
    def isModifiable(self, *args, **kwargs) -> Any: ...
    def isMultiChannelGroupLayer(self, *args, **kwargs) -> Any: ...
    def isMultiChannelMaterialLayer(self, *args, **kwargs) -> Any: ...
    def isPaintableLayer(self, *args, **kwargs) -> Any: ...
    def isProceduralLayer(self, *args, **kwargs) -> Any: ...
    def isSelected(self, *args, **kwargs) -> Any: ...
    def isShaderLayer(self, *args, **kwargs) -> Any: ...
    def isShared(self, *args, **kwargs) -> Any: ...
    def isVisible(self, *args, **kwargs) -> Any: ...
    def layerNode(self, *args, **kwargs) -> Any: ...
    def makeCurrent(self, *args, **kwargs) -> Any: ...
    def makeMask(self, *args, **kwargs) -> Any: ...
    def makeMaskCustomProcedural(self, *args, **kwargs) -> Any: ...
    def makeMaskStack(self, *args, **kwargs) -> Any: ...
    def maskCustomProceduralNode(self, *args, **kwargs) -> Any: ...
    def maskImageSet(self, *args, **kwargs) -> Any: ...
    def maskStack(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def parents(self, *args, **kwargs) -> Any: ...
    def removeMask(self, *args, **kwargs) -> Any: ...
    def setAdvancedBlendComponent(self, *args, **kwargs) -> Any: ...
    def setBlendAmount(self, *args, **kwargs) -> Any: ...
    def setBlendAmountEnabled(self, *args, **kwargs) -> Any: ...
    def setBlendMode(self, *args, **kwargs) -> Any: ...
    def setBlendType(self, *args, **kwargs) -> Any: ...
    def setCachedUpToHere(self, *args, **kwargs) -> Any: ...
    def setColorTag(self, *args, **kwargs) -> Any: ...
    def setLayerBelowBlendLut(self, *args, **kwargs) -> Any: ...
    def setLayerCached(self, *args, **kwargs) -> Any: ...
    def setLocked(self, *args, **kwargs) -> Any: ...
    def setMaskEnabled(self, *args, **kwargs) -> Any: ...
    def setMaskImageSet(self, *args, **kwargs) -> Any: ...
    def setMaskStack(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setSelected(self, *args, **kwargs) -> Any: ...
    def setSwizzle(self, *args, **kwargs) -> Any: ...
    def setThisLayerBlendLut(self, *args, **kwargs) -> Any: ...
    def setVisibility(self, *args, **kwargs) -> Any: ...
    def siblingSharedLayerList(self, *args, **kwargs) -> Any: ...
    def swizzle(self, *args, **kwargs) -> Any: ...
    def uncacheLayer(self, *args, **kwargs) -> Any: ...
    def uncacheUpToHere(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class LayerStack(Mari.Metadata):
    class ClearSelectionFlag:
        CLEAR_ADJUSTMENT_STACKS: ClassVar[Mari.LayerStack.ClearSelectionFlag] = ...
        CLEAR_GROUPS: ClassVar[Mari.LayerStack.ClearSelectionFlag] = ...
        CLEAR_MASK_STACKS: ClassVar[Mari.LayerStack.ClearSelectionFlag] = ...
        DEFAULT_CLEAR_SELECTION_FLAGS: ClassVar[Mari.LayerStack.ClearSelectionFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class LayerCreateFlag:
        CLEAR_CURRENT_LAYER_SELECTION: ClassVar[Mari.LayerStack.LayerCreateFlag] = ...
        DEFAULT_LAYER_CREATE_FLAGS: ClassVar[Mari.LayerStack.LayerCreateFlag] = ...
        INSERT_NEW_LAYER_ABOVE_SELECTION: ClassVar[Mari.LayerStack.LayerCreateFlag] = ...
        INSERT_NEW_LAYER_BELOW_REF_LAYER: ClassVar[Mari.LayerStack.LayerCreateFlag] = ...
        MAKE_NEW_LAYER_CURRENT: ClassVar[Mari.LayerStack.LayerCreateFlag] = ...
        SELECT_NEW_LAYERS: ClassVar[Mari.LayerStack.LayerCreateFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class LayerImportOption:
        CREATE_NEW_LAYERS: ClassVar[Mari.LayerStack.LayerImportOption] = ...
        OPTION_NOT_SPECIFIED: ClassVar[Mari.LayerStack.LayerImportOption] = ...
        SKIP_LAYERS: ClassVar[Mari.LayerStack.LayerImportOption] = ...
        UPDATE_LAYERS: ClassVar[Mari.LayerStack.LayerImportOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    CLEAR_ADJUSTMENT_STACKS: ClassVar[Mari.LayerStack.ClearSelectionFlag] = ...
    CLEAR_CURRENT_LAYER_SELECTION: ClassVar[Mari.LayerStack.LayerCreateFlag] = ...
    CLEAR_GROUPS: ClassVar[Mari.LayerStack.ClearSelectionFlag] = ...
    CLEAR_MASK_STACKS: ClassVar[Mari.LayerStack.ClearSelectionFlag] = ...
    CREATE_NEW_LAYERS: ClassVar[Mari.LayerStack.LayerImportOption] = ...
    DEFAULT_CLEAR_SELECTION_FLAGS: ClassVar[Mari.LayerStack.ClearSelectionFlag] = ...
    DEFAULT_LAYER_CREATE_FLAGS: ClassVar[Mari.LayerStack.LayerCreateFlag] = ...
    INSERT_NEW_LAYER_ABOVE_SELECTION: ClassVar[Mari.LayerStack.LayerCreateFlag] = ...
    INSERT_NEW_LAYER_BELOW_REF_LAYER: ClassVar[Mari.LayerStack.LayerCreateFlag] = ...
    MAKE_NEW_LAYER_CURRENT: ClassVar[Mari.LayerStack.LayerCreateFlag] = ...
    OPTION_NOT_SPECIFIED: ClassVar[Mari.LayerStack.LayerImportOption] = ...
    SELECT_NEW_LAYERS: ClassVar[Mari.LayerStack.LayerCreateFlag] = ...
    SKIP_LAYERS: ClassVar[Mari.LayerStack.LayerImportOption] = ...
    UPDATE_LAYERS: ClassVar[Mari.LayerStack.LayerImportOption] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def adjustmentLayerTypeList(cls, *args, **kwargs) -> Any: ...
    def clearSelection(self, *args, **kwargs) -> Any: ...
    def createAdjustmentLayer(self, *args, **kwargs) -> Any: ...
    def createBakePointLayer(self, *args, **kwargs) -> Any: ...
    def createChannelLayer(self, *args, **kwargs) -> Any: ...
    def createCustomProceduralLayer(self, *args, **kwargs) -> Any: ...
    def createGraphLayer(self, *args, **kwargs) -> Any: ...
    def createGroupLayer(self, *args, **kwargs) -> Any: ...
    def createMaterialLayer(self, *args, **kwargs) -> Any: ...
    def createMultiChannelGroupLayer(self, *args, **kwargs) -> Any: ...
    def createPaintableLayer(self, *args, **kwargs) -> Any: ...
    def createProceduralLayer(self, *args, **kwargs) -> Any: ...
    def createShaderLayer(self, *args, **kwargs) -> Any: ...
    def duplicateLayers(self, *args, **kwargs) -> Any: ...
    def exportImages(self, *args, **kwargs) -> Any: ...
    def exportImagesFlattened(self, *args, **kwargs) -> Any: ...
    def exportSelectedPatches(self, *args, **kwargs) -> Any: ...
    def exportSelectedPatchesFlattened(self, *args, **kwargs) -> Any: ...
    def findLayer(self, *args, **kwargs) -> Any: ...
    def groupLayers(self, *args, **kwargs) -> Any: ...
    def hash(self, *args, **kwargs) -> Any: ...
    def imageHash(self, *args, **kwargs) -> Any: ...
    def importImages(self, *args, **kwargs) -> Any: ...
    def layer(self, *args, **kwargs) -> Any: ...
    def layerList(self, *args, **kwargs) -> Any: ...
    def mergeLayers(self, *args, **kwargs) -> Any: ...
    def moveLayer(self, *args, **kwargs) -> Any: ...
    def moveLayerBelow(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    @classmethod
    def proceduralLayerTypeList(cls, *args, **kwargs) -> Any: ...
    def removeLayers(self, *args, **kwargs) -> Any: ...
    def shareLayer(self, *args, **kwargs) -> Any: ...
    def ungroupLayers(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Light(Mari.Metadata):
    class FixedTo:
        CAMERA: ClassVar[Mari.Light.FixedTo] = ...
        SCENE: ClassVar[Mari.Light.FixedTo] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    CAMERA: ClassVar[Mari.Light.FixedTo] = ...
    SCENE: ClassVar[Mari.Light.FixedTo] = ...
    onChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def isEnvironmentLight(self, *args, **kwargs) -> Any: ...
    def isOn(self, *args, **kwargs) -> Any: ...
    def isPointLight(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def setOn(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class LightManager(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def current(self, *args, **kwargs) -> Any: ...
    def list(self, *args, **kwargs) -> Any: ...
    def selection(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class LineEdit(Mari.WidgetBase):
    lostFocus: ClassVar[PySide2.QtCore.Signal] = ...
    movedMouse: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addFloatValidator(self, *args, **kwargs) -> Any: ...
    def home(self, *args, **kwargs) -> Any: ...
    def isReadOnly(self, *args, **kwargs) -> Any: ...
    def setRange(self, *args, **kwargs) -> Any: ...
    def setReadOnly(self, *args, **kwargs) -> Any: ...
    def setText(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def text(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class LocatorEntity(Mari.Lockable):
    nameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def addLocator(self, *args, **kwargs) -> Any: ...
    def hideLocator(self, *args, **kwargs) -> Any: ...
    def isSelected(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setSelected(self, *args, **kwargs) -> Any: ...
    def setTransform(self, *args, **kwargs) -> Any: ...
    def showLocator(self, *args, **kwargs) -> Any: ...
    def transform(self, *args, **kwargs) -> Any: ...
    def translation(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class LocatorList(Mari.API):
    class LocatorListType:
        LOCATOR_LIST_TYPE_MATRIX: ClassVar[Mari.LocatorList.LocatorListType] = ...
        LOCATOR_LIST_TYPE_PROJECTOR: ClassVar[Mari.LocatorList.LocatorListType] = ...
        LOCATOR_LIST_TYPE_ROTATION: ClassVar[Mari.LocatorList.LocatorListType] = ...
        LOCATOR_LIST_TYPE_SCALE: ClassVar[Mari.LocatorList.LocatorListType] = ...
        LOCATOR_LIST_TYPE_TRANSLATION: ClassVar[Mari.LocatorList.LocatorListType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    LOCATOR_LIST_TYPE_MATRIX: ClassVar[Mari.LocatorList.LocatorListType] = ...
    LOCATOR_LIST_TYPE_PROJECTOR: ClassVar[Mari.LocatorList.LocatorListType] = ...
    LOCATOR_LIST_TYPE_ROTATION: ClassVar[Mari.LocatorList.LocatorListType] = ...
    LOCATOR_LIST_TYPE_SCALE: ClassVar[Mari.LocatorList.LocatorListType] = ...
    LOCATOR_LIST_TYPE_TRANSLATION: ClassVar[Mari.LocatorList.LocatorListType] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def currentLocator(self, *args, **kwargs) -> Any: ...
    def internalLocatorList(self, *args, **kwargs) -> Any: ...
    def locatorType(self, *args, **kwargs) -> Any: ...
    def locatorUUID(self, *args, **kwargs) -> Any: ...
    def rotationVector(self, *args, **kwargs) -> Any: ...
    def scaleVector(self, *args, **kwargs) -> Any: ...
    def setCurrentLocator(self, *args, **kwargs) -> Any: ...
    def setCurrentProjector(self, *args, **kwargs) -> Any: ...
    def setLocatorType(self, *args, **kwargs) -> Any: ...
    def setRotationVector(self, *args, **kwargs) -> Any: ...
    def setScaleVector(self, *args, **kwargs) -> Any: ...
    def setShowUI(self, *args, **kwargs) -> Any: ...
    def setTranslationVector(self, *args, **kwargs) -> Any: ...
    def setWorldSpace(self, *args, **kwargs) -> Any: ...
    def showUI(self, *args, **kwargs) -> Any: ...
    def translationVector(self, *args, **kwargs) -> Any: ...
    def worldSpace(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class Lockable(Mari.Metadata):
    lockedChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    visibilityChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def hide(self, *args, **kwargs) -> Any: ...
    def isLocked(self, *args, **kwargs) -> Any: ...
    def isVisible(self, *args, **kwargs) -> Any: ...
    def lock(self, *args, **kwargs) -> Any: ...
    def setLocked(self, *args, **kwargs) -> Any: ...
    def setVisibility(self, *args, **kwargs) -> Any: ...
    def show(self, *args, **kwargs) -> Any: ...
    def unlock(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class LookUpTable(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def controlPoints(self, *args, **kwargs) -> Any: ...
    def controlPointsAsString(self, *args, **kwargs) -> Any: ...
    def invert(self, *args, **kwargs) -> Any: ...
    def isClamped(self, *args, **kwargs) -> Any: ...
    def setClamped(self, *args, **kwargs) -> Any: ...
    def setControlPoints(self, *args, **kwargs) -> Any: ...
    def setControlPointsFromString(self, *args, **kwargs) -> Any: ...
    def setLinear(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class MaterialNode(Mari.GroupNode):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def addMaterialTag(self, *args, **kwargs) -> Any: ...
    def addMaterialTags(self, *args, **kwargs) -> Any: ...
    def exportMaterial(self, *args, **kwargs) -> Any: ...
    def geoChannels(self, *args, **kwargs) -> Any: ...
    def materialTags(self, *args, **kwargs) -> Any: ...
    def missingGeoChannels(self, *args, **kwargs) -> Any: ...
    @classmethod
    def readMetadataFromMaterialFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def readSystemMetadataFromMaterialFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def readTagsFromMaterialFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def readThumbnailFromMaterialFile(cls, *args, **kwargs) -> Any: ...
    def removeMaterialTag(self, *args, **kwargs) -> Any: ...
    def removeMaterialTags(self, *args, **kwargs) -> Any: ...
    def setMaterialTags(self, *args, **kwargs) -> Any: ...
    def shaderModel(self, *args, **kwargs) -> Any: ...
    @classmethod
    def writeMetadataToMaterialFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def writeTagsToMaterialFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def writeThumbnailToMaterialFile(cls, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Matrix(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def asList(self, *args, **kwargs) -> Any: ...
    def length(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class MenuManager(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def actions(self, *args, **kwargs) -> Any: ...
    def addAction(self, *args, **kwargs) -> Any: ...
    def addSeparator(self, *args, **kwargs) -> Any: ...
    def itemNames(self, *args, **kwargs) -> Any: ...
    def removeAction(self, *args, **kwargs) -> Any: ...
    def roots(self, *args, **kwargs) -> Any: ...
    def sets(self, *args, **kwargs) -> Any: ...
    def submenus(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class MessageBox(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def critical(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def information(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def question(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def warning(cls, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Metadata(Mari.API):
    class MetadataFlag:
        METADATA_EDITABLE: ClassVar[Mari.Metadata.MetadataFlag] = ...
        METADATA_REMOVABLE: ClassVar[Mari.Metadata.MetadataFlag] = ...
        METADATA_REMOVEABLE: ClassVar[Mari.Metadata.MetadataFlag] = ...
        METADATA_SAVED: ClassVar[Mari.Metadata.MetadataFlag] = ...
        METADATA_UNDOABLE: ClassVar[Mari.Metadata.MetadataFlag] = ...
        METADATA_VISIBLE: ClassVar[Mari.Metadata.MetadataFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class MetadataFlags:
        __hash__: ClassVar[None] = ...
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class MetadataGroupHint:
        METADATA_GROUP_HINT_DISPLAY: ClassVar[Mari.Metadata.MetadataGroupHint] = ...
        METADATA_GROUP_HINT_SORTABLE: ClassVar[Mari.Metadata.MetadataGroupHint] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class MetadataGroupHints:
        __hash__: ClassVar[None] = ...
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class MetadataTypeFlag:
        METADATA_TYPE_FLAG_COLOR_SCALAR: ClassVar[Mari.Metadata.MetadataTypeFlag] = ...
        METADATA_TYPE_FLAG_FLOAT_LOGARITHMIC: ClassVar[Mari.Metadata.MetadataTypeFlag] = ...
        METADATA_TYPE_FLAG_STRING_MULTILINE: ClassVar[Mari.Metadata.MetadataTypeFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class MetadataTypeFlags:
        __hash__: ClassVar[None] = ...
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    METADATA_EDITABLE: ClassVar[Mari.Metadata.MetadataFlag] = ...
    METADATA_GROUP_HINT_DISPLAY: ClassVar[Mari.Metadata.MetadataGroupHint] = ...
    METADATA_GROUP_HINT_SORTABLE: ClassVar[Mari.Metadata.MetadataGroupHint] = ...
    METADATA_REMOVABLE: ClassVar[Mari.Metadata.MetadataFlag] = ...
    METADATA_REMOVEABLE: ClassVar[Mari.Metadata.MetadataFlag] = ...
    METADATA_SAVED: ClassVar[Mari.Metadata.MetadataFlag] = ...
    METADATA_TYPE_FLAG_COLOR_SCALAR: ClassVar[Mari.Metadata.MetadataTypeFlag] = ...
    METADATA_TYPE_FLAG_FLOAT_LOGARITHMIC: ClassVar[Mari.Metadata.MetadataTypeFlag] = ...
    METADATA_TYPE_FLAG_STRING_MULTILINE: ClassVar[Mari.Metadata.MetadataTypeFlag] = ...
    METADATA_UNDOABLE: ClassVar[Mari.Metadata.MetadataFlag] = ...
    METADATA_VISIBLE: ClassVar[Mari.Metadata.MetadataFlag] = ...
    metadataCreated: ClassVar[PySide2.QtCore.Signal] = ...
    metadataEnabledChanged: ClassVar[PySide2.QtCore.Signal] = ...
    metadataRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    metadataValueChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def hasMetadata(self, *args, **kwargs) -> Any: ...
    @classmethod
    def isSupportedMetadataType(cls, *args, **kwargs) -> Any: ...
    def metadata(self, *args, **kwargs) -> Any: ...
    def metadataAsImage(self, *args, **kwargs) -> Any: ...
    def metadataDefault(self, *args, **kwargs) -> Any: ...
    def metadataDescription(self, *args, **kwargs) -> Any: ...
    def metadataDisplayName(self, *args, **kwargs) -> Any: ...
    def metadataFlags(self, *args, **kwargs) -> Any: ...
    def metadataIsEnabled(self, *args, **kwargs) -> Any: ...
    def metadataItemList(self, *args, **kwargs) -> Any: ...
    def metadataMax(self, *args, **kwargs) -> Any: ...
    def metadataMin(self, *args, **kwargs) -> Any: ...
    def metadataNames(self, *args, **kwargs) -> Any: ...
    def metadataStep(self, *args, **kwargs) -> Any: ...
    def metadataTypeFlags(self, *args, **kwargs) -> Any: ...
    def removeMetadata(self, *args, **kwargs) -> Any: ...
    def setMetadata(self, *args, **kwargs) -> Any: ...
    def setMetadataDefault(self, *args, **kwargs) -> Any: ...
    def setMetadataDescription(self, *args, **kwargs) -> Any: ...
    def setMetadataDisplayName(self, *args, **kwargs) -> Any: ...
    def setMetadataEnabled(self, *args, **kwargs) -> Any: ...
    def setMetadataFlags(self, *args, **kwargs) -> Any: ...
    def setMetadataGroupHints(self, *args, **kwargs) -> Any: ...
    def setMetadataItemList(self, *args, **kwargs) -> Any: ...
    def setMetadataRange(self, *args, **kwargs) -> Any: ...
    def setMetadataStep(self, *args, **kwargs) -> Any: ...
    def setMetadataTypeFlags(self, *args, **kwargs) -> Any: ...
    def uuid(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Miscellaneous(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def createIconFromPath(self, *args, **kwargs) -> Any: ...
    def getExistingDirectory(self, *args, **kwargs) -> Any: ...
    def getMkdirCommand(self, *args, **kwargs) -> Any: ...
    def getOpenFileName(self, *args, **kwargs) -> Any: ...
    def getSaveFileName(self, *args, **kwargs) -> Any: ...
    def registerRegExpChannelNameExtractor(self, *args, **kwargs) -> Any: ...
    def setMkdirCommand(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class MultiChannelBakePointNode(Mari.GroupNode):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def bakeActive(self, *args, **kwargs) -> Any: ...
    def bakePointNode(self, *args, **kwargs) -> Any: ...
    def bakeStreams(self, *args, **kwargs) -> Any: ...
    def deleteBake(self, *args, **kwargs) -> Any: ...
    def setLimitBake(self, *args, **kwargs) -> Any: ...
    def setLimitBakeRange(self, *args, **kwargs) -> Any: ...
    def shaderModel(self, *args, **kwargs) -> Any: ...
    def streamBakePointNodes(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class MultiChannelContainer(Mari.Metadata):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def isVisible(self, *args, **kwargs) -> Any: ...
    def setVisibility(self, *args, **kwargs) -> Any: ...
    def shaderModel(self, *args, **kwargs) -> Any: ...
    def streamList(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class MultiChannelGroup(Mari.MultiChannelContainer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def flattenLayerGroup(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class MultiChannelGroupLayer(Mari.MultiChannelLayer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def container(self, *args, **kwargs) -> Any: ...
    def layerStack(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class MultiChannelLayer(Mari.Layer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def activeCacheUpToHereParents(self, *args, **kwargs) -> Any: ...
    def blendAmount(self, *args, **kwargs) -> Any: ...
    def blendAmountEnabled(self, *args, **kwargs) -> Any: ...
    def blendMode(self, *args, **kwargs) -> Any: ...
    def blendModePath(self, *args, **kwargs) -> Any: ...
    def blendModeStr(self, *args, **kwargs) -> Any: ...
    def blendType(self, *args, **kwargs) -> Any: ...
    def cacheUpToHereParents(self, *args, **kwargs) -> Any: ...
    def getAdvancedBlendComponent(self, *args, **kwargs) -> Any: ...
    def getLayerBelowBlendLut(self, *args, **kwargs) -> Any: ...
    def getThisLayerBlendLut(self, *args, **kwargs) -> Any: ...
    def groupStack(self, *args, **kwargs) -> Any: ...
    def isChildOfActiveCacheUpToHere(self, *args, **kwargs) -> Any: ...
    def isChildOfCacheUpToHere(self, *args, **kwargs) -> Any: ...
    def isMultiChannelGroupLayer(self, *args, **kwargs) -> Any: ...
    def isMultiChannelMaterialLayer(self, *args, **kwargs) -> Any: ...
    def isVisible(self, *args, **kwargs) -> Any: ...
    def parents(self, *args, **kwargs) -> Any: ...
    def setAdvancedBlendComponent(self, *args, **kwargs) -> Any: ...
    def setBlendAmount(self, *args, **kwargs) -> Any: ...
    def setBlendAmountEnabled(self, *args, **kwargs) -> Any: ...
    def setBlendMode(self, *args, **kwargs) -> Any: ...
    def setBlendType(self, *args, **kwargs) -> Any: ...
    def setLayerBelowBlendLut(self, *args, **kwargs) -> Any: ...
    def setSwizzle(self, *args, **kwargs) -> Any: ...
    def setThisLayerBlendLut(self, *args, **kwargs) -> Any: ...
    def setVisibility(self, *args, **kwargs) -> Any: ...
    def streamName(self, *args, **kwargs) -> Any: ...
    def swizzle(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class MultiChannelMaterial(Mari.MultiChannelContainer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def convertToPaintable(self, *args, **kwargs) -> Any: ...
    def materialNode(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class MultiChannelMaterialLayer(Mari.MultiChannelLayer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def container(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Node(Mari.Metadata):
    class PortListMode:
        PORT_LIST_COLLAPSED: ClassVar[Mari.Node.PortListMode] = ...
        PORT_LIST_EXPANDED: ClassVar[Mari.Node.PortListMode] = ...
        PORT_LIST_GROUPED: ClassVar[Mari.Node.PortListMode] = ...
        PORT_LIST_ONLY_CONNECTED: ClassVar[Mari.Node.PortListMode] = ...
        PORT_LIST_T2B: ClassVar[Mari.Node.PortListMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    PORT_LIST_COLLAPSED: ClassVar[Mari.Node.PortListMode] = ...
    PORT_LIST_EXPANDED: ClassVar[Mari.Node.PortListMode] = ...
    PORT_LIST_GROUPED: ClassVar[Mari.Node.PortListMode] = ...
    PORT_LIST_ONLY_CONNECTED: ClassVar[Mari.Node.PortListMode] = ...
    PORT_LIST_T2B: ClassVar[Mari.Node.PortListMode] = ...
    hasChanged: ClassVar[PySide2.QtCore.Signal] = ...
    inputNodeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addNodeContext(self, *args, **kwargs) -> Any: ...
    def addTag(self, *args, **kwargs) -> Any: ...
    def attachViewer(self, *args, **kwargs) -> Any: ...
    def bake(self, *args, **kwargs) -> Any: ...
    def bypassInput(self, *args, **kwargs) -> Any: ...
    def connectSignals(self, *args, **kwargs) -> Any: ...
    def exportToGeoChannel(self, *args, **kwargs) -> Any: ...
    def focusInNodeGraph(self, *args, **kwargs) -> Any: ...
    def getNodeGraphViewContextMeta(self, *args, **kwargs) -> Any: ...
    def hasTag(self, *args, **kwargs) -> Any: ...
    def hash(self, *args, **kwargs) -> Any: ...
    def inputConnection(self, *args, **kwargs) -> Any: ...
    def inputNode(self, *args, **kwargs) -> Any: ...
    def inputPortCount(self, *args, **kwargs) -> Any: ...
    def inputPortName(self, *args, **kwargs) -> Any: ...
    def inputPortNames(self, *args, **kwargs) -> Any: ...
    def isBackdropNode(self, *args, **kwargs) -> Any: ...
    def isBakePointNode(self, *args, **kwargs) -> Any: ...
    def isEnabled(self, *args, **kwargs) -> Any: ...
    def isGeoChannelNode(self, *args, **kwargs) -> Any: ...
    def isGroupNode(self, *args, **kwargs) -> Any: ...
    def isPaintNode(self, *args, **kwargs) -> Any: ...
    def isSelected(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def nodeContext(self, *args, **kwargs) -> Any: ...
    def nodeContextNames(self, *args, **kwargs) -> Any: ...
    def nodeGraphPosition(self, *args, **kwargs) -> Any: ...
    def nodeGraphSize(self, *args, **kwargs) -> Any: ...
    def nodeInformation(self, *args, **kwargs) -> Any: ...
    def nodePath(self, *args, **kwargs) -> Any: ...
    def outputNodes(self, *args, **kwargs) -> Any: ...
    def outputPortCount(self, *args, **kwargs) -> Any: ...
    def outputPortName(self, *args, **kwargs) -> Any: ...
    def outputPortNames(self, *args, **kwargs) -> Any: ...
    def parentNodeGraph(self, *args, **kwargs) -> Any: ...
    def portListMode(self, *args, **kwargs) -> Any: ...
    def printVersionHashSource(self, *args, **kwargs) -> Any: ...
    def removeNodeContext(self, *args, **kwargs) -> Any: ...
    def removeTag(self, *args, **kwargs) -> Any: ...
    def setBypassInput(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setInputNode(self, *args, **kwargs) -> Any: ...
    def setMetadata(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setNodeGraphPosition(self, *args, **kwargs) -> Any: ...
    def setPortListMode(self, *args, **kwargs) -> Any: ...
    def setSelected(self, *args, **kwargs) -> Any: ...
    def setTypeID(self, *args, **kwargs) -> Any: ...
    def tagList(self, *args, **kwargs) -> Any: ...
    def typeID(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class NodeContext(Mari.Metadata):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def metadataSupported(self, *args, **kwargs) -> Any: ...
    def setMetadataSupported(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class NodeGraph(Mari.Metadata):
    nodeSelectionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addNode(self, *args, **kwargs) -> Any: ...
    def autoLayoutNodes(self, *args, **kwargs) -> Any: ...
    def bakeEmptyAndUpdateOutOfDateBakePoints(self, *args, **kwargs) -> Any: ...
    def bakeSelectedBakePoints(self, *args, **kwargs) -> Any: ...
    def createBakePointNode(self, *args, **kwargs) -> Any: ...
    def createChannelNode(self, *args, **kwargs) -> Any: ...
    def createMaterialTemplate(self, *args, **kwargs) -> Any: ...
    def createMultiChannelBakePointNode(self, *args, **kwargs) -> Any: ...
    def createMultiChannelBottomTransparencyNode(self, *args, **kwargs) -> Any: ...
    def createMultiChannelMergeNode(self, *args, **kwargs) -> Any: ...
    def createNode(self, *args, **kwargs) -> Any: ...
    def createPaintNode(self, *args, **kwargs) -> Any: ...
    def deleteNode(self, *args, **kwargs) -> Any: ...
    def exportNodesAsArchive(self, *args, **kwargs) -> Any: ...
    @classmethod
    def getAllUpstreamNodes(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def getUpstreamNodes(cls, *args, **kwargs) -> Any: ...
    def groupNodes(self, *args, **kwargs) -> Any: ...
    def importCustomProcedural(self, *args, **kwargs) -> Any: ...
    def importMaterial(self, *args, **kwargs) -> Any: ...
    def importNodesFromArchive(self, *args, **kwargs) -> Any: ...
    def load(self, *args, **kwargs) -> Any: ...
    def nodeList(self, *args, **kwargs) -> Any: ...
    def nodesFromString(self, *args, **kwargs) -> Any: ...
    def nodesToString(self, *args, **kwargs) -> Any: ...
    def nodesWithTag(self, *args, **kwargs) -> Any: ...
    def parentGeoEntity(self, *args, **kwargs) -> Any: ...
    def parentGroupNode(self, *args, **kwargs) -> Any: ...
    def removeNode(self, *args, **kwargs) -> Any: ...
    def save(self, *args, **kwargs) -> Any: ...
    def selectedNodeList(self, *args, **kwargs) -> Any: ...
    def setActiveViewerInput(self, *args, **kwargs) -> Any: ...
    def teleportBroadcastChannelNameList(self, *args, **kwargs) -> Any: ...
    def teleportNodeBroadcastingOnChannel(self, *args, **kwargs) -> Any: ...
    def teleportNodesListeningToChannel(self, *args, **kwargs) -> Any: ...
    @classmethod
    def topologicalSortTo(cls, *args, **kwargs) -> Any: ...
    def typeList(self, *args, **kwargs) -> Any: ...
    def updateSelectedBakePoints(self, *args, **kwargs) -> Any: ...
    def viewerNode(self, *args, **kwargs) -> Any: ...
    @classmethod
    def willConnectionBreakDAG(cls, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class NodeGraphPalette(Mari.Palette):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def closeTab(self, *args, **kwargs) -> Any: ...
    def currentTabIndex(self, *args, **kwargs) -> Any: ...
    def indexForNodeGraph(self, *args, **kwargs) -> Any: ...
    def nodeGraphView(self, *args, **kwargs) -> Any: ...
    def nodeGraphViewList(self, *args, **kwargs) -> Any: ...
    def setCurrentTabIndex(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class NodeGraphView(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def center(self, *args, **kwargs) -> Any: ...
    def nodeGraph(self, *args, **kwargs) -> Any: ...
    def posFromGlobalPos(self, *args, **kwargs) -> Any: ...
    def setCenter(self, *args, **kwargs) -> Any: ...
    def setZoomLevel(self, *args, **kwargs) -> Any: ...
    def zoomLevel(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class NodeManager(Mari.API):
    customProceduralNodeExported: ClassVar[PySide2.QtCore.Signal] = ...
    customProceduralNodeImported: ClassVar[PySide2.QtCore.Signal] = ...
    materialNodeExported: ClassVar[PySide2.QtCore.Signal] = ...
    materialNodeImported: ClassVar[PySide2.QtCore.Signal] = ...
    nodeCreated: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> bool: ...

class ObjectSelectionGroup(Mari.SelectionGroup):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def geoEntityList(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class OpenColorIO(Mari.API):
    class ColorPickerMode:
        COLOR_PICKER_COLOR_MANAGER: ClassVar[Mari.OpenColorIO.ColorPickerMode] = ...
        COLOR_PICKER_OCIO: ClassVar[Mari.OpenColorIO.ColorPickerMode] = ...
        COLOR_PICKER_RAW: ClassVar[Mari.OpenColorIO.ColorPickerMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    COLOR_PICKER_COLOR_MANAGER: ClassVar[Mari.OpenColorIO.ColorPickerMode] = ...
    COLOR_PICKER_OCIO: ClassVar[Mari.OpenColorIO.ColorPickerMode] = ...
    COLOR_PICKER_RAW: ClassVar[Mari.OpenColorIO.ColorPickerMode] = ...
    colorPickerModeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    lutSizeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    targetScalarChanged: ClassVar[PySide2.QtCore.Signal] = ...
    viewerScalarChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def colorPickerMode(self, *args, **kwargs) -> Any: ...
    def colorspace(self, *args, **kwargs) -> Any: ...
    def colorspaceCount(self, *args, **kwargs) -> Any: ...
    def colorspacePrettyNames(self, *args, **kwargs) -> Any: ...
    def configDescription(self, *args, **kwargs) -> Any: ...
    def currentColorspaceConfig(self, *args, **kwargs) -> Any: ...
    def currentColorspaceDefaults(self, *args, **kwargs) -> Any: ...
    def defaultConfig(self, *args, **kwargs) -> Any: ...
    def get3DLutValuesFromDisplayViewTransform(self, *args, **kwargs) -> Any: ...
    def get3DLutValuesFromFileTransform(self, *args, **kwargs) -> Any: ...
    def hasColorspace(self, *args, **kwargs) -> Any: ...
    def hasRole(self, *args, **kwargs) -> Any: ...
    def isConfigValid(self, *args, **kwargs) -> Any: ...
    def isShaderTransformAccurate(self, *args, **kwargs) -> Any: ...
    def isStandardConfig(self, *args, **kwargs) -> Any: ...
    def isTargetScalar(self, *args, **kwargs) -> Any: ...
    def isTransformValid(self, *args, **kwargs) -> Any: ...
    def isViewerScalar(self, *args, **kwargs) -> Any: ...
    def lutSize(self, *args, **kwargs) -> Any: ...
    def parseColorspaceFromString(self, *args, **kwargs) -> Any: ...
    def registerConfigUiAllowlist(self, *args, **kwargs) -> Any: ...
    def role(self, *args, **kwargs) -> Any: ...
    def roleCount(self, *args, **kwargs) -> Any: ...
    def setColorPickerMode(self, *args, **kwargs) -> Any: ...
    def setLutSize(self, *args, **kwargs) -> Any: ...
    def setShaderTransformAccuracy(self, *args, **kwargs) -> Any: ...
    def setShaderTransformCode(self, *args, **kwargs) -> Any: ...
    def shaderTransformUsesLut(self, *args, **kwargs) -> Any: ...
    def standardConfigPath(self, *args, **kwargs) -> Any: ...
    def standardConfigs(self, *args, **kwargs) -> Any: ...
    def toColorspace(self, *args, **kwargs) -> Any: ...
    def toPrettyName(self, *args, **kwargs) -> Any: ...
    def transformColor(self, *args, **kwargs) -> Any: ...
    def transformImage(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class PaintBuffer(Mari.PropertySource):
    class BufferDepth:
        DEPTH_BYTE: ClassVar[Mari.PaintBuffer.BufferDepth] = ...
        DEPTH_FLOAT: ClassVar[Mari.PaintBuffer.BufferDepth] = ...
        DEPTH_HALF: ClassVar[Mari.PaintBuffer.BufferDepth] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class Mirroring:
        MIRROR_NONE: ClassVar[Mari.PaintBuffer.Mirroring] = ...
        MIRROR_X: ClassVar[Mari.PaintBuffer.Mirroring] = ...
        MIRROR_XY: ClassVar[Mari.PaintBuffer.Mirroring] = ...
        MIRROR_Y: ClassVar[Mari.PaintBuffer.Mirroring] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    DEPTH_BYTE: ClassVar[Mari.PaintBuffer.BufferDepth] = ...
    DEPTH_FLOAT: ClassVar[Mari.PaintBuffer.BufferDepth] = ...
    DEPTH_HALF: ClassVar[Mari.PaintBuffer.BufferDepth] = ...
    MIRROR_NONE: ClassVar[Mari.PaintBuffer.Mirroring] = ...
    MIRROR_X: ClassVar[Mari.PaintBuffer.Mirroring] = ...
    MIRROR_XY: ClassVar[Mari.PaintBuffer.Mirroring] = ...
    MIRROR_Y: ClassVar[Mari.PaintBuffer.Mirroring] = ...
    aboutToBake: ClassVar[PySide2.QtCore.Signal] = ...
    aboutToClear: ClassVar[PySide2.QtCore.Signal] = ...
    baked: ClassVar[PySide2.QtCore.Signal] = ...
    cleared: ClassVar[PySide2.QtCore.Signal] = ...
    depthChanged: ClassVar[PySide2.QtCore.Signal] = ...
    resolutionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    rotationChanged: ClassVar[PySide2.QtCore.Signal] = ...
    scaleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    translationChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bake(self, *args, **kwargs) -> Any: ...
    def bakeAndClear(self, *args, **kwargs) -> Any: ...
    def clampColors(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def compImage(self, *args, **kwargs) -> Any: ...
    def depth(self, *args, **kwargs) -> Any: ...
    def getPaint(self, *args, **kwargs) -> Any: ...
    def isDirty(self, *args, **kwargs) -> Any: ...
    def loadPaint(self, *args, **kwargs) -> Any: ...
    def mirroring(self, *args, **kwargs) -> Any: ...
    def pickColor(self, *args, **kwargs) -> Any: ...
    def resolution(self, *args, **kwargs) -> Any: ...
    def restoreContent(self, *args, **kwargs) -> Any: ...
    def rotation(self, *args, **kwargs) -> Any: ...
    def saveContent(self, *args, **kwargs) -> Any: ...
    def savePaint(self, *args, **kwargs) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setClampColors(self, *args, **kwargs) -> Any: ...
    def setDepth(self, *args, **kwargs) -> Any: ...
    def setMirroring(self, *args, **kwargs) -> Any: ...
    def setPaint(self, *args, **kwargs) -> Any: ...
    def setResolution(self, *args, **kwargs) -> Any: ...
    def setRotation(self, *args, **kwargs) -> Any: ...
    def setScale(self, *args, **kwargs) -> Any: ...
    def setTranslation(self, *args, **kwargs) -> Any: ...
    def supportedResolutions(self, *args, **kwargs) -> Any: ...
    def translation(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class PaintNode(Mari.Node):
    class ManagementType:
        MANAGED_BY_CHANNEL: ClassVar[Mari.PaintNode.ManagementType] = ...
        MANAGED_BY_SELF: ClassVar[Mari.PaintNode.ManagementType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    MANAGED_BY_CHANNEL: ClassVar[Mari.PaintNode.ManagementType] = ...
    MANAGED_BY_SELF: ClassVar[Mari.PaintNode.ManagementType] = ...
    bleedChanged: ClassVar[PySide2.QtCore.Signal] = ...
    colorspaceConfigChanged: ClassVar[PySide2.QtCore.Signal] = ...
    depthChanged: ClassVar[PySide2.QtCore.Signal] = ...
    fileSpaceChanged: ClassVar[PySide2.QtCore.Signal] = ...
    managementChanged: ClassVar[PySide2.QtCore.Signal] = ...
    sizeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bleed(self, *args, **kwargs) -> Any: ...
    def colorspaceConfig(self, *args, **kwargs) -> Any: ...
    def connectSignals(self, *args, **kwargs) -> Any: ...
    def depth(self, *args, **kwargs) -> Any: ...
    def fileSpace(self, *args, **kwargs) -> Any: ...
    def fillColor(self, *args, **kwargs) -> Any: ...
    def imageSet(self, *args, **kwargs) -> Any: ...
    def isPaintNode(self, *args, **kwargs) -> Any: ...
    def management(self, *args, **kwargs) -> Any: ...
    def setBleed(self, *args, **kwargs) -> Any: ...
    def setColorspaceConfig(self, *args, **kwargs) -> Any: ...
    def setDepth(self, *args, **kwargs) -> Any: ...
    def setFileSpace(self, *args, **kwargs) -> Any: ...
    def setManagement(self, *args, **kwargs) -> Any: ...
    def setSize(self, *args, **kwargs) -> Any: ...
    def size(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class PaintableLayer(Mari.AdjustableLayer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bleed(self, *args, **kwargs) -> Any: ...
    def exportImages(self, *args, **kwargs) -> Any: ...
    def exportSelectedPatches(self, *args, **kwargs) -> Any: ...
    def imageSet(self, *args, **kwargs) -> Any: ...
    def importImages(self, *args, **kwargs) -> Any: ...
    def setBleed(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Palette(Mari.WidgetBase):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bringToFront(self, *args, **kwargs) -> Any: ...
    def fullName(self, *args, **kwargs) -> Any: ...
    def helpURL(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def setBodyWidget(self, *args, **kwargs) -> Any: ...
    def setCSHKey(self, *args, **kwargs) -> Any: ...
    def setFullName(self, *args, **kwargs) -> Any: ...
    def setShortName(self, *args, **kwargs) -> Any: ...
    def shortName(self, *args, **kwargs) -> Any: ...
    def showInFront(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class PaletteManager(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def create(self, *args, **kwargs) -> Any: ...
    def createWithIcon(self, *args, **kwargs) -> Any: ...
    def find(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def list(self, *args, **kwargs) -> Any: ...
    def remove(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Particle(Mari.API):
    class ExportFlags:
        EXPORT_ALPHA: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_AMBIENT_OCCLUSION: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_BITANGENT: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_CENTER_POSITIONS: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_GEOMETRY_ID: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_IGNORE_HIDDEN: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_IGNORE_MEMORY_REQUIREMENT: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_IGNORE_UNSELECTED: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_MATCH_IMPORT: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_NORMAL: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_PARTICLE_ID: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_PATCH_ID: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_PIXEL_COORDINATE: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_RADIUS: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_TANGENT: ClassVar[Mari.Particle.ExportFlags] = ...
        EXPORT_UV: ClassVar[Mari.Particle.ExportFlags] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class ImportFlags:
        IMPORT_BLEED_EDGES: ClassVar[Mari.Particle.ImportFlags] = ...
        IMPORT_CENTER_POSITIONS: ClassVar[Mari.Particle.ImportFlags] = ...
        IMPORT_FLATTEN: ClassVar[Mari.Particle.ImportFlags] = ...
        IMPORT_IGNORE_HIDDEN: ClassVar[Mari.Particle.ImportFlags] = ...
        IMPORT_IGNORE_UNSELECTED: ClassVar[Mari.Particle.ImportFlags] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class InterpolationMethod:
        INTERPOLATION_INVERSE_DISTANCE_WEIGHTED: ClassVar[Mari.Particle.InterpolationMethod] = ...
        INTERPOLATION_INVERSE_DISTANCE_WEIGHTED_SHARPER: ClassVar[Mari.Particle.InterpolationMethod] = ...
        INTERPOLATION_INVERSE_DISTANCE_WEIGHTED_SMOOTHER: ClassVar[Mari.Particle.InterpolationMethod] = ...
        INTERPOLATION_NEAREST_NEIGHBOR: ClassVar[Mari.Particle.InterpolationMethod] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class RangeUnits:
        RANGE_GEO_SIZE_PERCENTAGE: ClassVar[Mari.Particle.RangeUnits] = ...
        RANGE_INFINITE: ClassVar[Mari.Particle.RangeUnits] = ...
        RANGE_WORLD_SPACE_UNITS: ClassVar[Mari.Particle.RangeUnits] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class SearchMethod:
        SEARCH_BACKWARD: ClassVar[Mari.Particle.SearchMethod] = ...
        SEARCH_BIDIRECTIONAL: ClassVar[Mari.Particle.SearchMethod] = ...
        SEARCH_FORWARD: ClassVar[Mari.Particle.SearchMethod] = ...
        SEARCH_RADIAL: ClassVar[Mari.Particle.SearchMethod] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    EXPORT_ALPHA: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_AMBIENT_OCCLUSION: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_BITANGENT: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_CENTER_POSITIONS: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_GEOMETRY_ID: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_IGNORE_HIDDEN: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_IGNORE_MEMORY_REQUIREMENT: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_IGNORE_UNSELECTED: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_MATCH_IMPORT: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_NORMAL: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_PARTICLE_ID: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_PATCH_ID: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_PIXEL_COORDINATE: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_RADIUS: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_TANGENT: ClassVar[Mari.Particle.ExportFlags] = ...
    EXPORT_UV: ClassVar[Mari.Particle.ExportFlags] = ...
    IMPORT_BLEED_EDGES: ClassVar[Mari.Particle.ImportFlags] = ...
    IMPORT_CENTER_POSITIONS: ClassVar[Mari.Particle.ImportFlags] = ...
    IMPORT_FLATTEN: ClassVar[Mari.Particle.ImportFlags] = ...
    IMPORT_IGNORE_HIDDEN: ClassVar[Mari.Particle.ImportFlags] = ...
    IMPORT_IGNORE_UNSELECTED: ClassVar[Mari.Particle.ImportFlags] = ...
    INTERPOLATION_INVERSE_DISTANCE_WEIGHTED: ClassVar[Mari.Particle.InterpolationMethod] = ...
    INTERPOLATION_INVERSE_DISTANCE_WEIGHTED_SHARPER: ClassVar[Mari.Particle.InterpolationMethod] = ...
    INTERPOLATION_INVERSE_DISTANCE_WEIGHTED_SMOOTHER: ClassVar[Mari.Particle.InterpolationMethod] = ...
    INTERPOLATION_NEAREST_NEIGHBOR: ClassVar[Mari.Particle.InterpolationMethod] = ...
    RANGE_GEO_SIZE_PERCENTAGE: ClassVar[Mari.Particle.RangeUnits] = ...
    RANGE_INFINITE: ClassVar[Mari.Particle.RangeUnits] = ...
    RANGE_WORLD_SPACE_UNITS: ClassVar[Mari.Particle.RangeUnits] = ...
    SEARCH_BACKWARD: ClassVar[Mari.Particle.SearchMethod] = ...
    SEARCH_BIDIRECTIONAL: ClassVar[Mari.Particle.SearchMethod] = ...
    SEARCH_FORWARD: ClassVar[Mari.Particle.SearchMethod] = ...
    SEARCH_RADIAL: ClassVar[Mari.Particle.SearchMethod] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def availableOps(self, *args, **kwargs) -> Any: ...
    def exportGeo(self, *args, **kwargs) -> Any: ...
    def exportImageSets(self, *args, **kwargs) -> Any: ...
    def findOp(self, *args, **kwargs) -> Any: ...
    def importImageSets(self, *args, **kwargs) -> Any: ...
    def interpolationMethods(self, *args, **kwargs) -> Any: ...
    def rangeUnits(self, *args, **kwargs) -> Any: ...
    def searchMethods(self, *args, **kwargs) -> Any: ...
    def supportedFileFormats(self, *args, **kwargs) -> Any: ...
    def transferChannel(self, *args, **kwargs) -> Any: ...
    def transferImageSets(self, *args, **kwargs) -> Any: ...
    def transferLayers(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ParticleOp(Mari.PropertySource):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def description(self, *args, **kwargs) -> Any: ...
    def execute(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def propertyWidget(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class PatchLinksManager(Mari.API):
    groupAdded: ClassVar[PySide2.QtCore.Signal] = ...
    groupRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    groupRenamed: ClassVar[PySide2.QtCore.Signal] = ...
    imageUnlinked: ClassVar[PySide2.QtCore.Signal] = ...
    imagesLinked: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def canLinkImageInternals(self, *args, **kwargs) -> Any: ...
    def canLinkImages(self, *args, **kwargs) -> Any: ...
    def canLinkPatchInternals(self, *args, **kwargs) -> Any: ...
    def canLinkPatches(self, *args, **kwargs) -> Any: ...
    def generateUniqueGroupName(self, *args, **kwargs) -> Any: ...
    def groupNames(self, *args, **kwargs) -> Any: ...
    def groupNamesForImageSet(self, *args, **kwargs) -> Any: ...
    def imageGroup(self, *args, **kwargs) -> Any: ...
    def images(self, *args, **kwargs) -> Any: ...
    def isImageLinked(self, *args, **kwargs) -> Any: ...
    def isPatchLinked(self, *args, **kwargs) -> Any: ...
    def linkImages(self, *args, **kwargs) -> Any: ...
    def linkPatches(self, *args, **kwargs) -> Any: ...
    def linkSelectedPatches(self, *args, **kwargs) -> Any: ...
    def linkedImages(self, *args, **kwargs) -> Any: ...
    def linkedPatches(self, *args, **kwargs) -> Any: ...
    def patchGroup(self, *args, **kwargs) -> Any: ...
    def patches(self, *args, **kwargs) -> Any: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def unlinkImage(self, *args, **kwargs) -> Any: ...
    def unlinkPatch(self, *args, **kwargs) -> Any: ...
    def unlinkSelectedPatches(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class PatchSelectionGroup(Mari.SelectionGroup):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def patchList(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class PointLight(Mari.Light):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def ambient(self, *args, **kwargs) -> Any: ...
    def constantAttenuation(self, *args, **kwargs) -> Any: ...
    def diffuse(self, *args, **kwargs) -> Any: ...
    def fixedTo(self, *args, **kwargs) -> Any: ...
    def intensity(self, *args, **kwargs) -> Any: ...
    def linearAttenuation(self, *args, **kwargs) -> Any: ...
    def position(self, *args, **kwargs) -> Any: ...
    def quadraticAttenuation(self, *args, **kwargs) -> Any: ...
    def renderShadows(self, *args, **kwargs) -> Any: ...
    def setAmbient(self, *args, **kwargs) -> Any: ...
    def setConstantAttenuation(self, *args, **kwargs) -> Any: ...
    def setDiffuse(self, *args, **kwargs) -> Any: ...
    def setFixedTo(self, *args, **kwargs) -> Any: ...
    def setIntensity(self, *args, **kwargs) -> Any: ...
    def setLinearAttenuation(self, *args, **kwargs) -> Any: ...
    def setPosition(self, *args, **kwargs) -> Any: ...
    def setQuadraticAttenuation(self, *args, **kwargs) -> Any: ...
    def setRenderShadows(self, *args, **kwargs) -> Any: ...
    def setSpecular(self, *args, **kwargs) -> Any: ...
    def setSpotCutoff(self, *args, **kwargs) -> Any: ...
    def setSpotDirection(self, *args, **kwargs) -> Any: ...
    def setSpotExponent(self, *args, **kwargs) -> Any: ...
    def specular(self, *args, **kwargs) -> Any: ...
    def spotCutoff(self, *args, **kwargs) -> Any: ...
    def spotDirection(self, *args, **kwargs) -> Any: ...
    def spotExponent(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class PostFilter(Mari.PropertySource):
    class PostFilterFlags:
        POSTFILTER_ENABLED: ClassVar[Mari.PostFilter.PostFilterFlags] = ...
        POSTFILTER_REMOVABLE: ClassVar[Mari.PostFilter.PostFilterFlags] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    POSTFILTER_ENABLED: ClassVar[Mari.PostFilter.PostFilterFlags] = ...
    POSTFILTER_REMOVABLE: ClassVar[Mari.PostFilter.PostFilterFlags] = ...
    flagsChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def enabled(self, *args, **kwargs) -> Any: ...
    def flags(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setFlags(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class PostFilterCollection(Mari.Metadata):
    class PostFilterCollectionFlags:
        POSTFILTERCOLLECTION_EDITABLE: ClassVar[Mari.PostFilterCollection.PostFilterCollectionFlags] = ...
        POSTFILTERCOLLECTION_REMOVABLE: ClassVar[Mari.PostFilterCollection.PostFilterCollectionFlags] = ...
        POSTFILTERCOLLECTION_RENAMABLE: ClassVar[Mari.PostFilterCollection.PostFilterCollectionFlags] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    POSTFILTERCOLLECTION_EDITABLE: ClassVar[Mari.PostFilterCollection.PostFilterCollectionFlags] = ...
    POSTFILTERCOLLECTION_REMOVABLE: ClassVar[Mari.PostFilterCollection.PostFilterCollectionFlags] = ...
    POSTFILTERCOLLECTION_RENAMABLE: ClassVar[Mari.PostFilterCollection.PostFilterCollectionFlags] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addFilter(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def createCustomLUT(self, *args, **kwargs) -> Any: ...
    def createFileLUT(self, *args, **kwargs) -> Any: ...
    def createGLSL(self, *args, **kwargs) -> Any: ...
    def filters(self, *args, **kwargs) -> Any: ...
    def find(self, *args, **kwargs) -> Any: ...
    def flags(self, *args, **kwargs) -> Any: ...
    def indexOf(self, *args, **kwargs) -> Any: ...
    def isReadOnly(self, *args, **kwargs) -> Any: ...
    def move(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def remove(self, *args, **kwargs) -> Any: ...
    def setFlags(self, *args, **kwargs) -> Any: ...
    def setReadOnly(self, *args, **kwargs) -> Any: ...
    def size(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Preferences(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def event(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def list(self, *args, **kwargs) -> Any: ...
    def prettyPropertyName(self, *args, **kwargs) -> Any: ...
    def remove(self, *args, **kwargs) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setChangedScript(self, *args, **kwargs) -> Any: ...
    def setDefault(self, *args, **kwargs) -> Any: ...
    def setDisplayName(self, *args, **kwargs) -> Any: ...
    def setItemList(self, *args, **kwargs) -> Any: ...
    def setRange(self, *args, **kwargs) -> Any: ...
    def setStep(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ProceduralLayer(Mari.AdjustableLayer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def convertToPaintable(self, *args, **kwargs) -> Any: ...
    def exportImages(self, *args, **kwargs) -> Any: ...
    def exportSelectedPatches(self, *args, **kwargs) -> Any: ...
    def getProceduralParameter(self, *args, **kwargs) -> Any: ...
    def getProceduralParameterAsImage(self, *args, **kwargs) -> Any: ...
    def proceduralParameters(self, *args, **kwargs) -> Any: ...
    def proceduralType(self, *args, **kwargs) -> Any: ...
    def setProceduralParameter(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Project(Mari.PropertySource):
    class LightingMode:
        LIGHTING_BASIC: ClassVar[Mari.Project.LightingMode] = ...
        LIGHTING_FLAT: ClassVar[Mari.Project.LightingMode] = ...
        LIGHTING_FULL: ClassVar[Mari.Project.LightingMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    LIGHTING_BASIC: ClassVar[Mari.Project.LightingMode] = ...
    LIGHTING_FLAT: ClassVar[Mari.Project.LightingMode] = ...
    LIGHTING_FULL: ClassVar[Mari.Project.LightingMode] = ...
    closing: ClassVar[PySide2.QtCore.Signal] = ...
    colorspaceDefaultsChanged: ClassVar[PySide2.QtCore.Signal] = ...
    saved: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, *args, **kwargs) -> Any: ...
    def colorspaceDefaults(self, *args, **kwargs) -> Any: ...
    def info(self, *args, **kwargs) -> Any: ...
    def isDirty(self, *args, **kwargs) -> Any: ...
    def isModified(self, *args, **kwargs) -> Any: ...
    def isSaved(self, *args, **kwargs) -> Any: ...
    def lightingMode(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def remapConfigColorspaces(self, *args, **kwargs) -> Any: ...
    def removeInvalidImageTags(self, *args, **kwargs) -> Any: ...
    def save(self, *args, **kwargs) -> Any: ...
    def setColorspaceDefaults(self, *args, **kwargs) -> Any: ...
    def setLightingMode(self, *args, **kwargs) -> Any: ...
    def updatePatchResolutionInfo(self, *args, **kwargs) -> Any: ...
    def uuid(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ProjectInfo(Mari.Metadata):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addMetadataToToolTip(self, *args, **kwargs) -> Any: ...
    def autosavePath(self, *args, **kwargs) -> Any: ...
    def cacheDiskUsage(self, *args, **kwargs) -> Any: ...
    def close(self, *args, **kwargs) -> Any: ...
    def createdTime(self, *args, **kwargs) -> Any: ...
    def isEnabled(self, *args, **kwargs) -> Any: ...
    def isMinionProject(self, *args, **kwargs) -> Any: ...
    def isNull(self, *args, **kwargs) -> Any: ...
    def isOpen(self, *args, **kwargs) -> Any: ...
    def lastModifiedTime(self, *args, **kwargs) -> Any: ...
    def modelPath(self, *args, **kwargs) -> Any: ...
    def modelPathList(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def open(self, *args, **kwargs) -> Any: ...
    def projectDirectories(self, *args, **kwargs) -> Any: ...
    def projectPath(self, *args, **kwargs) -> Any: ...
    def recentIndex(self, *args, **kwargs) -> Any: ...
    def removeMetadataFromToolTip(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def subcachePath(self, *args, **kwargs) -> Any: ...
    def uuid(self, *args, **kwargs) -> Any: ...
    def version(self, *args, **kwargs) -> Any: ...
    def versionHistory(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ProjectManager(Mari.API):
    class AllowedVersions:
        ANY: ClassVar[Mari.ProjectManager.AllowedVersions] = ...
        ASK: ClassVar[Mari.ProjectManager.AllowedVersions] = ...
        EXACT: ClassVar[Mari.ProjectManager.AllowedVersions] = ...
        OLDER_OR_EXACT: ClassVar[Mari.ProjectManager.AllowedVersions] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class MeshOptions:
        FORCE_PTEX: ClassVar[Mari.ProjectManager.MeshOptions] = ...
        UV_OR_PTEX: ClassVar[Mari.ProjectManager.MeshOptions] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class MultipleGeometryOptions:
        KEEP_SEPARATE: ClassVar[Mari.ProjectManager.MultipleGeometryOptions] = ...
        MERGE_GEOMETRIES: ClassVar[Mari.ProjectManager.MultipleGeometryOptions] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class OCIOOptions:
        OCIO_ASK: ClassVar[Mari.ProjectManager.OCIOOptions] = ...
        OCIO_EXACT: ClassVar[Mari.ProjectManager.OCIOOptions] = ...
        OCIO_REMAP: ClassVar[Mari.ProjectManager.OCIOOptions] = ...
        OCIO_RESET: ClassVar[Mari.ProjectManager.OCIOOptions] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class PtexFaceSizeScheme:
        PTEX_UNIFORM_SIZE: ClassVar[Mari.ProjectManager.PtexFaceSizeScheme] = ...
        PTEX_WORLD_SPACE_DENSITY_SIZE: ClassVar[Mari.ProjectManager.PtexFaceSizeScheme] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class PtexFormat:
        PTEXFORMAT_BYTE: ClassVar[Mari.ProjectManager.PtexFormat] = ...
        PTEXFORMAT_FLOAT: ClassVar[Mari.ProjectManager.PtexFormat] = ...
        PTEXFORMAT_HALF: ClassVar[Mari.ProjectManager.PtexFormat] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    ANY: ClassVar[Mari.ProjectManager.AllowedVersions] = ...
    ASK: ClassVar[Mari.ProjectManager.AllowedVersions] = ...
    EXACT: ClassVar[Mari.ProjectManager.AllowedVersions] = ...
    FORCE_PTEX: ClassVar[Mari.ProjectManager.MeshOptions] = ...
    KEEP_SEPARATE: ClassVar[Mari.ProjectManager.MultipleGeometryOptions] = ...
    MERGE_GEOMETRIES: ClassVar[Mari.ProjectManager.MultipleGeometryOptions] = ...
    OCIO_ASK: ClassVar[Mari.ProjectManager.OCIOOptions] = ...
    OCIO_EXACT: ClassVar[Mari.ProjectManager.OCIOOptions] = ...
    OCIO_REMAP: ClassVar[Mari.ProjectManager.OCIOOptions] = ...
    OCIO_RESET: ClassVar[Mari.ProjectManager.OCIOOptions] = ...
    OLDER_OR_EXACT: ClassVar[Mari.ProjectManager.AllowedVersions] = ...
    PTEXFORMAT_BYTE: ClassVar[Mari.ProjectManager.PtexFormat] = ...
    PTEXFORMAT_FLOAT: ClassVar[Mari.ProjectManager.PtexFormat] = ...
    PTEXFORMAT_HALF: ClassVar[Mari.ProjectManager.PtexFormat] = ...
    PTEX_UNIFORM_SIZE: ClassVar[Mari.ProjectManager.PtexFaceSizeScheme] = ...
    PTEX_WORLD_SPACE_DENSITY_SIZE: ClassVar[Mari.ProjectManager.PtexFaceSizeScheme] = ...
    UV_OR_PTEX: ClassVar[Mari.ProjectManager.MeshOptions] = ...
    aboutToArchive: ClassVar[PySide2.QtCore.Signal] = ...
    aboutToClose: ClassVar[PySide2.QtCore.Signal] = ...
    aboutToExport: ClassVar[PySide2.QtCore.Signal] = ...
    aboutToOpen: ClassVar[PySide2.QtCore.Signal] = ...
    aboutToSave: ClassVar[PySide2.QtCore.Signal] = ...
    aboutToSaveNew: ClassVar[PySide2.QtCore.Signal] = ...
    archived: ClassVar[PySide2.QtCore.Signal] = ...
    closed: ClassVar[PySide2.QtCore.Signal] = ...
    created: ClassVar[PySide2.QtCore.Signal] = ...
    exported: ClassVar[PySide2.QtCore.Signal] = ...
    exportedSummary: ClassVar[PySide2.QtCore.Signal] = ...
    opened: ClassVar[PySide2.QtCore.Signal] = ...
    projectDuplicated: ClassVar[PySide2.QtCore.Signal] = ...
    saved: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def archive(self, *args, **kwargs) -> Any: ...
    def cachePath(self, *args, **kwargs) -> Any: ...
    def close(self, *args, **kwargs) -> Any: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def create(self, *args, **kwargs) -> Any: ...
    def current(self, *args, **kwargs) -> Any: ...
    def duplicate(self, *args, **kwargs) -> Any: ...
    def extract(self, *args, **kwargs) -> Any: ...
    def find(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def list(self, *args, **kwargs) -> Any: ...
    def names(self, *args, **kwargs) -> Any: ...
    def open(self, *args, **kwargs) -> Any: ...
    def remove(self, *args, **kwargs) -> Any: ...
    def rename(self, *args, **kwargs) -> Any: ...
    def showCreateDialog(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ProjectionManager(Mari.PropertySource):
    class MirrorPlane:
        X: ClassVar[Mari.ProjectionManager.MirrorPlane] = ...
        Y: ClassVar[Mari.ProjectionManager.MirrorPlane] = ...
        Z: ClassVar[Mari.ProjectionManager.MirrorPlane] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    X: ClassVar[Mari.ProjectionManager.MirrorPlane] = ...
    Y: ClassVar[Mari.ProjectionManager.MirrorPlane] = ...
    Z: ClassVar[Mari.ProjectionManager.MirrorPlane] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def debugOcclusionResult(self, *args, **kwargs) -> Any: ...
    def mirrorAxis(self, *args, **kwargs) -> Any: ...
    def mirrorProjectionEnabled(self, *args, **kwargs) -> Any: ...
    def paintingMode(self, *args, **kwargs) -> Any: ...
    def paintingModeList(self, *args, **kwargs) -> Any: ...
    def paintingModePath(self, *args, **kwargs) -> Any: ...
    def paintingModePathList(self, *args, **kwargs) -> Any: ...
    def paintingModeStr(self, *args, **kwargs) -> Any: ...
    def paintingModeStrList(self, *args, **kwargs) -> Any: ...
    def setMirrorAxis(self, *args, **kwargs) -> Any: ...
    def setPaintingMode(self, *args, **kwargs) -> Any: ...
    def toggleDebugDrawOcclusion(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Projector(Mari.Metadata):
    class BitDepth:
        DEPTH_BYTE: ClassVar[Mari.Projector.BitDepth] = ...
        DEPTH_FLOAT: ClassVar[Mari.Projector.BitDepth] = ...
        DEPTH_HALF: ClassVar[Mari.Projector.BitDepth] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class DepthProjectionMode:
        FRONT: ClassVar[Mari.Projector.DepthProjectionMode] = ...
        THROUGH: ClassVar[Mari.Projector.DepthProjectionMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    class LightingMode:
        BASIC: ClassVar[Mari.Projector.LightingMode] = ...
        FLAT: ClassVar[Mari.Projector.LightingMode] = ...
        FULL: ClassVar[Mari.Projector.LightingMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    BASIC: ClassVar[Mari.Projector.LightingMode] = ...
    DEPTH_BYTE: ClassVar[Mari.Projector.BitDepth] = ...
    DEPTH_FLOAT: ClassVar[Mari.Projector.BitDepth] = ...
    DEPTH_HALF: ClassVar[Mari.Projector.BitDepth] = ...
    FLAT: ClassVar[Mari.Projector.LightingMode] = ...
    FRONT: ClassVar[Mari.Projector.DepthProjectionMode] = ...
    FULL: ClassVar[Mari.Projector.LightingMode] = ...
    THROUGH: ClassVar[Mari.Projector.DepthProjectionMode] = ...
    aboutToSaveImage: ClassVar[PySide2.QtCore.Signal] = ...
    colorspaceConfigChanged: ClassVar[PySide2.QtCore.Signal] = ...
    exportColorspaceConfigChanged: ClassVar[PySide2.QtCore.Signal] = ...
    frameOffsetChanged: ClassVar[PySide2.QtCore.Signal] = ...
    importColorspaceConfigChanged: ClassVar[PySide2.QtCore.Signal] = ...
    nameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bitDepth(self, *args, **kwargs) -> Any: ...
    def camera(self, *args, **kwargs) -> Any: ...
    def clampColors(self, *args, **kwargs) -> Any: ...
    def colorspaceConfig(self, *args, **kwargs) -> Any: ...
    def depthProjectionMode(self, *args, **kwargs) -> Any: ...
    def exportColorspaceConfig(self, *args, **kwargs) -> Any: ...
    def exportOptions(self, *args, **kwargs) -> Any: ...
    def exportPath(self, *args, **kwargs) -> Any: ...
    def format(self, *args, **kwargs) -> Any: ...
    def frameOffset(self, *args, **kwargs) -> Any: ...
    def height(self, *args, **kwargs) -> Any: ...
    def importColorspaceConfig(self, *args, **kwargs) -> Any: ...
    def importFromFile(self, *args, **kwargs) -> Any: ...
    def importPath(self, *args, **kwargs) -> Any: ...
    def lightingMode(self, *args, **kwargs) -> Any: ...
    def makeCurrent(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def paintingMode(self, *args, **kwargs) -> Any: ...
    def paintingModePath(self, *args, **kwargs) -> Any: ...
    def paintingModeStr(self, *args, **kwargs) -> Any: ...
    def project(self, *args, **kwargs) -> Any: ...
    def projectFromFile(self, *args, **kwargs) -> Any: ...
    def projectionMaskNameList(self, *args, **kwargs) -> Any: ...
    def projectionMaskProperty(self, *args, **kwargs) -> Any: ...
    def projectionMaskPropertyList(self, *args, **kwargs) -> Any: ...
    def rotation(self, *args, **kwargs) -> Any: ...
    def save(self, *args, **kwargs) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setBitDepth(self, *args, **kwargs) -> Any: ...
    def setClampColors(self, *args, **kwargs) -> Any: ...
    def setColorspaceConfig(self, *args, **kwargs) -> Any: ...
    def setDepthProjectionMode(self, *args, **kwargs) -> Any: ...
    def setExportColorspaceConfig(self, *args, **kwargs) -> Any: ...
    def setExportOptions(self, *args, **kwargs) -> Any: ...
    def setExportPath(self, *args, **kwargs) -> Any: ...
    def setFormat(self, *args, **kwargs) -> Any: ...
    def setFrameOffset(self, *args, **kwargs) -> Any: ...
    def setImportColorspaceConfig(self, *args, **kwargs) -> Any: ...
    def setImportPath(self, *args, **kwargs) -> Any: ...
    def setLightingMode(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPaintingMode(self, *args, **kwargs) -> Any: ...
    def setProjectionMaskProperty(self, *args, **kwargs) -> Any: ...
    def setRotation(self, *args, **kwargs) -> Any: ...
    def setScale(self, *args, **kwargs) -> Any: ...
    def setSize(self, *args, **kwargs) -> Any: ...
    def setTranslation(self, *args, **kwargs) -> Any: ...
    def setUseShader(self, *args, **kwargs) -> Any: ...
    def translation(self, *args, **kwargs) -> Any: ...
    def unproject(self, *args, **kwargs) -> Any: ...
    def unprojectToFile(self, *args, **kwargs) -> Any: ...
    def useShader(self, *args, **kwargs) -> Any: ...
    def useShaderList(self, *args, **kwargs) -> Any: ...
    def width(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ProjectorManager(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def create(self, *args, **kwargs) -> Any: ...
    def current(self, *args, **kwargs) -> Any: ...
    def find(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def list(self, *args, **kwargs) -> Any: ...
    def load(self, *args, **kwargs) -> Any: ...
    def names(self, *args, **kwargs) -> Any: ...
    def remove(self, *args, **kwargs) -> Any: ...
    def selection(self, *args, **kwargs) -> Any: ...
    def setCurrent(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class PropertySource(Mari.Metadata):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def canResetProperty(self, *args, **kwargs) -> Any: ...
    def getProperty(self, *args, **kwargs) -> Any: ...
    def propertiesList(self, *args, **kwargs) -> Any: ...
    def propertyDisplayName(self, *args, **kwargs) -> Any: ...
    def propertyEnumValues(self, *args, **kwargs) -> Any: ...
    def propertyHasMinMax(self, *args, **kwargs) -> Any: ...
    def propertyIsEnum(self, *args, **kwargs) -> Any: ...
    def propertyIsReadOnly(self, *args, **kwargs) -> Any: ...
    def propertyMinMax(self, *args, **kwargs) -> Any: ...
    def propertyTooltip(self, *args, **kwargs) -> Any: ...
    def resetProperty(self, *args, **kwargs) -> Any: ...
    def setProperty(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Ptex(Mari.Metadata):
    class ResizeMethod:
        LARGEST_AREA_PER_FACE_SIZE: ClassVar[Mari.Ptex.ResizeMethod] = ...
        MATCH_CHANNEL_TO_PTEX: ClassVar[Mari.Ptex.ResizeMethod] = ...
        MATCH_PTEX_TO_CHANNEL: ClassVar[Mari.Ptex.ResizeMethod] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    LARGEST_AREA_PER_FACE_SIZE: ClassVar[Mari.Ptex.ResizeMethod] = ...
    MATCH_CHANNEL_TO_PTEX: ClassVar[Mari.Ptex.ResizeMethod] = ...
    MATCH_PTEX_TO_CHANNEL: ClassVar[Mari.Ptex.ResizeMethod] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def doubleFaceSize(self, *args, **kwargs) -> Any: ...
    def exportToPtexFile(self, *args, **kwargs) -> Any: ...
    def faceSize(self, *args, **kwargs) -> Any: ...
    def floodFillFace(self, *args, **kwargs) -> Any: ...
    def geoFaceCount(self, *args, **kwargs) -> Any: ...
    def halveFaceSize(self, *args, **kwargs) -> Any: ...
    def hash(self, *args, **kwargs) -> Any: ...
    def importFromPtexFile(self, *args, **kwargs) -> Any: ...
    def resizeFace(self, *args, **kwargs) -> Any: ...
    def resizeFaceToTexelDensity(self, *args, **kwargs) -> Any: ...
    def validFaceSizes(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ReceiverTeleportNode(Mari.TeleportNode):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def connectSignals(self, *args, **kwargs) -> Any: ...
    def setChannelName(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ResourceInfo(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def bundledUsdPath(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def cAPIDocPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def cAPIExamplesPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def certificatesPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def colorPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def configPathKey(cls, *args, **kwargs) -> Any: ...
    def createIcon(self, *args, **kwargs) -> Any: ...
    def customPluginPaths(self, *args, **kwargs) -> Any: ...
    @classmethod
    def defaultArchivePathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def defaultCameraPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def defaultExportPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def defaultGeometryPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def defaultImagePathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def defaultImportPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def defaultRenderPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def defaultShelfPathKey(cls, *args, **kwargs) -> Any: ...
    def disableEnviromentKeyValues(self, *args, **kwargs) -> Any: ...
    @classmethod
    def examplesPathKey(cls, *args, **kwargs) -> Any: ...
    def exportSequenceTemplate(self, *args, **kwargs) -> Any: ...
    def flattenedSequenceTemplate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def gradientPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def helpPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def iconPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def imagePathKey(cls, *args, **kwargs) -> Any: ...
    def importSequenceTemplate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def logoPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def lutPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def mediaPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def miscPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def onlineHelpPathKey(cls, *args, **kwargs) -> Any: ...
    def path(self, *args, **kwargs) -> Any: ...
    def pathList(self, *args, **kwargs) -> Any: ...
    def ptexFlattenedSequenceTemplate(self, *args, **kwargs) -> Any: ...
    def ptexSequenceTemplate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def qtPluginsPathKey(cls, *args, **kwargs) -> Any: ...
    def refreshAllPaths(self, *args, **kwargs) -> Any: ...
    def refreshPath(self, *args, **kwargs) -> Any: ...
    @classmethod
    def scriptDocPathKey(cls, *args, **kwargs) -> Any: ...
    def sequenceTemplate(self, *args, **kwargs) -> Any: ...
    def sequenceToken(self, *args, **kwargs) -> Any: ...
    def setExportSequenceTemplate(self, *args, **kwargs) -> Any: ...
    def setFlattenedSequenceTemplate(self, *args, **kwargs) -> Any: ...
    def setImportSequenceTemplate(self, *args, **kwargs) -> Any: ...
    def setPath(self, *args, **kwargs) -> Any: ...
    def setPathList(self, *args, **kwargs) -> Any: ...
    def setPtexFlattenedSequenceTemplate(self, *args, **kwargs) -> Any: ...
    def setPtexSequenceTemplate(self, *args, **kwargs) -> Any: ...
    def setSequenceTemplate(self, *args, **kwargs) -> Any: ...
    def setSequenceToken(self, *args, **kwargs) -> Any: ...
    def settingsFilePath(self, *args, **kwargs) -> Any: ...
    @classmethod
    def settingsPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def shaderPathKey(cls, *args, **kwargs) -> Any: ...
    def showPDF(self, *args, **kwargs) -> Any: ...
    def showURL(self, *args, **kwargs) -> Any: ...
    @classmethod
    def sysScriptPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def testPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def userPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def userPluginsPathKey(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def userScriptPathKey(cls, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ScriptAction(Mari.Action):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    triggered: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def script(self, *args, **kwargs) -> Any: ...
    def setScript(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class SelectionGroup(Mari.Lockable):
    nameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def entityName(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def selectionMode(self, *args, **kwargs) -> Any: ...
    def setEntityName(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class SelectionGroupManager(Mari.API):
    class SelectionMode:
        SELECTION_MODE_FACES: ClassVar[Mari.SelectionGroupManager.SelectionMode] = ...
        SELECTION_MODE_OBJECTS: ClassVar[Mari.SelectionGroupManager.SelectionMode] = ...
        SELECTION_MODE_PATCHES: ClassVar[Mari.SelectionGroupManager.SelectionMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    SELECTION_MODE_FACES: ClassVar[Mari.SelectionGroupManager.SelectionMode] = ...
    SELECTION_MODE_OBJECTS: ClassVar[Mari.SelectionGroupManager.SelectionMode] = ...
    SELECTION_MODE_PATCHES: ClassVar[Mari.SelectionGroupManager.SelectionMode] = ...
    hiddenChanged: ClassVar[PySide2.QtCore.Signal] = ...
    lockedChanged: ClassVar[PySide2.QtCore.Signal] = ...
    modeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    selectModeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    selectedChanged: ClassVar[PySide2.QtCore.Signal] = ...
    selectionGroupAdded: ClassVar[PySide2.QtCore.Signal] = ...
    selectionGroupRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    visibleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def createSelectionGroupFromSelection(self, *args, **kwargs) -> Any: ...
    def current(self, *args, **kwargs) -> Any: ...
    def list(self, *args, **kwargs) -> Any: ...
    def removeSelectionGroup(self, *args, **kwargs) -> Any: ...
    def sceneSelectionMode(self, *args, **kwargs) -> Any: ...
    def select(self, *args, **kwargs) -> Any: ...
    def selection(self, *args, **kwargs) -> Any: ...
    def setSelectionMode(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Settings(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def beginGroup(self, *args, **kwargs) -> Any: ...
    def endGroup(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Shader(Mari.Metadata):
    class ChannelSetMode:
        EXTEND_INVISIBLE: ClassVar[Mari.Shader.ChannelSetMode] = ...
        EXTEND_VISIBLE: ClassVar[Mari.Shader.ChannelSetMode] = ...
        NONE: ClassVar[Mari.Shader.ChannelSetMode] = ...
        REMOVE_CONVERT: ClassVar[Mari.Shader.ChannelSetMode] = ...
        REMOVE_DISCONNECT: ClassVar[Mari.Shader.ChannelSetMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    EXTEND_INVISIBLE: ClassVar[Mari.Shader.ChannelSetMode] = ...
    EXTEND_VISIBLE: ClassVar[Mari.Shader.ChannelSetMode] = ...
    NONE: ClassVar[Mari.Shader.ChannelSetMode] = ...
    REMOVE_CONVERT: ClassVar[Mari.Shader.ChannelSetMode] = ...
    REMOVE_DISCONNECT: ClassVar[Mari.Shader.ChannelSetMode] = ...
    nameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    parameterValueChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def channelList(self, *args, **kwargs) -> Any: ...
    def diffuseType(self, *args, **kwargs) -> Any: ...
    def getParameter(self, *args, **kwargs) -> Any: ...
    def inputList(self, *args, **kwargs) -> Any: ...
    def inputNameList(self, *args, **kwargs) -> Any: ...
    def isInputForShaderStacks(self, *args, **kwargs) -> Any: ...
    def isLayeredShader(self, *args, **kwargs) -> Any: ...
    def isLocked(self, *args, **kwargs) -> Any: ...
    def isStackShader(self, *args, **kwargs) -> Any: ...
    def isSystemShader(self, *args, **kwargs) -> Any: ...
    def layeredType(self, *args, **kwargs) -> Any: ...
    def makeCurrent(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def parameterNameList(self, *args, **kwargs) -> Any: ...
    def setInput(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setParameter(self, *args, **kwargs) -> Any: ...
    def shaderModel(self, *args, **kwargs) -> Any: ...
    def shaderNode(self, *args, **kwargs) -> Any: ...
    def specularType(self, *args, **kwargs) -> Any: ...
    def standaloneType(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ShaderLayer(Mari.AdjustableLayer):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def shader(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ShaderModel(Mari.Metadata):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def id(self, *args, **kwargs) -> Any: ...
    def input(self, *args, **kwargs) -> Any: ...
    def inputNames(self, *args, **kwargs) -> Any: ...
    def inputs(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ShaderModelInput(Mari.Metadata):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def defaultColor(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def prettyName(self, *args, **kwargs) -> Any: ...
    def scalar(self, *args, **kwargs) -> Any: ...
    def setDefaultColor(self, *args, **kwargs) -> Any: ...
    def shortName(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ShaderModelManager(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def list(self, *args, **kwargs) -> Any: ...
    def modelNames(self, *args, **kwargs) -> Any: ...
    def nodePathKey(self, *args, **kwargs) -> Any: ...
    def shaderModel(self, *args, **kwargs) -> Any: ...
    def shaderNodePathKeys(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Shelf(Mari.Metadata):
    shelfItemAdded: ClassVar[PySide2.QtCore.Signal] = ...
    shelfItemBadgeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    shelfItemDataChanged: ClassVar[PySide2.QtCore.Signal] = ...
    shelfItemIconChanged: ClassVar[PySide2.QtCore.Signal] = ...
    shelfItemLabelChanged: ClassVar[PySide2.QtCore.Signal] = ...
    shelfItemRefreshed: ClassVar[PySide2.QtCore.Signal] = ...
    shelfItemRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    shelfItemTagsChanged: ClassVar[PySide2.QtCore.Signal] = ...
    shelfItemTooltipChanged: ClassVar[PySide2.QtCore.Signal] = ...
    shelfNameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def createItem(self, *args, **kwargs) -> Any: ...
    def exportTo(self, *args, **kwargs) -> Any: ...
    def find(self, *args, **kwargs) -> Any: ...
    def importShelf(self, *args, **kwargs) -> Any: ...
    def isGrouped(self, *args, **kwargs) -> Any: ...
    def isSystemShelf(self, *args, **kwargs) -> Any: ...
    def list(self, *args, **kwargs) -> Any: ...
    def loadItem(self, *args, **kwargs) -> Any: ...
    def loadShelf(self, *args, **kwargs) -> Any: ...
    def locked(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def path(self, *args, **kwargs) -> Any: ...
    def removeItem(self, *args, **kwargs) -> Any: ...
    def saveAs(self, *args, **kwargs) -> Any: ...
    def setLocked(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ShelfItem(Mari.Action):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def data(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def saveAs(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setTags(self, *args, **kwargs) -> Any: ...
    def tags(self, *args, **kwargs) -> Any: ...
    def type(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ShelfManager(Mari.API):
    class ShelfItemType:
        SHELF_ITEM_BRUSH: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
        SHELF_ITEM_COLOR: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
        SHELF_ITEM_COLOR_PROCEDURAL: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
        SHELF_ITEM_IMAGE: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
        SHELF_ITEM_MATERIAL: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
        SHELF_ITEM_PROCEDURAL_MASK: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
        SHELF_ITEM_SCALAR_PROCEDURAL: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
        SHELF_ITEM_UNKNOWN: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other) -> bool: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    SHELF_ITEM_BRUSH: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
    SHELF_ITEM_COLOR: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
    SHELF_ITEM_COLOR_PROCEDURAL: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
    SHELF_ITEM_IMAGE: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
    SHELF_ITEM_MATERIAL: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
    SHELF_ITEM_PROCEDURAL_MASK: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
    SHELF_ITEM_SCALAR_PROCEDURAL: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
    SHELF_ITEM_UNKNOWN: ClassVar[Mari.ShelfManager.ShelfItemType] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def createShelf(self, *args, **kwargs) -> Any: ...
    def find(self, *args, **kwargs) -> Any: ...
    def groupShelf(self, *args, **kwargs) -> Any: ...
    def list(self, *args, **kwargs) -> Any: ...
    def names(self, *args, **kwargs) -> Any: ...
    def removeShelf(self, *args, **kwargs) -> Any: ...
    def search(self, *args, **kwargs) -> Any: ...
    def ungroupShelf(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class SliderBase(Mari.WidgetBase):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def hideSlider(self, *args, **kwargs) -> Any: ...
    def hideValueEdit(self, *args, **kwargs) -> Any: ...
    def logarithmic(self, *args, **kwargs) -> Any: ...
    def precision(self, *args, **kwargs) -> Any: ...
    def range(self, *args, **kwargs) -> Any: ...
    def rangeMax(self, *args, **kwargs) -> Any: ...
    def rangeMin(self, *args, **kwargs) -> Any: ...
    def setLogarithmic(self, *args, **kwargs) -> Any: ...
    def setPrecision(self, *args, **kwargs) -> Any: ...
    def setRange(self, *args, **kwargs) -> Any: ...
    def setStepSize(self, *args, **kwargs) -> Any: ...
    def showSlider(self, *args, **kwargs) -> Any: ...
    def showValueEdit(self, *args, **kwargs) -> Any: ...
    def stepSize(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Snapshot(Mari.Metadata):
    creationDateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    creatorChanged: ClassVar[PySide2.QtCore.Signal] = ...
    idChanged: ClassVar[PySide2.QtCore.Signal] = ...
    nameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    previewChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def creationDate(self, *args, **kwargs) -> Any: ...
    def creator(self, *args, **kwargs) -> Any: ...
    def hasPreview(self, *args, **kwargs) -> Any: ...
    def id(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def preview(self, *args, **kwargs) -> Any: ...
    def setCreationDate(self, *args, **kwargs) -> Any: ...
    def setCreator(self, *args, **kwargs) -> Any: ...
    def setID(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPreview(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Snapshotable(Mari.Lockable):
    snapshotAdded: ClassVar[PySide2.QtCore.Signal] = ...
    snapshotRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def createSnapshot(self, *args, **kwargs) -> Any: ...
    def deleteSnapshot(self, *args, **kwargs) -> Any: ...
    def findSnapshotWithID(self, *args, **kwargs) -> Any: ...
    def revertToSnapshot(self, *args, **kwargs) -> Any: ...
    def snapshotList(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class TeleportNode(Mari.Node):
    channelNameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def channelName(self, *args, **kwargs) -> Any: ...
    def connectSignals(self, *args, **kwargs) -> Any: ...
    def setChannelName(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class Tool(Mari.PropertySource):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def cursor(self, *args, **kwargs) -> Any: ...
    def description(self, *args, **kwargs) -> Any: ...
    def help(self, *args, **kwargs) -> Any: ...
    def icon(self, *args, **kwargs) -> Any: ...
    def iconActive(self, *args, **kwargs) -> Any: ...
    def information(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ToolBar(Mari.WidgetBase):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def actionsList(self, *args, **kwargs) -> Any: ...
    def addAction(self, *args, **kwargs) -> Any: ...
    def addActionBefore(self, *args, **kwargs) -> Any: ...
    def addActionList(self, *args, **kwargs) -> Any: ...
    def addActionObject(self, *args, **kwargs) -> Any: ...
    def addSeparator(self, *args, **kwargs) -> Any: ...
    def addWidget(self, *args, **kwargs) -> Any: ...
    def insertSeparator(self, *args, **kwargs) -> Any: ...
    def insertWidget(self, *args, **kwargs) -> Any: ...
    def isLocked(self, *args, **kwargs) -> Any: ...
    def lock(self, *args, **kwargs) -> Any: ...
    def setLocked(self, *args, **kwargs) -> Any: ...
    def setSpacing(self, *args, **kwargs) -> Any: ...
    def setVisibile(self, *args, **kwargs) -> Any: ...
    def spacing(self, *args, **kwargs) -> Any: ...
    def unlock(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class ToolManager(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def current(self, *args, **kwargs) -> Any: ...
    def currentHelpString(self, *args, **kwargs) -> Any: ...
    def currentTool(self, *args, **kwargs) -> Any: ...
    def getTool(self, *args, **kwargs) -> Any: ...
    def loadBrushes(self, *args, **kwargs) -> Any: ...
    def names(self, *args, **kwargs) -> Any: ...
    def setCurrent(self, *args, **kwargs) -> Any: ...
    def setCurrentTool(self, *args, **kwargs) -> Any: ...
    def toolsList(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class UvIndexRangeList(Mari.IndexRangeList):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def fromString(self, *args, **kwargs) -> Any: ...
    def toString(self, *args, **kwargs) -> Any: ...
    def udimList(self, *args, **kwargs) -> Any: ...
    def uvIndexList(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...

class VectorN(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def asTuple(self, *args, **kwargs) -> Any: ...
    def length(self, *args, **kwargs) -> Any: ...
    def size(self, *args, **kwargs) -> Any: ...
    def w(self, *args, **kwargs) -> Any: ...
    def x(self, *args, **kwargs) -> Any: ...
    def y(self, *args, **kwargs) -> Any: ...
    def z(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...
    def __reduce__(self) -> Any: ...

class WidgetBase(Mari.API):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addToLayout(self, *args, **kwargs) -> Any: ...
    def blockSignals(self, *args, **kwargs) -> Any: ...
    def disable(self, *args, **kwargs) -> Any: ...
    def enable(self, *args, **kwargs) -> Any: ...
    def hide(self, *args, **kwargs) -> Any: ...
    def isEnabled(self, *args, **kwargs) -> Any: ...
    def isVisible(self, *args, **kwargs) -> Any: ...
    def maximumHeight(self, *args, **kwargs) -> Any: ...
    def maximumWidth(self, *args, **kwargs) -> Any: ...
    def minimumHeight(self, *args, **kwargs) -> Any: ...
    def minimumWidth(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setMaximumHeight(self, *args, **kwargs) -> Any: ...
    def setMaximumWidth(self, *args, **kwargs) -> Any: ...
    def setMinimumHeight(self, *args, **kwargs) -> Any: ...
    def setMinimumWidth(self, *args, **kwargs) -> Any: ...
    def setStatusTip(self, *args, **kwargs) -> Any: ...
    def setToolTip(self, *args, **kwargs) -> Any: ...
    def setVisible(self, *args, **kwargs) -> Any: ...
    def show(self, *args, **kwargs) -> Any: ...
    def statusTip(self, *args, **kwargs) -> Any: ...
    def toolTip(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> bool: ...