# mypy: disable-error-code="misc, override, attr-defined, no-redef, assignment"

import CacheManager as CacheManager
import PyFnAttribute as FnAttribute
import PyFnGeolib as FnGeolib
import PyFnGeolibServices as FnGeolibServices
import NodegraphAPI as NodegraphAPI
import NodegraphAPI_cmodule as NodegraphAPI_cmodule
import Nodes3DAPI
import Nodes3DAPI.UpdateModes as UpdateModes
import Utils as Utils
import _weakrefset
import weakref
from Nodes3DAPI.PortOpClient import PortOpClient as PortOpClient, g_portOpClientRegistry as g_portOpClientRegistry
from Nodes3DAPI.TerminalOpDelegates.TerminalOpDelegate import TerminalOpDelegate
from PyFnGeolib import _Geolib as _Geolib, _Runtime as _Runtime, _gDefaultSourceOp as _gDefaultSourceOp
from _typeshed import Incomplete
from typing import Any, ClassVar
from typing import Tuple
from typing import Callable

NodegraphEventTypes: dict
_OpDependencyInfo_pull: dict
_OpDependencyInfo_push: dict
__g_activePorts: dict
__terminalOpDelegates: dict
event: str
g_commitIdCallbacks: set
g_directDirtyOpNodes: set
g_directDirtyParamNodes: set
g_dirtiedPortOpClients: set
g_hadPenupEvent: bool
g_immediateUpdateRequired: bool
g_lastCommitTime: float
g_portChangedNodes: set
g_runtimeIsProcessing: bool
kNodePortChangeEventsKey: int
kParamChangedEventsKey: int
kParamPenUpEventsExclusionsKey: int
kPortConnectionEventsKey: int
k_busyRuntimeCommitInterval: float

class NodeGeolib3:
    class OpChainInterface:
        FAIL: ClassVar[int] = ...
        NO_OP: ClassVar[int] = ...
        SKIP: ClassVar[int] = ...
        def __init__(self, port, graphState, entries, inputRequests): ...
        def addInputRequest(self, inputPortName, graphState, invalidInputBehavior: int = ...): ...
        def appendOp(self, opType, opArgs): ...
        def getGraphState(self): ...
        def getMinRequiredInputs(self): ...
        def getPort(self): ...
        def setExplicitInputRequestsEnabled(self, state): ...
        def setMinRequiredInputs(self, value): ...
    class OpRecord:
        def __init__(self, transaction, nodeName, nodeType): ...
    class ParamDependencyTracker:
        def __init__(self, port, graphState): ...
        def addDependency(self, node): ...
        def __enter__(self): ...
        def __exit__(self, type, value, traceback): ...
    _NodeGeolib3__instances: ClassVar[_weakrefset.WeakSet] = ...
    _NodeGeolib3__opIdToNodeDict: ClassVar[weakref.WeakValueDictionary] = ...
    def __init__(self): ...
    def _NodeGeolib3__handleInvalidInput(self, transaction, graphState, inputOps, inputPortName, invalidInputBehavior, message): ...
    def _areInputsAndParametersDirty(self, port: NodegraphAPI.Port, graphState: NodegraphAPI.GraphState, visitedState: set, reset: bool = ...) -> Tuple[bool, bool]: ...
    def _areInputsDirty(self, port, graphState, visitedState, reset: bool = ...): ...
    def _areParamsDirty(self, port, graphState, reset: bool = ...): ...
    def _areParentsDirty(self, graphState: NodegraphAPI.GraphState, reset: bool = ...) -> bool: ...
    def _createOrGetOp(self, transaction, key, graphState): ...
    def _flushAll(self): ...
    def _getErrorOp(self, port: NodegraphAPI.Port, graphState: NodegraphAPI.GraphState, transaction: FnGeolib.GeolibRuntimeTransaction, message: str) -> FnGeolib.GeolibRuntimeOp: ...
    def _getOp(self, port: NodegraphAPI.Port, graphState: NodegraphAPI.GraphState, visitedState: set, transaction: FnGeolib.GeolibRuntimeTransaction) -> FnGeolib.GeolibRuntimeOp: ...
    def _getSafeOp(self, port, graphState, visitedState, transaction): ...
    def _getSafeOpChain(self, port, graphState, visitedState, transaction): ...
    def _registerOpChain(self, opChain): ...
    def _setParamsDirty(self): ...
    def _unregisterOpChain(self, opChain): ...
    def flushAll(self): ...
    def getNodeForOpId(self, opId: int) -> Nodes3DAPI.Node3D | None: ...
    def invalidateOps(self): ...

class _NodeTraversal(NodeTraversal):
    @classmethod
    def __init__(cls, graphState, nodeTraversalEndpoints): ...

class _PortAndGraphState(tuple):
    _field_defaults: ClassVar[dict] = ...
    _fields: ClassVar[tuple] = ...
    _fields_defaults: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, _cls, port, graphState): ...
    def _asdict(self): ...
    @classmethod
    def _make(cls, iterable): ...
    def _replace(self, _self, **kwds): ...
    def __getnewargs__(self): ...
    @property
    def graphState(self) -> Any: ...
    @property
    def port(self) -> Any: ...

def ActivatePort(port: NodegraphAPI.Port, graphState: Incomplete | None = ..., potentialOpChangeCallback: Incomplete | None = ..., getOpFunction: Incomplete | None = ..., applyTerminalOpDelegatesForCallback: bool = ...): ...
def ApplyTerminalOpDelegates(op: FnGeolib.GeolibRuntimeOp, txn: FnGeolib.GeolibRuntimeTransaction, port: NodegraphAPI.Port, graphState: NodegraphAPI.GraphState) -> FnGeolib.GeolibRuntimeOp: ...
def CommitChanges() -> int: ...
def DeactivatePort(port: NodegraphAPI.Port, graphState: Incomplete | None = ..., potentialOpChangeCallback: Incomplete | None = ...): ...
def GetDefaultSourceOp(): ...
def GetRegisteredTerminalOpDelegateNames_geolib3() -> list[str]: ...
def GetRegisteredTerminalOpDelegate_geolib3(name: str) -> TerminalOpDelegate: ...
def GetRuntime(): ...
def IsProcessing(): ...
def ManualUpdate() -> int: ...
def MarkPortOpClientDirty(portOpClient: PortOpClient): ...
def PrintOpDependencyInfo(): ...
def RegisterCommitIdCallback(commitIdCallback: Callable): ...
def RegisterPortOpClient(portOpClient: PortOpClient): ...
def RegisterTerminalOpDelegate_geolib3(name: str, terminalOpDelegate: TerminalOpDelegate): ...
def UnregisterPortOpClient(portOpClient: PortOpClient): ...
def UnregisterTerminalOpDelegate_geolib3(name: str): ...
def UpdatePortOpClients(portOpClients: Incomplete | None = ...) -> int: ...
def _DeactivateInvalidPort(port: NodegraphAPI.Port): ...
def _DeactivateNode(node: NodegraphAPI.Node): ...
def _DeleteOpDependencyInfo(deletedNodes): ...
def _GetPushDependencies(node): ...
def _SetOpDependencyInfo(port, graphState, newDependencies): ...
def _ValidateOpDependencyInfo(validateDeletions: bool = ...): ...
def __FlushCaches(): ...
def __FlushNode3DGeolibCaches(): ...
def __UpdateTerminalOpDelegates() -> bool: ...
def __Update_PushDependencyInfo(nodesToAddEntry, nodesToRemoveEntry, port, graphState): ...
def __idleCB(*args, **kwds): ...
def __issueCommitIdCallbacks(commitId): ...
def __manualUpdateCB(args): ...
def __nodeChangeCB(args): ...
def __nodeChangeCBWrapped(args): ...
def __nodeSetViewedCB(args): ...
def __node_deleteCB(args): ...
def __updatesPermitted() -> bool: ...
def _execNodeTraversal(nodeTraversal): ...
def _getOutputPort(port): ...
def _indexPortOpClientsByGraphStateSpec(portOpClients): ...
def _indexPortOpClientsByNodeTraversal(portOpClientsByGraphStateSpec): ...
def _indexPortOpClientsByPortAndPostTraversalGraphState(portOpClientsByNodeTraversal, postTraversalGraphStateByNodeTraversal): ...
def _indexPortOpClientsBySourcePortAndGraphState(portOpClientsByPortAndPostTraversalGraphState): ...
def _indexPostTraversalGraphStateByNodeTraversal(portOpClientsByNodeTraversal): ...
def _isPenUpUpdateRequired(): ...
def _updateActivePorts(visitedState, txn): ...
def _updatePortOpClients(visitedState, txn, portOpClients: Incomplete | None = ...): ...
def _updatePortOpClientsBySourcePortAndGraphState(portOpClientsBySourcePortAndGraphState, visitedState, txn): ...