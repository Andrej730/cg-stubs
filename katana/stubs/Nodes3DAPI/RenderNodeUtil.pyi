# mypy: disable-error-code="misc, override, attr-defined, no-redef, assignment"

import AssetAPI as AssetAPI
import ConfigurationAPI_cmodule as Configuration
import PyFnAttribute as FnAttribute
import PyFnGeolib as FnGeolib
import PyFnGeolibProducers as FnGeolibProducers
import GeoAPI as GeoAPI
import Nodes3DAPI.Node3D as Node3D
import NodegraphAPI as NodegraphAPI
import Nodes3DAPI.RenderNode
import RenderingAPI as RenderingAPI
import PyResolutionTableFn as ResolutionTable
import Utils as Utils
import re
from Nodes3DAPI.RenderNode import RenderNode
from _typeshed import Incomplete

_CameraInfoLookups: tuple
_LoadedLiveGroups: None
global_misc_resolution_re: re.Pattern
global_renderNodeInfo_cache: dict

class RenderCameraError(RenderingAPI.RenderStartupError): ...

class RenderNodeInfo:
    def __init__(self, node, graphState, producer, cacheID, cameraErrorIsFatal: bool = ...): ...
    def _RenderNodeInfo__computeTargetFileName(self, outputAttrs, forceLocal, makeVersionTemplate, imageInfoDict): ...
    def _RenderNodeInfo__computeTargetLocation(self, outputAttrs, forceLocal, imageInfoDict): ...
    def _RenderNodeInfo__compute_tile_file_name(self, outputType, outputFile, tileRender: Incomplete | None = ..., shadowType: str = ...): ...
    def _RenderNodeInfo__getOutputAttr(self, outputAttrs, attrName, defValue): ...
    def _RenderNodeInfo__getProducerData(self, cameraErrorIsFatal: bool = ...): ...
    def _RenderNodeInfo__getRenderSettingsAttributesDict(self, excludeOutputs: bool = ...) -> dict: ...
    def _RenderNodeInfo__process_color_output(self, name, outputAttrs, outputScope, forceLocal, enabled, makeVersionTemplate, imageInfoDict): ...
    def _RenderNodeInfo__process_deep_output(self, name, outputAttrs, outputScope, forceLocal, enabled, makeVersionTemplate, imageInfoDict): ...
    def _RenderNodeInfo__process_other_output(self, name, outputAttrs, outputScope, forceLocal, enabled, makeVersionTemplate, imageInfoDict): ...
    def _RenderNodeInfo__process_output(self, index, forceLocal, makeVersionTemplate): ...
    def _RenderNodeInfo__process_prescript_output(self, name, outputAttrs, outputScope, forceLocal, enabled, makeVersionTemplate, imageInfoDict): ...
    def _RenderNodeInfo__process_raw_output(self, name, outputAttrs, outputScope, forceLocal, enabled, makeVersionTemplate, imageInfoDict): ...
    def _RenderNodeInfo__process_script_output(self, name, outputAttrs, outputScope, forceLocal, enabled, makeVersionTemplate, imageInfoDict): ...
    def _RenderNodeInfo__process_shadow_output(self, name, outputAttrs, outputScope, forceLocal, enabled, makeVersionTemplate, imageInfoDict): ...
    def _RenderNodeInfo__resolvePathsInCommand(self, command): ...
    def computeTileFileName(self, outputInfo, tileRender: Incomplete | None = ...): ...
    def getAllOutputNames(self): ...
    def getCacheID(self): ...
    def getExplicitOutputVersion(self): ...
    def getIncludedByDefault(self, name): ...
    def getNumberOfOutputs(self): ...
    def getOutputInfoByIndex(self, index, forceLocal, makeVersionTemplate: bool = ...): ...
    def getOutputInfoByName(self, name, forceLocal, makeVersionTemplate: bool = ...): ...
    def getPackageString(self): ...
    def getProducer(self): ...
    def getRenderSettings(self): ...
    def getRendererString(self): ...
    def getTileStitchWork(self, tileInfo, tileCleanup, forceLocal): ...
    def isTileRender(self): ...
    def shouldForceLegacyChannelNames(self, outputPassName: str) -> bool: ...

class RenderSettingsError(RenderingAPI.RenderStartupError): ...

def ClearRenderNodeInfoCache(node, graphState): ...
def CreateOutputOverrideOp(txn, inputOp, node, graphState): ...
def FlushRenderNodeInfoCache(*args, **kwargs): ...
def GetCameraInfoDict(cameraProducer): ...
def GetCameraSettings(settings: dict, globalsProducer: FnGeolibProducers.GeometryProducer, camera_name: str, cameraErrorIsFatal: bool = ...) -> dict: ...
def GetDefaultIncludedOutputs(node): ...
def GetNumRenderOutputs(node, producer: Incomplete | None = ...): ...
def GetOutputIncluded(node, outputName): ...
def GetRenderNodeInfo(node: Nodes3DAPI.RenderNode.RenderNode | None, graphState: Incomplete | None = ..., client: Incomplete | None = ..., cameraErrorIsFatal: bool = ...) -> RenderNodeInfo: ...
def GetRenderOutputLocation(node, idx, producer: Incomplete | None = ..., graphState: Incomplete | None = ..., withActiveFrameRange: bool = ...): ...
def GetRenderOutputType(node, idx, producer: Incomplete | None = ...): ...
def GetRenderSettings(globalsProducer: FnGeolibProducers.GeometryProducer | None, sampleRate: tuple = ..., ROI: Incomplete | None = ..., cameraErrorIsFatal: bool = ...) -> dict: ...
def IsRenderNodeInfoInCache(node, graphState): ...
def PostCreateAllProductsAndLocations(node, versionup): ...
def PostCreateProductAndLocation(node, idx, versionup, assetTxn: Incomplete | None = ...): ...
def PreCreateAllProductsAndLocations(node, versionup, producer: Incomplete | None = ...): ...
def PreCreateProductAndLocation(node, idx, versionup, assetTxn: Incomplete | None = ...): ...
def SetOutputIncluded(node, outputName, included): ...
def SyncAllOutputPorts(): ...
def SyncOutputPorts(node: RenderNode, cameraErrorIsFatal: bool = ...): ...
def UpdateIncludedOutputs(node, updateDict): ...
def _ConvertResolution(resolution): ...
def _GetMetadataAsDict(metadataGroupAttr): ...
def _GetRenderNodeInfoCacheID(node, graphState, client): ...
def _GetRenderNodeInfoClient(node, graphState): ...
def _LiveGroupLoadFixer(eventName, eventId, **kwargs): ...
def _Require_NodeType(node, fn_name): ...
def _UpdateDictWithSettingsAttr(argsDict, attr, currentPath: str = ...): ...
def __sortSampleTimes(sampleDict): ...
def _get_attrs_from_xform(xformAttr, attrList): ...
def _get_inverse_xform_attr_list(producer): ...
def _updateOutputIncludedParam(node, outputName, included, explicit): ...