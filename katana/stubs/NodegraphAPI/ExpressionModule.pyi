# mypy: disable-error-code="misc, override, attr-defined, no-redef, assignment"

import AssetAPI as AssetAPI
import ConfigurationAPI_cmodule as Configuration
import Utils.EventModule as EventModule
import PyFnGeolibServices.ExpressionMath as ExpressionMath
import PyFnAttribute as FnAttribute
import NodegraphAPI_cmodule as NodegraphAPI_cmodule
import NodegraphAPI.NodegraphGlobals as NodegraphGlobals
import PyFCurve as PyFCurve
import PyResolutionTableFn as ResolutionTable
import Utils as Utils
from PyFnGeolibServices.ExpressionMath import function as function
from _typeshed import Incomplete
from typing import Any, ClassVar, Set, Tuple

_AdditionalLocalsFunctions: dict
_AssetAttributeCache: dict
_ExpressionGlobalScope: dict
_ExrAttrCache: dict
_ExrAttrCacheSize: int
_FCurveCache: dict
_FCurveCacheSize: int
functionName: str
katanaBranch: float
katanaRelease: str
katanaVersion: str
project: ProjectSettings

class ProjectSettings:
    __pychecker__: ClassVar[str] = ...
    def __init__(self): ...
    def __getattr__(self, attr): ...
    @property
    def assetID(self) -> Any: ...
    @property
    def dir(self) -> Any: ...
    @property
    def file(self) -> Any: ...
    @property
    def originalAssetID(self) -> Any: ...

class _ParamRef:
    __hash__: ClassVar[None] = ...
    def __init__(self, param): ...
    def getChildren(self): ...
    def getNode(self): ...
    def getNodeName(self): ...
    def getParent(self): ...
    def isNumber(self): ...
    def __abs__(self): ...
    def __add__(self, other): ...
    def __bool__(self): ...
    def __call__(self, time: Incomplete | None = ...): ...
    def __div__(self, other): ...
    def __divmod__(self, other): ...
    def __eq__(self, other): ...
    def __float__(self): ...
    def __floordiv__(self, other): ...
    def __getattr__(self, attr): ...
    def __getitem__(self, key): ...
    def __int__(self): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __lt__(self, other): ...
    def __mod__(self, other): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __pow__(self, other, modulo: Incomplete | None = ...): ...
    def __radd__(self, other): ...
    def __rdiv__(self, other): ...
    def __rdivmod__(self, other): ...
    def __rfloordiv__(self, other): ...
    def __rmod__(self, other): ...
    def __rmul__(self, other): ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

def FCurveLookup(curveFile, curveName, frame): ...
def GetExpressionGlobalValue(name: str): ...
def RegisterLocalFunction(name, fn): ...
def SetExpressionGlobalValue(name: str, value): ...
def SetupExpressionGlobalScopeFromRootNode(): ...
def _AssetAttrImpl(assetId, attrName, default: Incomplete | None = ...): ...
def _AssetIdForScope(assetId, scope): ...
def _AssetResolveImpl(assetId, default: Incomplete | None = ...): ...
def _ClearAssetAttributeCache(*args, **kwargs): ...
def _ClearExrAttrCache(*args, **kwargs): ...
def _ClearFCurveCache(*args, **kwargs): ...
def _ExpressionLocalFn(paramName, allowFunctions): ...
def _GetCacheKeyForAsset(assetId): ...
def _GetExrAttrImpl(assetId, name, frame, default: Incomplete | None = ...): ...
def _MatchGlobalGraphStateVariable(variableName: str, pattern: str, matchMethod: str) -> bool: ...
def _ResolvePathImpl(pathStr, frame, default: Incomplete | None = ...): ...
def __BuildExpressionObject(node): ...
def __nodegraph_loadEnd_callback(eventType, eventID, **kwargs): ...
def __parameter_setValue_callback(eventType, eventID, param, **kwargs): ...
def _getFrameTime() -> float: ...
def _getNode(nodeName): ...
def _getParam(nodeName): ...
def _getParamRelative(paramRef, relativePath): ...
def _getParamRelativeInternal(param, pathList, index: int = ...): ...
def _getVar(varName: str): ...
def _matchGraphStateVariable(variableName: str, pattern: str, matchMethod: str) -> bool: ...
def customGetEnv(varName, defaultValue): ...
def customGetRes(resolutionName): ...
def customGetResDict(resolutionName): ...
