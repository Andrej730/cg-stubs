# mypy: disable-error-code="misc, override, attr-defined, no-redef, assignment"

import AssetAPI as AssetAPI
import PyFnAttribute as FnAttribute
import PyFnGeolib as FnGeolib
import PyFnGeolibProducers as FnGeolibProducers
import LookFileBakeAPI as LookFileBakeAPI
import Nodes3DAPI.LookFileBaking as LookFileBaking
import NodegraphAPI as NodegraphAPI
import Utils as Utils
from LookFileBakeAPI.Constants import OutputFormat as OutputFormat
from LookFileBakeAPI.Exceptions import LookFileBakeException as LookFileBakeException
from Nodes3DAPI.Node3D import Node3D as Node3D
from Utils.Decorators import deprecated as deprecated
from _typeshed import Incomplete

_ExtraHints: dict
_Parameter_XML: str

class LookFileBake(Node3D):
    def __init__(self): ...
    def AddPassInput(self, passName: str): ...
    def CheckRootLocations(self, rootLocations, origProducer, asmbCmptDict: Incomplete | None = ...): ...
    def DeletePassInput(self, index: int): ...
    def PostLookFileBake(self, assetId, asmbCmptDict, progressCallback: Incomplete | None = ..., abortCallback: Incomplete | None = ...): ...
    def PreLookFileBake(self, assetId, asmbCmptDict, progressCallback: Incomplete | None = ..., abortCallback: Incomplete | None = ...): ...
    def RenamePassInput(self, index: int, newName: str): ...
    def ReorderInput(self, index: int, newIndex: int): ...
    def WriteLookFileBakeScriptFiles(self, sessionPath: str, graphState: NodegraphAPI.GraphState, versionup: bool, publish: bool): ...
    def WriteLookFileToDirectory(self, outputFormatName, graphState, dirPath, includeGlobalAttributes: bool = ..., includeLodInfo: bool = ..., progressCallback: Incomplete | None = ..., passName: Incomplete | None = ...): ...
    def WriteToAsset(self, graphState, assetId, args: Incomplete | None = ..., progressCallback: Incomplete | None = ...): ...
    def WriteToCompoundFile(self, graphState: Tuple[NodegraphAPI.GraphState, float | None], dirPath: str, includeGlobalAttributes: bool = ..., includeLodInfo: bool = ..., progressCallback: Incomplete | None = ..., passName: Incomplete | None = ...) -> list[str]: ...
    def WriteToDirectory(self, graphState: Tuple[NodegraphAPI.GraphState, float | None], dirPath: str, includeGlobalAttributes: bool = ..., includeLodInfo: bool = ..., progressCallback: Incomplete | None = ..., passName: Incomplete | None = ...) -> list[str]: ...
    def WriteToLookFile(self, graphState: Tuple[NodegraphAPI.GraphState, float | None], filePath: str, includeGlobalAttributes: bool = ..., includeLodInfo: bool = ..., progressCallback: Incomplete | None = ..., passName: Incomplete | None = ...): ...
    def _LookFileBake__getBakerOps(self, passInputPortNames, graphState): ...
    def _LookFileBake__getIncludeGlobalAttributes(self, frameTime): ...
    def _LookFileBake__getIncludeLodInfo(self, frameTime): ...
    def _LookFileBake__getMaterialTreeRootLocations(self, frameTime): ...
    def _LookFileBake__getOutputFormatName(self, frameTime): ...
    def _LookFileBake__getRootLocations(self, frameTime): ...
    def _LookFileBake__getSourceFile(self): ...
    def _getOpChain(self, interface): ...
    def _getPassInputPortNames(self): ...
    def _getPassInputPorts(self): ...
    def _getReferenceInputPort(self): ...
    def _getReferenceInputPortName(self): ...
    def addParameterHints(self, attrName, inputDict): ...
    def getOrigProducer(self, graphState, portName: Incomplete | None = ..., addCELMatchOp: bool = ...): ...
    def getReferenceProducer(self, graphState): ...